
yeni_ide_temel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090d0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  080091e0  080091e0  000191e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094c8  080094c8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080094c8  080094c8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080094c8  080094c8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094c8  080094c8  000194c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094cc  080094cc  000194cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080094d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001e0  080096b0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  080096b0  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f57f  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002203  00000000  00000000  0002f788  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fb8  00000000  00000000  00031990  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea0  00000000  00000000  00032948  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015427  00000000  00000000  000337e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b05d  00000000  00000000  00048c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075e9d  00000000  00000000  00053c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c9b09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004db4  00000000  00000000  000c9b84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080091c8 	.word	0x080091c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080091c8 	.word	0x080091c8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <HAL_Init+0x28>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <HAL_Init+0x28>)
 800111a:	f043 0310 	orr.w	r3, r3, #16
 800111e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 f945 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001126:	2000      	movs	r0, #0
 8001128:	f000 f808 	bl	800113c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800112c:	f004 fd06 	bl	8005b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40022000 	.word	0x40022000

0800113c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_InitTick+0x54>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x58>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	fbb3 f3f1 	udiv	r3, r3, r1
 8001156:	fbb2 f3f3 	udiv	r3, r2, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f95d 	bl	800141a <HAL_SYSTICK_Config>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e00e      	b.n	8001188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d80a      	bhi.n	8001186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f000 f925 	bl	80013c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_InitTick+0x5c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	e000      	b.n	8001188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000008 	.word	0x20000008
 8001194:	20000004 	.word	0x20000004
 8001198:	20000000 	.word	0x20000000

0800119c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_IncTick+0x1c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_IncTick+0x20>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a03      	ldr	r2, [pc, #12]	; (80011bc <HAL_IncTick+0x20>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	20000004 	.word	0x20000004
 80011bc:	20000268 	.word	0x20000268

080011c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;
 80011c4:	4b02      	ldr	r3, [pc, #8]	; (80011d0 <HAL_GetTick+0x10>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	20000268 	.word	0x20000268

080011d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff fff0 	bl	80011c0 <HAL_GetTick>
 80011e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ec:	d005      	beq.n	80011fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_Delay+0x40>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011fa:	bf00      	nop
 80011fc:	f7ff ffe0 	bl	80011c0 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	429a      	cmp	r2, r3
 800120a:	d8f7      	bhi.n	80011fc <HAL_Delay+0x28>
  {
  }
}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000004 	.word	0x20000004

08001218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001234:	4013      	ands	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124a:	4a04      	ldr	r2, [pc, #16]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	60d3      	str	r3, [r2, #12]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <__NVIC_GetPriorityGrouping+0x18>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	f003 0307 	and.w	r3, r3, #7
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	2b00      	cmp	r3, #0
 800128c:	db0b      	blt.n	80012a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	f003 021f 	and.w	r2, r3, #31
 8001294:	4906      	ldr	r1, [pc, #24]	; (80012b0 <__NVIC_EnableIRQ+0x34>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	095b      	lsrs	r3, r3, #5
 800129c:	2001      	movs	r0, #1
 800129e:	fa00 f202 	lsl.w	r2, r0, r2
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	e000e100 	.word	0xe000e100

080012b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	db0a      	blt.n	80012de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	490c      	ldr	r1, [pc, #48]	; (8001300 <__NVIC_SetPriority+0x4c>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	0112      	lsls	r2, r2, #4
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	440b      	add	r3, r1
 80012d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012dc:	e00a      	b.n	80012f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4908      	ldr	r1, [pc, #32]	; (8001304 <__NVIC_SetPriority+0x50>)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	3b04      	subs	r3, #4
 80012ec:	0112      	lsls	r2, r2, #4
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	440b      	add	r3, r1
 80012f2:	761a      	strb	r2, [r3, #24]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000e100 	.word	0xe000e100
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f1c3 0307 	rsb	r3, r3, #7
 8001322:	2b04      	cmp	r3, #4
 8001324:	bf28      	it	cs
 8001326:	2304      	movcs	r3, #4
 8001328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3304      	adds	r3, #4
 800132e:	2b06      	cmp	r3, #6
 8001330:	d902      	bls.n	8001338 <NVIC_EncodePriority+0x30>
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3b03      	subs	r3, #3
 8001336:	e000      	b.n	800133a <NVIC_EncodePriority+0x32>
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	f04f 32ff 	mov.w	r2, #4294967295
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	401a      	ands	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001350:	f04f 31ff 	mov.w	r1, #4294967295
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43d9      	mvns	r1, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	4313      	orrs	r3, r2
         );
}
 8001362:	4618      	mov	r0, r3
 8001364:	3724      	adds	r7, #36	; 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800137c:	d301      	bcc.n	8001382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137e:	2301      	movs	r3, #1
 8001380:	e00f      	b.n	80013a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <SysTick_Config+0x40>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138a:	210f      	movs	r1, #15
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f7ff ff90 	bl	80012b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <SysTick_Config+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	4b04      	ldr	r3, [pc, #16]	; (80013ac <SysTick_Config+0x40>)
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff2d 	bl	8001218 <__NVIC_SetPriorityGrouping>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff42 	bl	8001260 <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ff90 	bl	8001308 <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff5f 	bl	80012b4 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff35 	bl	800127c <__NVIC_EnableIRQ>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ffa2 	bl	800136c <SysTick_Config>
 8001428:	4603      	mov	r3, r0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001446:	2b02      	cmp	r3, #2
 8001448:	d005      	beq.n	8001456 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2204      	movs	r2, #4
 800144e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	e051      	b.n	80014fa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 020e 	bic.w	r2, r2, #14
 8001464:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0201 	bic.w	r2, r2, #1
 8001474:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a22      	ldr	r2, [pc, #136]	; (8001504 <HAL_DMA_Abort_IT+0xd0>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d029      	beq.n	80014d4 <HAL_DMA_Abort_IT+0xa0>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a20      	ldr	r2, [pc, #128]	; (8001508 <HAL_DMA_Abort_IT+0xd4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d022      	beq.n	80014d0 <HAL_DMA_Abort_IT+0x9c>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a1f      	ldr	r2, [pc, #124]	; (800150c <HAL_DMA_Abort_IT+0xd8>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d01a      	beq.n	80014ca <HAL_DMA_Abort_IT+0x96>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a1d      	ldr	r2, [pc, #116]	; (8001510 <HAL_DMA_Abort_IT+0xdc>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d012      	beq.n	80014c4 <HAL_DMA_Abort_IT+0x90>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <HAL_DMA_Abort_IT+0xe0>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d00a      	beq.n	80014be <HAL_DMA_Abort_IT+0x8a>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a1a      	ldr	r2, [pc, #104]	; (8001518 <HAL_DMA_Abort_IT+0xe4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d102      	bne.n	80014b8 <HAL_DMA_Abort_IT+0x84>
 80014b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014b6:	e00e      	b.n	80014d6 <HAL_DMA_Abort_IT+0xa2>
 80014b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014bc:	e00b      	b.n	80014d6 <HAL_DMA_Abort_IT+0xa2>
 80014be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014c2:	e008      	b.n	80014d6 <HAL_DMA_Abort_IT+0xa2>
 80014c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c8:	e005      	b.n	80014d6 <HAL_DMA_Abort_IT+0xa2>
 80014ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ce:	e002      	b.n	80014d6 <HAL_DMA_Abort_IT+0xa2>
 80014d0:	2310      	movs	r3, #16
 80014d2:	e000      	b.n	80014d6 <HAL_DMA_Abort_IT+0xa2>
 80014d4:	2301      	movs	r3, #1
 80014d6:	4a11      	ldr	r2, [pc, #68]	; (800151c <HAL_DMA_Abort_IT+0xe8>)
 80014d8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	4798      	blx	r3
    } 
  }
  return status;
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40020008 	.word	0x40020008
 8001508:	4002001c 	.word	0x4002001c
 800150c:	40020030 	.word	0x40020030
 8001510:	40020044 	.word	0x40020044
 8001514:	40020058 	.word	0x40020058
 8001518:	4002006c 	.word	0x4002006c
 800151c:	40020000 	.word	0x40020000

08001520 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001520:	b480      	push	{r7}
 8001522:	b08b      	sub	sp, #44	; 0x2c
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001532:	e127      	b.n	8001784 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001534:	2201      	movs	r2, #1
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	429a      	cmp	r2, r3
 800154e:	f040 8116 	bne.w	800177e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b12      	cmp	r3, #18
 8001558:	d034      	beq.n	80015c4 <HAL_GPIO_Init+0xa4>
 800155a:	2b12      	cmp	r3, #18
 800155c:	d80d      	bhi.n	800157a <HAL_GPIO_Init+0x5a>
 800155e:	2b02      	cmp	r3, #2
 8001560:	d02b      	beq.n	80015ba <HAL_GPIO_Init+0x9a>
 8001562:	2b02      	cmp	r3, #2
 8001564:	d804      	bhi.n	8001570 <HAL_GPIO_Init+0x50>
 8001566:	2b00      	cmp	r3, #0
 8001568:	d031      	beq.n	80015ce <HAL_GPIO_Init+0xae>
 800156a:	2b01      	cmp	r3, #1
 800156c:	d01c      	beq.n	80015a8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800156e:	e048      	b.n	8001602 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001570:	2b03      	cmp	r3, #3
 8001572:	d043      	beq.n	80015fc <HAL_GPIO_Init+0xdc>
 8001574:	2b11      	cmp	r3, #17
 8001576:	d01b      	beq.n	80015b0 <HAL_GPIO_Init+0x90>
          break;
 8001578:	e043      	b.n	8001602 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800157a:	4a89      	ldr	r2, [pc, #548]	; (80017a0 <HAL_GPIO_Init+0x280>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d026      	beq.n	80015ce <HAL_GPIO_Init+0xae>
 8001580:	4a87      	ldr	r2, [pc, #540]	; (80017a0 <HAL_GPIO_Init+0x280>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d806      	bhi.n	8001594 <HAL_GPIO_Init+0x74>
 8001586:	4a87      	ldr	r2, [pc, #540]	; (80017a4 <HAL_GPIO_Init+0x284>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d020      	beq.n	80015ce <HAL_GPIO_Init+0xae>
 800158c:	4a86      	ldr	r2, [pc, #536]	; (80017a8 <HAL_GPIO_Init+0x288>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d01d      	beq.n	80015ce <HAL_GPIO_Init+0xae>
          break;
 8001592:	e036      	b.n	8001602 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001594:	4a85      	ldr	r2, [pc, #532]	; (80017ac <HAL_GPIO_Init+0x28c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d019      	beq.n	80015ce <HAL_GPIO_Init+0xae>
 800159a:	4a85      	ldr	r2, [pc, #532]	; (80017b0 <HAL_GPIO_Init+0x290>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d016      	beq.n	80015ce <HAL_GPIO_Init+0xae>
 80015a0:	4a84      	ldr	r2, [pc, #528]	; (80017b4 <HAL_GPIO_Init+0x294>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d013      	beq.n	80015ce <HAL_GPIO_Init+0xae>
          break;
 80015a6:	e02c      	b.n	8001602 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	623b      	str	r3, [r7, #32]
          break;
 80015ae:	e028      	b.n	8001602 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	3304      	adds	r3, #4
 80015b6:	623b      	str	r3, [r7, #32]
          break;
 80015b8:	e023      	b.n	8001602 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	3308      	adds	r3, #8
 80015c0:	623b      	str	r3, [r7, #32]
          break;
 80015c2:	e01e      	b.n	8001602 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	330c      	adds	r3, #12
 80015ca:	623b      	str	r3, [r7, #32]
          break;
 80015cc:	e019      	b.n	8001602 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d102      	bne.n	80015dc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015d6:	2304      	movs	r3, #4
 80015d8:	623b      	str	r3, [r7, #32]
          break;
 80015da:	e012      	b.n	8001602 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d105      	bne.n	80015f0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e4:	2308      	movs	r3, #8
 80015e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	611a      	str	r2, [r3, #16]
          break;
 80015ee:	e008      	b.n	8001602 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015f0:	2308      	movs	r3, #8
 80015f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	615a      	str	r2, [r3, #20]
          break;
 80015fa:	e002      	b.n	8001602 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015fc:	2300      	movs	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
          break;
 8001600:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	2bff      	cmp	r3, #255	; 0xff
 8001606:	d801      	bhi.n	800160c <HAL_GPIO_Init+0xec>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	e001      	b.n	8001610 <HAL_GPIO_Init+0xf0>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3304      	adds	r3, #4
 8001610:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	2bff      	cmp	r3, #255	; 0xff
 8001616:	d802      	bhi.n	800161e <HAL_GPIO_Init+0xfe>
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	e002      	b.n	8001624 <HAL_GPIO_Init+0x104>
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	3b08      	subs	r3, #8
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	210f      	movs	r1, #15
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	401a      	ands	r2, r3
 8001636:	6a39      	ldr	r1, [r7, #32]
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	431a      	orrs	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 8096 	beq.w	800177e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001652:	4b59      	ldr	r3, [pc, #356]	; (80017b8 <HAL_GPIO_Init+0x298>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	4a58      	ldr	r2, [pc, #352]	; (80017b8 <HAL_GPIO_Init+0x298>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6193      	str	r3, [r2, #24]
 800165e:	4b56      	ldr	r3, [pc, #344]	; (80017b8 <HAL_GPIO_Init+0x298>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800166a:	4a54      	ldr	r2, [pc, #336]	; (80017bc <HAL_GPIO_Init+0x29c>)
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	089b      	lsrs	r3, r3, #2
 8001670:	3302      	adds	r3, #2
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	220f      	movs	r2, #15
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	4013      	ands	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4b      	ldr	r2, [pc, #300]	; (80017c0 <HAL_GPIO_Init+0x2a0>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d013      	beq.n	80016be <HAL_GPIO_Init+0x19e>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4a      	ldr	r2, [pc, #296]	; (80017c4 <HAL_GPIO_Init+0x2a4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d00d      	beq.n	80016ba <HAL_GPIO_Init+0x19a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a49      	ldr	r2, [pc, #292]	; (80017c8 <HAL_GPIO_Init+0x2a8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d007      	beq.n	80016b6 <HAL_GPIO_Init+0x196>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a48      	ldr	r2, [pc, #288]	; (80017cc <HAL_GPIO_Init+0x2ac>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d101      	bne.n	80016b2 <HAL_GPIO_Init+0x192>
 80016ae:	2303      	movs	r3, #3
 80016b0:	e006      	b.n	80016c0 <HAL_GPIO_Init+0x1a0>
 80016b2:	2304      	movs	r3, #4
 80016b4:	e004      	b.n	80016c0 <HAL_GPIO_Init+0x1a0>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e002      	b.n	80016c0 <HAL_GPIO_Init+0x1a0>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <HAL_GPIO_Init+0x1a0>
 80016be:	2300      	movs	r3, #0
 80016c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c2:	f002 0203 	and.w	r2, r2, #3
 80016c6:	0092      	lsls	r2, r2, #2
 80016c8:	4093      	lsls	r3, r2
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016d0:	493a      	ldr	r1, [pc, #232]	; (80017bc <HAL_GPIO_Init+0x29c>)
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	089b      	lsrs	r3, r3, #2
 80016d6:	3302      	adds	r3, #2
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016ea:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <HAL_GPIO_Init+0x2b0>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	4938      	ldr	r1, [pc, #224]	; (80017d0 <HAL_GPIO_Init+0x2b0>)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]
 80016f6:	e006      	b.n	8001706 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016f8:	4b35      	ldr	r3, [pc, #212]	; (80017d0 <HAL_GPIO_Init+0x2b0>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	43db      	mvns	r3, r3
 8001700:	4933      	ldr	r1, [pc, #204]	; (80017d0 <HAL_GPIO_Init+0x2b0>)
 8001702:	4013      	ands	r3, r2
 8001704:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d006      	beq.n	8001720 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001712:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <HAL_GPIO_Init+0x2b0>)
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	492e      	ldr	r1, [pc, #184]	; (80017d0 <HAL_GPIO_Init+0x2b0>)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
 800171e:	e006      	b.n	800172e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001720:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <HAL_GPIO_Init+0x2b0>)
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	43db      	mvns	r3, r3
 8001728:	4929      	ldr	r1, [pc, #164]	; (80017d0 <HAL_GPIO_Init+0x2b0>)
 800172a:	4013      	ands	r3, r2
 800172c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800173a:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <HAL_GPIO_Init+0x2b0>)
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	4924      	ldr	r1, [pc, #144]	; (80017d0 <HAL_GPIO_Init+0x2b0>)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
 8001746:	e006      	b.n	8001756 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001748:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <HAL_GPIO_Init+0x2b0>)
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	43db      	mvns	r3, r3
 8001750:	491f      	ldr	r1, [pc, #124]	; (80017d0 <HAL_GPIO_Init+0x2b0>)
 8001752:	4013      	ands	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d006      	beq.n	8001770 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001762:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <HAL_GPIO_Init+0x2b0>)
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	491a      	ldr	r1, [pc, #104]	; (80017d0 <HAL_GPIO_Init+0x2b0>)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	60cb      	str	r3, [r1, #12]
 800176e:	e006      	b.n	800177e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <HAL_GPIO_Init+0x2b0>)
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	43db      	mvns	r3, r3
 8001778:	4915      	ldr	r1, [pc, #84]	; (80017d0 <HAL_GPIO_Init+0x2b0>)
 800177a:	4013      	ands	r3, r2
 800177c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	3301      	adds	r3, #1
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	fa22 f303 	lsr.w	r3, r2, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	f47f aed0 	bne.w	8001534 <HAL_GPIO_Init+0x14>
  }
}
 8001794:	bf00      	nop
 8001796:	372c      	adds	r7, #44	; 0x2c
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	10210000 	.word	0x10210000
 80017a4:	10110000 	.word	0x10110000
 80017a8:	10120000 	.word	0x10120000
 80017ac:	10310000 	.word	0x10310000
 80017b0:	10320000 	.word	0x10320000
 80017b4:	10220000 	.word	0x10220000
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40010000 	.word	0x40010000
 80017c0:	40010800 	.word	0x40010800
 80017c4:	40010c00 	.word	0x40010c00
 80017c8:	40011000 	.word	0x40011000
 80017cc:	40011400 	.word	0x40011400
 80017d0:	40010400 	.word	0x40010400

080017d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
 80017e0:	4613      	mov	r3, r2
 80017e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017e4:	787b      	ldrb	r3, [r7, #1]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ea:	887a      	ldrh	r2, [r7, #2]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017f0:	e003      	b.n	80017fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017f2:	887b      	ldrh	r3, [r7, #2]
 80017f4:	041a      	lsls	r2, r3, #16
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	611a      	str	r2, [r3, #16]
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	887b      	ldrh	r3, [r7, #2]
 8001816:	4013      	ands	r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800181c:	887a      	ldrh	r2, [r7, #2]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001822:	e002      	b.n	800182a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001824:	887a      	ldrh	r2, [r7, #2]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	611a      	str	r2, [r3, #16]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e10f      	b.n	8001a66 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d106      	bne.n	8001860 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f004 f9a0 	bl	8005ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2224      	movs	r2, #36	; 0x24
 8001864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0201 	bic.w	r2, r2, #1
 8001876:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001878:	f001 fb40 	bl	8002efc <HAL_RCC_GetPCLK1Freq>
 800187c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4a7b      	ldr	r2, [pc, #492]	; (8001a70 <HAL_I2C_Init+0x23c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d807      	bhi.n	8001898 <HAL_I2C_Init+0x64>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4a7a      	ldr	r2, [pc, #488]	; (8001a74 <HAL_I2C_Init+0x240>)
 800188c:	4293      	cmp	r3, r2
 800188e:	bf94      	ite	ls
 8001890:	2301      	movls	r3, #1
 8001892:	2300      	movhi	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	e006      	b.n	80018a6 <HAL_I2C_Init+0x72>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4a77      	ldr	r2, [pc, #476]	; (8001a78 <HAL_I2C_Init+0x244>)
 800189c:	4293      	cmp	r3, r2
 800189e:	bf94      	ite	ls
 80018a0:	2301      	movls	r3, #1
 80018a2:	2300      	movhi	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0db      	b.n	8001a66 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4a72      	ldr	r2, [pc, #456]	; (8001a7c <HAL_I2C_Init+0x248>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	0c9b      	lsrs	r3, r3, #18
 80018b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	4a64      	ldr	r2, [pc, #400]	; (8001a70 <HAL_I2C_Init+0x23c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d802      	bhi.n	80018e8 <HAL_I2C_Init+0xb4>
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	3301      	adds	r3, #1
 80018e6:	e009      	b.n	80018fc <HAL_I2C_Init+0xc8>
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018ee:	fb02 f303 	mul.w	r3, r2, r3
 80018f2:	4a63      	ldr	r2, [pc, #396]	; (8001a80 <HAL_I2C_Init+0x24c>)
 80018f4:	fba2 2303 	umull	r2, r3, r2, r3
 80018f8:	099b      	lsrs	r3, r3, #6
 80018fa:	3301      	adds	r3, #1
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	430b      	orrs	r3, r1
 8001902:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800190e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4956      	ldr	r1, [pc, #344]	; (8001a70 <HAL_I2C_Init+0x23c>)
 8001918:	428b      	cmp	r3, r1
 800191a:	d80d      	bhi.n	8001938 <HAL_I2C_Init+0x104>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	1e59      	subs	r1, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fbb1 f3f3 	udiv	r3, r1, r3
 800192a:	3301      	adds	r3, #1
 800192c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001930:	2b04      	cmp	r3, #4
 8001932:	bf38      	it	cc
 8001934:	2304      	movcc	r3, #4
 8001936:	e04f      	b.n	80019d8 <HAL_I2C_Init+0x1a4>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d111      	bne.n	8001964 <HAL_I2C_Init+0x130>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	1e58      	subs	r0, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6859      	ldr	r1, [r3, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	440b      	add	r3, r1
 800194e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001952:	3301      	adds	r3, #1
 8001954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001958:	2b00      	cmp	r3, #0
 800195a:	bf0c      	ite	eq
 800195c:	2301      	moveq	r3, #1
 800195e:	2300      	movne	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	e012      	b.n	800198a <HAL_I2C_Init+0x156>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	1e58      	subs	r0, r3, #1
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6859      	ldr	r1, [r3, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	0099      	lsls	r1, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	fbb0 f3f3 	udiv	r3, r0, r3
 800197a:	3301      	adds	r3, #1
 800197c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001980:	2b00      	cmp	r3, #0
 8001982:	bf0c      	ite	eq
 8001984:	2301      	moveq	r3, #1
 8001986:	2300      	movne	r3, #0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_I2C_Init+0x15e>
 800198e:	2301      	movs	r3, #1
 8001990:	e022      	b.n	80019d8 <HAL_I2C_Init+0x1a4>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10e      	bne.n	80019b8 <HAL_I2C_Init+0x184>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1e58      	subs	r0, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6859      	ldr	r1, [r3, #4]
 80019a2:	460b      	mov	r3, r1
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	440b      	add	r3, r1
 80019a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ac:	3301      	adds	r3, #1
 80019ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b6:	e00f      	b.n	80019d8 <HAL_I2C_Init+0x1a4>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	1e58      	subs	r0, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6859      	ldr	r1, [r3, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	0099      	lsls	r1, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ce:	3301      	adds	r3, #1
 80019d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	6809      	ldr	r1, [r1, #0]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69da      	ldr	r2, [r3, #28]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6911      	ldr	r1, [r2, #16]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68d2      	ldr	r2, [r2, #12]
 8001a12:	4311      	orrs	r1, r2
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695a      	ldr	r2, [r3, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2220      	movs	r2, #32
 8001a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	000186a0 	.word	0x000186a0
 8001a74:	001e847f 	.word	0x001e847f
 8001a78:	003d08ff 	.word	0x003d08ff
 8001a7c:	431bde83 	.word	0x431bde83
 8001a80:	10624dd3 	.word	0x10624dd3

08001a84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af02      	add	r7, sp, #8
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	4608      	mov	r0, r1
 8001a8e:	4611      	mov	r1, r2
 8001a90:	461a      	mov	r2, r3
 8001a92:	4603      	mov	r3, r0
 8001a94:	817b      	strh	r3, [r7, #10]
 8001a96:	460b      	mov	r3, r1
 8001a98:	813b      	strh	r3, [r7, #8]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a9e:	f7ff fb8f 	bl	80011c0 <HAL_GetTick>
 8001aa2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b20      	cmp	r3, #32
 8001aae:	f040 80d9 	bne.w	8001c64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2319      	movs	r3, #25
 8001ab8:	2201      	movs	r2, #1
 8001aba:	496d      	ldr	r1, [pc, #436]	; (8001c70 <HAL_I2C_Mem_Write+0x1ec>)
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f000 fc6b 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e0cc      	b.n	8001c66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_I2C_Mem_Write+0x56>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e0c5      	b.n	8001c66 <HAL_I2C_Mem_Write+0x1e2>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d007      	beq.n	8001b00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2221      	movs	r2, #33	; 0x21
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2240      	movs	r2, #64	; 0x40
 8001b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6a3a      	ldr	r2, [r7, #32]
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4a4d      	ldr	r2, [pc, #308]	; (8001c74 <HAL_I2C_Mem_Write+0x1f0>)
 8001b40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b42:	88f8      	ldrh	r0, [r7, #6]
 8001b44:	893a      	ldrh	r2, [r7, #8]
 8001b46:	8979      	ldrh	r1, [r7, #10]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	4603      	mov	r3, r0
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 fac6 	bl	80020e4 <I2C_RequestMemoryWrite>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d052      	beq.n	8001c04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e081      	b.n	8001c66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f000 fcec 	bl	8002544 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00d      	beq.n	8001b8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d107      	bne.n	8001b8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e06b      	b.n	8001c66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	781a      	ldrb	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d11b      	bne.n	8001c04 <HAL_I2C_Mem_Write+0x180>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d017      	beq.n	8001c04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	781a      	ldrb	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1aa      	bne.n	8001b62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 fcd8 	bl	80025c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00d      	beq.n	8001c38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d107      	bne.n	8001c34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e016      	b.n	8001c66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	e000      	b.n	8001c66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c64:	2302      	movs	r3, #2
  }
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	00100002 	.word	0x00100002
 8001c74:	ffff0000 	.word	0xffff0000

08001c78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08c      	sub	sp, #48	; 0x30
 8001c7c:	af02      	add	r7, sp, #8
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	4608      	mov	r0, r1
 8001c82:	4611      	mov	r1, r2
 8001c84:	461a      	mov	r2, r3
 8001c86:	4603      	mov	r3, r0
 8001c88:	817b      	strh	r3, [r7, #10]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	813b      	strh	r3, [r7, #8]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c92:	f7ff fa95 	bl	80011c0 <HAL_GetTick>
 8001c96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b20      	cmp	r3, #32
 8001ca2:	f040 8218 	bne.w	80020d6 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2319      	movs	r3, #25
 8001cac:	2201      	movs	r2, #1
 8001cae:	4981      	ldr	r1, [pc, #516]	; (8001eb4 <HAL_I2C_Mem_Read+0x23c>)
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 fb71 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e20b      	b.n	80020d8 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_I2C_Mem_Read+0x56>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e204      	b.n	80020d8 <HAL_I2C_Mem_Read+0x460>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d007      	beq.n	8001cf4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2222      	movs	r2, #34	; 0x22
 8001d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2240      	movs	r2, #64	; 0x40
 8001d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4a61      	ldr	r2, [pc, #388]	; (8001eb8 <HAL_I2C_Mem_Read+0x240>)
 8001d34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d36:	88f8      	ldrh	r0, [r7, #6]
 8001d38:	893a      	ldrh	r2, [r7, #8]
 8001d3a:	8979      	ldrh	r1, [r7, #10]
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	4603      	mov	r3, r0
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 fa56 	bl	80021f8 <I2C_RequestMemoryRead>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e1c0      	b.n	80020d8 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d113      	bne.n	8001d86 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d5e:	2300      	movs	r3, #0
 8001d60:	623b      	str	r3, [r7, #32]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	623b      	str	r3, [r7, #32]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	623b      	str	r3, [r7, #32]
 8001d72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	e194      	b.n	80020b0 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d11d      	bne.n	8001dca <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d9c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d9e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	61fb      	str	r3, [r7, #28]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	61fb      	str	r3, [r7, #28]
 8001db4:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001dc6:	b662      	cpsie	i
 8001dc8:	e172      	b.n	80020b0 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d11d      	bne.n	8001e0e <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001de0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001de2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001de4:	2300      	movs	r3, #0
 8001de6:	61bb      	str	r3, [r7, #24]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	61bb      	str	r3, [r7, #24]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e0a:	b662      	cpsie	i
 8001e0c:	e150      	b.n	80020b0 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e1c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001e34:	e13c      	b.n	80020b0 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	f200 80f5 	bhi.w	800202a <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d123      	bne.n	8001e90 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f000 fbfb 	bl	8002648 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e13d      	b.n	80020d8 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691a      	ldr	r2, [r3, #16]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e8e:	e10f      	b.n	80020b0 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d150      	bne.n	8001f3a <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	4906      	ldr	r1, [pc, #24]	; (8001ebc <HAL_I2C_Mem_Read+0x244>)
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 fa78 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d008      	beq.n	8001ec0 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e112      	b.n	80020d8 <HAL_I2C_Mem_Read+0x460>
 8001eb2:	bf00      	nop
 8001eb4:	00100002 	.word	0x00100002
 8001eb8:	ffff0000 	.word	0xffff0000
 8001ebc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f04:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f22:	3b01      	subs	r3, #1
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f38:	e0ba      	b.n	80020b0 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f40:	2200      	movs	r2, #0
 8001f42:	4967      	ldr	r1, [pc, #412]	; (80020e0 <HAL_I2C_Mem_Read+0x468>)
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f000 fa27 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0c1      	b.n	80020d8 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f64:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	494f      	ldr	r1, [pc, #316]	; (80020e0 <HAL_I2C_Mem_Read+0x468>)
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 f9f8 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e092      	b.n	80020d8 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ff4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201e:	b29b      	uxth	r3, r3
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002028:	e042      	b.n	80020b0 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800202a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800202c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 fb0a 	bl	8002648 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e04c      	b.n	80020d8 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205a:	3b01      	subs	r3, #1
 800205c:	b29a      	uxth	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002066:	b29b      	uxth	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	2b04      	cmp	r3, #4
 800207c:	d118      	bne.n	80020b0 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f47f aebe 	bne.w	8001e36 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2220      	movs	r2, #32
 80020be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e000      	b.n	80020d8 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 80020d6:	2302      	movs	r3, #2
  }
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3728      	adds	r7, #40	; 0x28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	00010004 	.word	0x00010004

080020e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4603      	mov	r3, r0
 80020f4:	817b      	strh	r3, [r7, #10]
 80020f6:	460b      	mov	r3, r1
 80020f8:	813b      	strh	r3, [r7, #8]
 80020fa:	4613      	mov	r3, r2
 80020fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800210c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	2200      	movs	r2, #0
 8002116:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f93c 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e05f      	b.n	80021ea <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800212a:	897b      	ldrh	r3, [r7, #10]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002138:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	6a3a      	ldr	r2, [r7, #32]
 800213e:	492d      	ldr	r1, [pc, #180]	; (80021f4 <I2C_RequestMemoryWrite+0x110>)
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 f980 	bl	8002446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e04c      	b.n	80021ea <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002168:	6a39      	ldr	r1, [r7, #32]
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 f9ea 	bl	8002544 <I2C_WaitOnTXEFlagUntilTimeout>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00d      	beq.n	8002192 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2b04      	cmp	r3, #4
 800217c:	d107      	bne.n	800218e <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e02b      	b.n	80021ea <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d105      	bne.n	80021a4 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002198:	893b      	ldrh	r3, [r7, #8]
 800219a:	b2da      	uxtb	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	611a      	str	r2, [r3, #16]
 80021a2:	e021      	b.n	80021e8 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021a4:	893b      	ldrh	r3, [r7, #8]
 80021a6:	0a1b      	lsrs	r3, r3, #8
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b4:	6a39      	ldr	r1, [r7, #32]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f9c4 	bl	8002544 <I2C_WaitOnTXEFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00d      	beq.n	80021de <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d107      	bne.n	80021da <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e005      	b.n	80021ea <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021de:	893b      	ldrh	r3, [r7, #8]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	00010002 	.word	0x00010002

080021f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	4608      	mov	r0, r1
 8002202:	4611      	mov	r1, r2
 8002204:	461a      	mov	r2, r3
 8002206:	4603      	mov	r3, r0
 8002208:	817b      	strh	r3, [r7, #10]
 800220a:	460b      	mov	r3, r1
 800220c:	813b      	strh	r3, [r7, #8]
 800220e:	4613      	mov	r3, r2
 8002210:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002220:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002230:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	2200      	movs	r2, #0
 800223a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f8aa 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e09e      	b.n	800238c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800224e:	897b      	ldrh	r3, [r7, #10]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800225c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	6a3a      	ldr	r2, [r7, #32]
 8002262:	494c      	ldr	r1, [pc, #304]	; (8002394 <I2C_RequestMemoryRead+0x19c>)
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 f8ee 	bl	8002446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e08b      	b.n	800238c <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800228a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228c:	6a39      	ldr	r1, [r7, #32]
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 f958 	bl	8002544 <I2C_WaitOnTXEFlagUntilTimeout>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00d      	beq.n	80022b6 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d107      	bne.n	80022b2 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e06a      	b.n	800238c <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d105      	bne.n	80022c8 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022bc:	893b      	ldrh	r3, [r7, #8]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	611a      	str	r2, [r3, #16]
 80022c6:	e021      	b.n	800230c <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022c8:	893b      	ldrh	r3, [r7, #8]
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d8:	6a39      	ldr	r1, [r7, #32]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f932 	bl	8002544 <I2C_WaitOnTXEFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00d      	beq.n	8002302 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d107      	bne.n	80022fe <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e044      	b.n	800238c <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002302:	893b      	ldrh	r3, [r7, #8]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800230c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800230e:	6a39      	ldr	r1, [r7, #32]
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 f917 	bl	8002544 <I2C_WaitOnTXEFlagUntilTimeout>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00d      	beq.n	8002338 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	2b04      	cmp	r3, #4
 8002322:	d107      	bne.n	8002334 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002332:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e029      	b.n	800238c <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002346:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	2200      	movs	r2, #0
 8002350:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f81f 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e013      	b.n	800238c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002364:	897b      	ldrh	r3, [r7, #10]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	b2da      	uxtb	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	6a3a      	ldr	r2, [r7, #32]
 8002378:	4906      	ldr	r1, [pc, #24]	; (8002394 <I2C_RequestMemoryRead+0x19c>)
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f863 	bl	8002446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	00010002 	.word	0x00010002

08002398 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	4613      	mov	r3, r2
 80023a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023a8:	e025      	b.n	80023f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b0:	d021      	beq.n	80023f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b2:	f7fe ff05 	bl	80011c0 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d302      	bcc.n	80023c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d116      	bne.n	80023f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2220      	movs	r2, #32
 80023d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f043 0220 	orr.w	r2, r3, #32
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e023      	b.n	800243e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	0c1b      	lsrs	r3, r3, #16
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d10d      	bne.n	800241c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	43da      	mvns	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4013      	ands	r3, r2
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	bf0c      	ite	eq
 8002412:	2301      	moveq	r3, #1
 8002414:	2300      	movne	r3, #0
 8002416:	b2db      	uxtb	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	e00c      	b.n	8002436 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	43da      	mvns	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4013      	ands	r3, r2
 8002428:	b29b      	uxth	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	bf0c      	ite	eq
 800242e:	2301      	moveq	r3, #1
 8002430:	2300      	movne	r3, #0
 8002432:	b2db      	uxtb	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	429a      	cmp	r2, r3
 800243a:	d0b6      	beq.n	80023aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b084      	sub	sp, #16
 800244a:	af00      	add	r7, sp, #0
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002454:	e051      	b.n	80024fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002464:	d123      	bne.n	80024ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002474:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800247e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f043 0204 	orr.w	r2, r3, #4
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e046      	b.n	800253c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b4:	d021      	beq.n	80024fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024b6:	f7fe fe83 	bl	80011c0 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d302      	bcc.n	80024cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d116      	bne.n	80024fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2220      	movs	r2, #32
 80024d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f043 0220 	orr.w	r2, r3, #32
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e020      	b.n	800253c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b01      	cmp	r3, #1
 8002502:	d10c      	bne.n	800251e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	43da      	mvns	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	4013      	ands	r3, r2
 8002510:	b29b      	uxth	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	bf14      	ite	ne
 8002516:	2301      	movne	r3, #1
 8002518:	2300      	moveq	r3, #0
 800251a:	b2db      	uxtb	r3, r3
 800251c:	e00b      	b.n	8002536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	43da      	mvns	r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	4013      	ands	r3, r2
 800252a:	b29b      	uxth	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	bf14      	ite	ne
 8002530:	2301      	movne	r3, #1
 8002532:	2300      	moveq	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d18d      	bne.n	8002456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002550:	e02d      	b.n	80025ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f8ce 	bl	80026f4 <I2C_IsAcknowledgeFailed>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e02d      	b.n	80025be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002568:	d021      	beq.n	80025ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800256a:	f7fe fe29 	bl	80011c0 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	68ba      	ldr	r2, [r7, #8]
 8002576:	429a      	cmp	r2, r3
 8002578:	d302      	bcc.n	8002580 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d116      	bne.n	80025ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2220      	movs	r2, #32
 800258a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f043 0220 	orr.w	r2, r3, #32
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e007      	b.n	80025be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b8:	2b80      	cmp	r3, #128	; 0x80
 80025ba:	d1ca      	bne.n	8002552 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025d2:	e02d      	b.n	8002630 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 f88d 	bl	80026f4 <I2C_IsAcknowledgeFailed>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e02d      	b.n	8002640 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ea:	d021      	beq.n	8002630 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ec:	f7fe fde8 	bl	80011c0 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d302      	bcc.n	8002602 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d116      	bne.n	8002630 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	f043 0220 	orr.w	r2, r3, #32
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e007      	b.n	8002640 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	2b04      	cmp	r3, #4
 800263c:	d1ca      	bne.n	80025d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002654:	e042      	b.n	80026dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	2b10      	cmp	r3, #16
 8002662:	d119      	bne.n	8002698 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0210 	mvn.w	r2, #16
 800266c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e029      	b.n	80026ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002698:	f7fe fd92 	bl	80011c0 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d302      	bcc.n	80026ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d116      	bne.n	80026dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	f043 0220 	orr.w	r2, r3, #32
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e007      	b.n	80026ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e6:	2b40      	cmp	r3, #64	; 0x40
 80026e8:	d1b5      	bne.n	8002656 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270a:	d11b      	bne.n	8002744 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002714:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	f043 0204 	orr.w	r2, r3, #4
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e000      	b.n	8002746 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e26c      	b.n	8002c3c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 8087 	beq.w	800287e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002770:	4b92      	ldr	r3, [pc, #584]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 030c 	and.w	r3, r3, #12
 8002778:	2b04      	cmp	r3, #4
 800277a:	d00c      	beq.n	8002796 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800277c:	4b8f      	ldr	r3, [pc, #572]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 030c 	and.w	r3, r3, #12
 8002784:	2b08      	cmp	r3, #8
 8002786:	d112      	bne.n	80027ae <HAL_RCC_OscConfig+0x5e>
 8002788:	4b8c      	ldr	r3, [pc, #560]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002794:	d10b      	bne.n	80027ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002796:	4b89      	ldr	r3, [pc, #548]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d06c      	beq.n	800287c <HAL_RCC_OscConfig+0x12c>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d168      	bne.n	800287c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e246      	b.n	8002c3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b6:	d106      	bne.n	80027c6 <HAL_RCC_OscConfig+0x76>
 80027b8:	4b80      	ldr	r3, [pc, #512]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a7f      	ldr	r2, [pc, #508]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	e02e      	b.n	8002824 <HAL_RCC_OscConfig+0xd4>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x98>
 80027ce:	4b7b      	ldr	r3, [pc, #492]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a7a      	ldr	r2, [pc, #488]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	4b78      	ldr	r3, [pc, #480]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a77      	ldr	r2, [pc, #476]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	e01d      	b.n	8002824 <HAL_RCC_OscConfig+0xd4>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027f0:	d10c      	bne.n	800280c <HAL_RCC_OscConfig+0xbc>
 80027f2:	4b72      	ldr	r3, [pc, #456]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a71      	ldr	r2, [pc, #452]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80027f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	4b6f      	ldr	r3, [pc, #444]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a6e      	ldr	r2, [pc, #440]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	e00b      	b.n	8002824 <HAL_RCC_OscConfig+0xd4>
 800280c:	4b6b      	ldr	r3, [pc, #428]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a6a      	ldr	r2, [pc, #424]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	4b68      	ldr	r3, [pc, #416]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a67      	ldr	r2, [pc, #412]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 800281e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002822:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d013      	beq.n	8002854 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7fe fcc8 	bl	80011c0 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002834:	f7fe fcc4 	bl	80011c0 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b64      	cmp	r3, #100	; 0x64
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e1fa      	b.n	8002c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002846:	4b5d      	ldr	r3, [pc, #372]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0xe4>
 8002852:	e014      	b.n	800287e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe fcb4 	bl	80011c0 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800285c:	f7fe fcb0 	bl	80011c0 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b64      	cmp	r3, #100	; 0x64
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e1e6      	b.n	8002c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286e:	4b53      	ldr	r3, [pc, #332]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x10c>
 800287a:	e000      	b.n	800287e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800287c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d063      	beq.n	8002952 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800288a:	4b4c      	ldr	r3, [pc, #304]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00b      	beq.n	80028ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002896:	4b49      	ldr	r3, [pc, #292]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 030c 	and.w	r3, r3, #12
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d11c      	bne.n	80028dc <HAL_RCC_OscConfig+0x18c>
 80028a2:	4b46      	ldr	r3, [pc, #280]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d116      	bne.n	80028dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ae:	4b43      	ldr	r3, [pc, #268]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d005      	beq.n	80028c6 <HAL_RCC_OscConfig+0x176>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d001      	beq.n	80028c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e1ba      	b.n	8002c3c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c6:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	4939      	ldr	r1, [pc, #228]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028da:	e03a      	b.n	8002952 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d020      	beq.n	8002926 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028e4:	4b36      	ldr	r3, [pc, #216]	; (80029c0 <HAL_RCC_OscConfig+0x270>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ea:	f7fe fc69 	bl	80011c0 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f2:	f7fe fc65 	bl	80011c0 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e19b      	b.n	8002c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002904:	4b2d      	ldr	r3, [pc, #180]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002910:	4b2a      	ldr	r3, [pc, #168]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4927      	ldr	r1, [pc, #156]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002920:	4313      	orrs	r3, r2
 8002922:	600b      	str	r3, [r1, #0]
 8002924:	e015      	b.n	8002952 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002926:	4b26      	ldr	r3, [pc, #152]	; (80029c0 <HAL_RCC_OscConfig+0x270>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7fe fc48 	bl	80011c0 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002934:	f7fe fc44 	bl	80011c0 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e17a      	b.n	8002c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002946:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d03a      	beq.n	80029d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d019      	beq.n	800299a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002966:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <HAL_RCC_OscConfig+0x274>)
 8002968:	2201      	movs	r2, #1
 800296a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296c:	f7fe fc28 	bl	80011c0 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002974:	f7fe fc24 	bl	80011c0 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e15a      	b.n	8002c3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002986:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <HAL_RCC_OscConfig+0x26c>)
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002992:	2001      	movs	r0, #1
 8002994:	f000 fada 	bl	8002f4c <RCC_Delay>
 8002998:	e01c      	b.n	80029d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800299a:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <HAL_RCC_OscConfig+0x274>)
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a0:	f7fe fc0e 	bl	80011c0 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a6:	e00f      	b.n	80029c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a8:	f7fe fc0a 	bl	80011c0 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d908      	bls.n	80029c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e140      	b.n	8002c3c <HAL_RCC_OscConfig+0x4ec>
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
 80029c0:	42420000 	.word	0x42420000
 80029c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c8:	4b9e      	ldr	r3, [pc, #632]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1e9      	bne.n	80029a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80a6 	beq.w	8002b2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e2:	2300      	movs	r3, #0
 80029e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e6:	4b97      	ldr	r3, [pc, #604]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10d      	bne.n	8002a0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f2:	4b94      	ldr	r3, [pc, #592]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	4a93      	ldr	r2, [pc, #588]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 80029f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029fc:	61d3      	str	r3, [r2, #28]
 80029fe:	4b91      	ldr	r3, [pc, #580]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0e:	4b8e      	ldr	r3, [pc, #568]	; (8002c48 <HAL_RCC_OscConfig+0x4f8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d118      	bne.n	8002a4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a1a:	4b8b      	ldr	r3, [pc, #556]	; (8002c48 <HAL_RCC_OscConfig+0x4f8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a8a      	ldr	r2, [pc, #552]	; (8002c48 <HAL_RCC_OscConfig+0x4f8>)
 8002a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a26:	f7fe fbcb 	bl	80011c0 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2e:	f7fe fbc7 	bl	80011c0 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b64      	cmp	r3, #100	; 0x64
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e0fd      	b.n	8002c3c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a40:	4b81      	ldr	r3, [pc, #516]	; (8002c48 <HAL_RCC_OscConfig+0x4f8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d106      	bne.n	8002a62 <HAL_RCC_OscConfig+0x312>
 8002a54:	4b7b      	ldr	r3, [pc, #492]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	4a7a      	ldr	r2, [pc, #488]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	6213      	str	r3, [r2, #32]
 8002a60:	e02d      	b.n	8002abe <HAL_RCC_OscConfig+0x36e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x334>
 8002a6a:	4b76      	ldr	r3, [pc, #472]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	4a75      	ldr	r2, [pc, #468]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002a70:	f023 0301 	bic.w	r3, r3, #1
 8002a74:	6213      	str	r3, [r2, #32]
 8002a76:	4b73      	ldr	r3, [pc, #460]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	4a72      	ldr	r2, [pc, #456]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002a7c:	f023 0304 	bic.w	r3, r3, #4
 8002a80:	6213      	str	r3, [r2, #32]
 8002a82:	e01c      	b.n	8002abe <HAL_RCC_OscConfig+0x36e>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	2b05      	cmp	r3, #5
 8002a8a:	d10c      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x356>
 8002a8c:	4b6d      	ldr	r3, [pc, #436]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	4a6c      	ldr	r2, [pc, #432]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002a92:	f043 0304 	orr.w	r3, r3, #4
 8002a96:	6213      	str	r3, [r2, #32]
 8002a98:	4b6a      	ldr	r3, [pc, #424]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	4a69      	ldr	r2, [pc, #420]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6213      	str	r3, [r2, #32]
 8002aa4:	e00b      	b.n	8002abe <HAL_RCC_OscConfig+0x36e>
 8002aa6:	4b67      	ldr	r3, [pc, #412]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	4a66      	ldr	r2, [pc, #408]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002aac:	f023 0301 	bic.w	r3, r3, #1
 8002ab0:	6213      	str	r3, [r2, #32]
 8002ab2:	4b64      	ldr	r3, [pc, #400]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	4a63      	ldr	r2, [pc, #396]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002ab8:	f023 0304 	bic.w	r3, r3, #4
 8002abc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d015      	beq.n	8002af2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac6:	f7fe fb7b 	bl	80011c0 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002acc:	e00a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ace:	f7fe fb77 	bl	80011c0 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e0ab      	b.n	8002c3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae4:	4b57      	ldr	r3, [pc, #348]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0ee      	beq.n	8002ace <HAL_RCC_OscConfig+0x37e>
 8002af0:	e014      	b.n	8002b1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af2:	f7fe fb65 	bl	80011c0 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af8:	e00a      	b.n	8002b10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afa:	f7fe fb61 	bl	80011c0 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e095      	b.n	8002c3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b10:	4b4c      	ldr	r3, [pc, #304]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1ee      	bne.n	8002afa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d105      	bne.n	8002b2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b22:	4b48      	ldr	r3, [pc, #288]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	4a47      	ldr	r2, [pc, #284]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8081 	beq.w	8002c3a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b38:	4b42      	ldr	r3, [pc, #264]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d061      	beq.n	8002c08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d146      	bne.n	8002bda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4c:	4b3f      	ldr	r3, [pc, #252]	; (8002c4c <HAL_RCC_OscConfig+0x4fc>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b52:	f7fe fb35 	bl	80011c0 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5a:	f7fe fb31 	bl	80011c0 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e067      	b.n	8002c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b6c:	4b35      	ldr	r3, [pc, #212]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f0      	bne.n	8002b5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b80:	d108      	bne.n	8002b94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b82:	4b30      	ldr	r3, [pc, #192]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	492d      	ldr	r1, [pc, #180]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b94:	4b2b      	ldr	r3, [pc, #172]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a19      	ldr	r1, [r3, #32]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	4927      	ldr	r1, [pc, #156]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bac:	4b27      	ldr	r3, [pc, #156]	; (8002c4c <HAL_RCC_OscConfig+0x4fc>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7fe fb05 	bl	80011c0 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bba:	f7fe fb01 	bl	80011c0 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e037      	b.n	8002c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x46a>
 8002bd8:	e02f      	b.n	8002c3a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bda:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <HAL_RCC_OscConfig+0x4fc>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fe faee 	bl	80011c0 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be8:	f7fe faea 	bl	80011c0 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e020      	b.n	8002c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bfa:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x498>
 8002c06:	e018      	b.n	8002c3a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e013      	b.n	8002c3c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_RCC_OscConfig+0x4f4>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d106      	bne.n	8002c36 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d001      	beq.n	8002c3a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40007000 	.word	0x40007000
 8002c4c:	42420060 	.word	0x42420060

08002c50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0d0      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c64:	4b6a      	ldr	r3, [pc, #424]	; (8002e10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d910      	bls.n	8002c94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c72:	4b67      	ldr	r3, [pc, #412]	; (8002e10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 0207 	bic.w	r2, r3, #7
 8002c7a:	4965      	ldr	r1, [pc, #404]	; (8002e10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c82:	4b63      	ldr	r3, [pc, #396]	; (8002e10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0b8      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d020      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cac:	4b59      	ldr	r3, [pc, #356]	; (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	4a58      	ldr	r2, [pc, #352]	; (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc4:	4b53      	ldr	r3, [pc, #332]	; (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	4a52      	ldr	r2, [pc, #328]	; (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd0:	4b50      	ldr	r3, [pc, #320]	; (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	494d      	ldr	r1, [pc, #308]	; (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d040      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d107      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf6:	4b47      	ldr	r3, [pc, #284]	; (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d115      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e07f      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d107      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0e:	4b41      	ldr	r3, [pc, #260]	; (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e073      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1e:	4b3d      	ldr	r3, [pc, #244]	; (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e06b      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d2e:	4b39      	ldr	r3, [pc, #228]	; (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f023 0203 	bic.w	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4936      	ldr	r1, [pc, #216]	; (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d40:	f7fe fa3e 	bl	80011c0 <HAL_GetTick>
 8002d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d46:	e00a      	b.n	8002d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d48:	f7fe fa3a 	bl	80011c0 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e053      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5e:	4b2d      	ldr	r3, [pc, #180]	; (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 020c 	and.w	r2, r3, #12
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d1eb      	bne.n	8002d48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d70:	4b27      	ldr	r3, [pc, #156]	; (8002e10 <HAL_RCC_ClockConfig+0x1c0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d210      	bcs.n	8002da0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b24      	ldr	r3, [pc, #144]	; (8002e10 <HAL_RCC_ClockConfig+0x1c0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 0207 	bic.w	r2, r3, #7
 8002d86:	4922      	ldr	r1, [pc, #136]	; (8002e10 <HAL_RCC_ClockConfig+0x1c0>)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b20      	ldr	r3, [pc, #128]	; (8002e10 <HAL_RCC_ClockConfig+0x1c0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e032      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dac:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	4916      	ldr	r1, [pc, #88]	; (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d009      	beq.n	8002dde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dca:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	490e      	ldr	r1, [pc, #56]	; (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dde:	f000 f821 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8002de2:	4601      	mov	r1, r0
 8002de4:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <HAL_RCC_ClockConfig+0x1c8>)
 8002df0:	5cd3      	ldrb	r3, [r2, r3]
 8002df2:	fa21 f303 	lsr.w	r3, r1, r3
 8002df6:	4a09      	ldr	r2, [pc, #36]	; (8002e1c <HAL_RCC_ClockConfig+0x1cc>)
 8002df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dfa:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <HAL_RCC_ClockConfig+0x1d0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe f99c 	bl	800113c <HAL_InitTick>

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40022000 	.word	0x40022000
 8002e14:	40021000 	.word	0x40021000
 8002e18:	080091f4 	.word	0x080091f4
 8002e1c:	20000008 	.word	0x20000008
 8002e20:	20000000 	.word	0x20000000

08002e24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e24:	b490      	push	{r4, r7}
 8002e26:	b08a      	sub	sp, #40	; 0x28
 8002e28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e2a:	4b2a      	ldr	r3, [pc, #168]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e2c:	1d3c      	adds	r4, r7, #4
 8002e2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e34:	4b28      	ldr	r3, [pc, #160]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	2300      	movs	r3, #0
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e4e:	4b23      	ldr	r3, [pc, #140]	; (8002edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d002      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x40>
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d003      	beq.n	8002e6a <HAL_RCC_GetSysClockFreq+0x46>
 8002e62:	e02d      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e64:	4b1e      	ldr	r3, [pc, #120]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e66:	623b      	str	r3, [r7, #32]
      break;
 8002e68:	e02d      	b.n	8002ec6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	0c9b      	lsrs	r3, r3, #18
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e76:	4413      	add	r3, r2
 8002e78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e7c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d013      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e88:	4b14      	ldr	r3, [pc, #80]	; (8002edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	0c5b      	lsrs	r3, r3, #17
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e96:	4413      	add	r3, r2
 8002e98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	4a0f      	ldr	r2, [pc, #60]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ea2:	fb02 f203 	mul.w	r2, r2, r3
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
 8002eae:	e004      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	4a0c      	ldr	r2, [pc, #48]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002eb4:	fb02 f303 	mul.w	r3, r2, r3
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	623b      	str	r3, [r7, #32]
      break;
 8002ebe:	e002      	b.n	8002ec6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ec0:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ec2:	623b      	str	r3, [r7, #32]
      break;
 8002ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3728      	adds	r7, #40	; 0x28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc90      	pop	{r4, r7}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	080091e0 	.word	0x080091e0
 8002ed8:	080091f0 	.word	0x080091f0
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	007a1200 	.word	0x007a1200
 8002ee4:	003d0900 	.word	0x003d0900

08002ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eec:	4b02      	ldr	r3, [pc, #8]	; (8002ef8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002eee:	681b      	ldr	r3, [r3, #0]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	20000008 	.word	0x20000008

08002efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f00:	f7ff fff2 	bl	8002ee8 <HAL_RCC_GetHCLKFreq>
 8002f04:	4601      	mov	r1, r0
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	0a1b      	lsrs	r3, r3, #8
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	4a03      	ldr	r2, [pc, #12]	; (8002f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f12:	5cd3      	ldrb	r3, [r2, r3]
 8002f14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	08009204 	.word	0x08009204

08002f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f28:	f7ff ffde 	bl	8002ee8 <HAL_RCC_GetHCLKFreq>
 8002f2c:	4601      	mov	r1, r0
 8002f2e:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	0adb      	lsrs	r3, r3, #11
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	4a03      	ldr	r2, [pc, #12]	; (8002f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f3a:	5cd3      	ldrb	r3, [r2, r3]
 8002f3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40021000 	.word	0x40021000
 8002f48:	08009204 	.word	0x08009204

08002f4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f54:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <RCC_Delay+0x34>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a0a      	ldr	r2, [pc, #40]	; (8002f84 <RCC_Delay+0x38>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	0a5b      	lsrs	r3, r3, #9
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	fb02 f303 	mul.w	r3, r2, r3
 8002f66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f68:	bf00      	nop
  }
  while (Delay --);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1e5a      	subs	r2, r3, #1
 8002f6e:	60fa      	str	r2, [r7, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f9      	bne.n	8002f68 <RCC_Delay+0x1c>
}
 8002f74:	bf00      	nop
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	20000008 	.word	0x20000008
 8002f84:	10624dd3 	.word	0x10624dd3

08002f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e01d      	b.n	8002fd6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f002 fe34 	bl	8005c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	f000 fb44 	bl	8003654 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b085      	sub	sp, #20
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0201 	orr.w	r2, r2, #1
 8002ff4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b06      	cmp	r3, #6
 8003006:	d007      	beq.n	8003018 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e01d      	b.n	8003072 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d106      	bne.n	8003050 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f815 	bl	800307a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3304      	adds	r3, #4
 8003060:	4619      	mov	r1, r3
 8003062:	4610      	mov	r0, r2
 8003064:	f000 faf6 	bl	8003654 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2201      	movs	r2, #1
 800309c:	6839      	ldr	r1, [r7, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fd58 	bl	8003b54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a10      	ldr	r2, [pc, #64]	; (80030ec <HAL_TIM_PWM_Start+0x60>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d107      	bne.n	80030be <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b06      	cmp	r3, #6
 80030ce:	d007      	beq.n	80030e0 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40012c00 	.word	0x40012c00

080030f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b02      	cmp	r3, #2
 8003104:	d122      	bne.n	800314c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b02      	cmp	r3, #2
 8003112:	d11b      	bne.n	800314c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0202 	mvn.w	r2, #2
 800311c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 fa73 	bl	800361e <HAL_TIM_IC_CaptureCallback>
 8003138:	e005      	b.n	8003146 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 fa66 	bl	800360c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fa75 	bl	8003630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b04      	cmp	r3, #4
 8003158:	d122      	bne.n	80031a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b04      	cmp	r3, #4
 8003166:	d11b      	bne.n	80031a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0204 	mvn.w	r2, #4
 8003170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2202      	movs	r2, #2
 8003176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fa49 	bl	800361e <HAL_TIM_IC_CaptureCallback>
 800318c:	e005      	b.n	800319a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fa3c 	bl	800360c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fa4b 	bl	8003630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d122      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d11b      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0208 	mvn.w	r2, #8
 80031c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2204      	movs	r2, #4
 80031ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fa1f 	bl	800361e <HAL_TIM_IC_CaptureCallback>
 80031e0:	e005      	b.n	80031ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fa12 	bl	800360c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fa21 	bl	8003630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	2b10      	cmp	r3, #16
 8003200:	d122      	bne.n	8003248 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	2b10      	cmp	r3, #16
 800320e:	d11b      	bne.n	8003248 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0210 	mvn.w	r2, #16
 8003218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2208      	movs	r2, #8
 800321e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f9f5 	bl	800361e <HAL_TIM_IC_CaptureCallback>
 8003234:	e005      	b.n	8003242 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f9e8 	bl	800360c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f9f7 	bl	8003630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b01      	cmp	r3, #1
 8003254:	d10e      	bne.n	8003274 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b01      	cmp	r3, #1
 8003262:	d107      	bne.n	8003274 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f06f 0201 	mvn.w	r2, #1
 800326c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f9c3 	bl	80035fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327e:	2b80      	cmp	r3, #128	; 0x80
 8003280:	d10e      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328c:	2b80      	cmp	r3, #128	; 0x80
 800328e:	d107      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fccb 	bl	8003c36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032aa:	2b40      	cmp	r3, #64	; 0x40
 80032ac:	d10e      	bne.n	80032cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b8:	2b40      	cmp	r3, #64	; 0x40
 80032ba:	d107      	bne.n	80032cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f9bb 	bl	8003642 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f003 0320 	and.w	r3, r3, #32
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d10e      	bne.n	80032f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d107      	bne.n	80032f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0220 	mvn.w	r2, #32
 80032f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fc96 	bl	8003c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003316:	2302      	movs	r3, #2
 8003318:	e0b4      	b.n	8003484 <HAL_TIM_PWM_ConfigChannel+0x184>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2202      	movs	r2, #2
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b0c      	cmp	r3, #12
 800332e:	f200 809f 	bhi.w	8003470 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003332:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003338:	0800336d 	.word	0x0800336d
 800333c:	08003471 	.word	0x08003471
 8003340:	08003471 	.word	0x08003471
 8003344:	08003471 	.word	0x08003471
 8003348:	080033ad 	.word	0x080033ad
 800334c:	08003471 	.word	0x08003471
 8003350:	08003471 	.word	0x08003471
 8003354:	08003471 	.word	0x08003471
 8003358:	080033ef 	.word	0x080033ef
 800335c:	08003471 	.word	0x08003471
 8003360:	08003471 	.word	0x08003471
 8003364:	08003471 	.word	0x08003471
 8003368:	0800342f 	.word	0x0800342f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f9d0 	bl	8003718 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0208 	orr.w	r2, r2, #8
 8003386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	699a      	ldr	r2, [r3, #24]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0204 	bic.w	r2, r2, #4
 8003396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6999      	ldr	r1, [r3, #24]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	691a      	ldr	r2, [r3, #16]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	619a      	str	r2, [r3, #24]
      break;
 80033aa:	e062      	b.n	8003472 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fa16 	bl	80037e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699a      	ldr	r2, [r3, #24]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6999      	ldr	r1, [r3, #24]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	021a      	lsls	r2, r3, #8
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	619a      	str	r2, [r3, #24]
      break;
 80033ec:	e041      	b.n	8003472 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 fa5f 	bl	80038b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 0208 	orr.w	r2, r2, #8
 8003408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	69da      	ldr	r2, [r3, #28]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0204 	bic.w	r2, r2, #4
 8003418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69d9      	ldr	r1, [r3, #28]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	61da      	str	r2, [r3, #28]
      break;
 800342c:	e021      	b.n	8003472 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	4618      	mov	r0, r3
 8003436:	f000 faa9 	bl	800398c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69da      	ldr	r2, [r3, #28]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	69da      	ldr	r2, [r3, #28]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	69d9      	ldr	r1, [r3, #28]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	021a      	lsls	r2, r3, #8
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	61da      	str	r2, [r3, #28]
      break;
 800346e:	e000      	b.n	8003472 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003470:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_TIM_ConfigClockSource+0x18>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e0a6      	b.n	80035f2 <HAL_TIM_ConfigClockSource+0x166>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b40      	cmp	r3, #64	; 0x40
 80034da:	d067      	beq.n	80035ac <HAL_TIM_ConfigClockSource+0x120>
 80034dc:	2b40      	cmp	r3, #64	; 0x40
 80034de:	d80b      	bhi.n	80034f8 <HAL_TIM_ConfigClockSource+0x6c>
 80034e0:	2b10      	cmp	r3, #16
 80034e2:	d073      	beq.n	80035cc <HAL_TIM_ConfigClockSource+0x140>
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	d802      	bhi.n	80034ee <HAL_TIM_ConfigClockSource+0x62>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d06f      	beq.n	80035cc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80034ec:	e078      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80034ee:	2b20      	cmp	r3, #32
 80034f0:	d06c      	beq.n	80035cc <HAL_TIM_ConfigClockSource+0x140>
 80034f2:	2b30      	cmp	r3, #48	; 0x30
 80034f4:	d06a      	beq.n	80035cc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80034f6:	e073      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80034f8:	2b70      	cmp	r3, #112	; 0x70
 80034fa:	d00d      	beq.n	8003518 <HAL_TIM_ConfigClockSource+0x8c>
 80034fc:	2b70      	cmp	r3, #112	; 0x70
 80034fe:	d804      	bhi.n	800350a <HAL_TIM_ConfigClockSource+0x7e>
 8003500:	2b50      	cmp	r3, #80	; 0x50
 8003502:	d033      	beq.n	800356c <HAL_TIM_ConfigClockSource+0xe0>
 8003504:	2b60      	cmp	r3, #96	; 0x60
 8003506:	d041      	beq.n	800358c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003508:	e06a      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800350a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800350e:	d066      	beq.n	80035de <HAL_TIM_ConfigClockSource+0x152>
 8003510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003514:	d017      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003516:	e063      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	6899      	ldr	r1, [r3, #8]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f000 faf5 	bl	8003b16 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800353a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	609a      	str	r2, [r3, #8]
      break;
 8003544:	e04c      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	6899      	ldr	r1, [r3, #8]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f000 fade 	bl	8003b16 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003568:	609a      	str	r2, [r3, #8]
      break;
 800356a:	e039      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6818      	ldr	r0, [r3, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	6859      	ldr	r1, [r3, #4]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	461a      	mov	r2, r3
 800357a:	f000 fa55 	bl	8003a28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2150      	movs	r1, #80	; 0x50
 8003584:	4618      	mov	r0, r3
 8003586:	f000 faac 	bl	8003ae2 <TIM_ITRx_SetConfig>
      break;
 800358a:	e029      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	6859      	ldr	r1, [r3, #4]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	461a      	mov	r2, r3
 800359a:	f000 fa73 	bl	8003a84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2160      	movs	r1, #96	; 0x60
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fa9c 	bl	8003ae2 <TIM_ITRx_SetConfig>
      break;
 80035aa:	e019      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	6859      	ldr	r1, [r3, #4]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	461a      	mov	r2, r3
 80035ba:	f000 fa35 	bl	8003a28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2140      	movs	r1, #64	; 0x40
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fa8c 	bl	8003ae2 <TIM_ITRx_SetConfig>
      break;
 80035ca:	e009      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4619      	mov	r1, r3
 80035d6:	4610      	mov	r0, r2
 80035d8:	f000 fa83 	bl	8003ae2 <TIM_ITRx_SetConfig>
      break;
 80035dc:	e000      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80035de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr

0800360c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr

0800361e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr

08003630 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr

08003642 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr

08003654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a29      	ldr	r2, [pc, #164]	; (800370c <TIM_Base_SetConfig+0xb8>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00b      	beq.n	8003684 <TIM_Base_SetConfig+0x30>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003672:	d007      	beq.n	8003684 <TIM_Base_SetConfig+0x30>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a26      	ldr	r2, [pc, #152]	; (8003710 <TIM_Base_SetConfig+0xbc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d003      	beq.n	8003684 <TIM_Base_SetConfig+0x30>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a25      	ldr	r2, [pc, #148]	; (8003714 <TIM_Base_SetConfig+0xc0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d108      	bne.n	8003696 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800368a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a1c      	ldr	r2, [pc, #112]	; (800370c <TIM_Base_SetConfig+0xb8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00b      	beq.n	80036b6 <TIM_Base_SetConfig+0x62>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a4:	d007      	beq.n	80036b6 <TIM_Base_SetConfig+0x62>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a19      	ldr	r2, [pc, #100]	; (8003710 <TIM_Base_SetConfig+0xbc>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d003      	beq.n	80036b6 <TIM_Base_SetConfig+0x62>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a18      	ldr	r2, [pc, #96]	; (8003714 <TIM_Base_SetConfig+0xc0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d108      	bne.n	80036c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a07      	ldr	r2, [pc, #28]	; (800370c <TIM_Base_SetConfig+0xb8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d103      	bne.n	80036fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	615a      	str	r2, [r3, #20]
}
 8003702:	bf00      	nop
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	40012c00 	.word	0x40012c00
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800

08003718 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f023 0201 	bic.w	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0303 	bic.w	r3, r3, #3
 800374e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f023 0302 	bic.w	r3, r3, #2
 8003760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a1c      	ldr	r2, [pc, #112]	; (80037e0 <TIM_OC1_SetConfig+0xc8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d10c      	bne.n	800378e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f023 0308 	bic.w	r3, r3, #8
 800377a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f023 0304 	bic.w	r3, r3, #4
 800378c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a13      	ldr	r2, [pc, #76]	; (80037e0 <TIM_OC1_SetConfig+0xc8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d111      	bne.n	80037ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800379c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	621a      	str	r2, [r3, #32]
}
 80037d4:	bf00      	nop
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40012c00 	.word	0x40012c00

080037e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	f023 0210 	bic.w	r2, r3, #16
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f023 0320 	bic.w	r3, r3, #32
 800382e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a1d      	ldr	r2, [pc, #116]	; (80038b4 <TIM_OC2_SetConfig+0xd0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d10d      	bne.n	8003860 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800384a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800385e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a14      	ldr	r2, [pc, #80]	; (80038b4 <TIM_OC2_SetConfig+0xd0>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d113      	bne.n	8003890 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800386e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003876:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	621a      	str	r2, [r3, #32]
}
 80038aa:	bf00      	nop
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr
 80038b4:	40012c00 	.word	0x40012c00

080038b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0303 	bic.w	r3, r3, #3
 80038ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a1d      	ldr	r2, [pc, #116]	; (8003988 <TIM_OC3_SetConfig+0xd0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d10d      	bne.n	8003932 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800391c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	4313      	orrs	r3, r2
 8003928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a14      	ldr	r2, [pc, #80]	; (8003988 <TIM_OC3_SetConfig+0xd0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d113      	bne.n	8003962 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	621a      	str	r2, [r3, #32]
}
 800397c:	bf00      	nop
 800397e:	371c      	adds	r7, #28
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40012c00 	.word	0x40012c00

0800398c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	021b      	lsls	r3, r3, #8
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	031b      	lsls	r3, r3, #12
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a0f      	ldr	r2, [pc, #60]	; (8003a24 <TIM_OC4_SetConfig+0x98>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d109      	bne.n	8003a00 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	019b      	lsls	r3, r3, #6
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	621a      	str	r2, [r3, #32]
}
 8003a1a:	bf00      	nop
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr
 8003a24:	40012c00 	.word	0x40012c00

08003a28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f023 0201 	bic.w	r2, r3, #1
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f023 030a 	bic.w	r3, r3, #10
 8003a64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr

08003a84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	f023 0210 	bic.w	r2, r3, #16
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	031b      	lsls	r3, r3, #12
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ac0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	621a      	str	r2, [r3, #32]
}
 8003ad8:	bf00      	nop
 8003ada:	371c      	adds	r7, #28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr

08003ae2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b085      	sub	sp, #20
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
 8003aea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f043 0307 	orr.w	r3, r3, #7
 8003b04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	609a      	str	r2, [r3, #8]
}
 8003b0c:	bf00      	nop
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr

08003b16 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b087      	sub	sp, #28
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	607a      	str	r2, [r7, #4]
 8003b22:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b30:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	021a      	lsls	r2, r3, #8
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	609a      	str	r2, [r3, #8]
}
 8003b4a:	bf00      	nop
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr

08003b54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f003 031f 	and.w	r3, r3, #31
 8003b66:	2201      	movs	r2, #1
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a1a      	ldr	r2, [r3, #32]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	43db      	mvns	r3, r3
 8003b76:	401a      	ands	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a1a      	ldr	r2, [r3, #32]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f003 031f 	and.w	r3, r3, #31
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	621a      	str	r2, [r3, #32]
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e032      	b.n	8003c1a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bec:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr

08003c36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr

08003c48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e03f      	b.n	8003cda <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f002 f83c 	bl	8005cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2224      	movs	r2, #36	; 0x24
 8003c78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 fb95 	bl	80043bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b088      	sub	sp, #32
 8003ce6:	af02      	add	r7, sp, #8
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	603b      	str	r3, [r7, #0]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	f040 8083 	bne.w	8003e0a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <HAL_UART_Transmit+0x2e>
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e07b      	b.n	8003e0c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_UART_Transmit+0x40>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e074      	b.n	8003e0c <HAL_UART_Transmit+0x12a>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2221      	movs	r2, #33	; 0x21
 8003d34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003d38:	f7fd fa42 	bl	80011c0 <HAL_GetTick>
 8003d3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	88fa      	ldrh	r2, [r7, #6]
 8003d42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	88fa      	ldrh	r2, [r7, #6]
 8003d48:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d4a:	e042      	b.n	8003dd2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d62:	d122      	bne.n	8003daa <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2180      	movs	r1, #128	; 0x80
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f9bb 	bl	80040ea <UART_WaitOnFlagUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e046      	b.n	8003e0c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d90:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d103      	bne.n	8003da2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	3302      	adds	r3, #2
 8003d9e:	60bb      	str	r3, [r7, #8]
 8003da0:	e017      	b.n	8003dd2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	3301      	adds	r3, #1
 8003da6:	60bb      	str	r3, [r7, #8]
 8003da8:	e013      	b.n	8003dd2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2200      	movs	r2, #0
 8003db2:	2180      	movs	r1, #128	; 0x80
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 f998 	bl	80040ea <UART_WaitOnFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e023      	b.n	8003e0c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	60ba      	str	r2, [r7, #8]
 8003dca:	781a      	ldrb	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1b7      	bne.n	8003d4c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2200      	movs	r2, #0
 8003de4:	2140      	movs	r1, #64	; 0x40
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f97f 	bl	80040ea <UART_WaitOnFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e00a      	b.n	8003e0c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	e000      	b.n	8003e0c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003e0a:	2302      	movs	r3, #2
  }
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	d140      	bne.n	8003eb0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_UART_Receive_IT+0x26>
 8003e34:	88fb      	ldrh	r3, [r7, #6]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e039      	b.n	8003eb2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_UART_Receive_IT+0x38>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e032      	b.n	8003eb2 <HAL_UART_Receive_IT+0x9e>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	88fa      	ldrh	r2, [r7, #6]
 8003e5e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	88fa      	ldrh	r2, [r7, #6]
 8003e64:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2222      	movs	r2, #34	; 0x22
 8003e70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e8a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695a      	ldr	r2, [r3, #20]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0220 	orr.w	r2, r2, #32
 8003eaa:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	e000      	b.n	8003eb2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003eb0:	2302      	movs	r3, #2
  }
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr

08003ebc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10d      	bne.n	8003f0e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d008      	beq.n	8003f0e <HAL_UART_IRQHandler+0x52>
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f9d7 	bl	80042ba <UART_Receive_IT>
      return;
 8003f0c:	e0cc      	b.n	80040a8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 80ab 	beq.w	800406c <HAL_UART_IRQHandler+0x1b0>
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d105      	bne.n	8003f2c <HAL_UART_IRQHandler+0x70>
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 80a0 	beq.w	800406c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <HAL_UART_IRQHandler+0x90>
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f44:	f043 0201 	orr.w	r2, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <HAL_UART_IRQHandler+0xb0>
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d005      	beq.n	8003f6c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f64:	f043 0202 	orr.w	r2, r3, #2
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HAL_UART_IRQHandler+0xd0>
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f84:	f043 0204 	orr.w	r2, r3, #4
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <HAL_UART_IRQHandler+0xf0>
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa4:	f043 0208 	orr.w	r2, r3, #8
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d078      	beq.n	80040a6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d007      	beq.n	8003fce <HAL_UART_IRQHandler+0x112>
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f976 	bl	80042ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	bf14      	ite	ne
 8003fdc:	2301      	movne	r3, #1
 8003fde:	2300      	moveq	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d102      	bne.n	8003ff6 <HAL_UART_IRQHandler+0x13a>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d031      	beq.n	800405a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f8c1 	bl	800417e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004006:	2b00      	cmp	r3, #0
 8004008:	d023      	beq.n	8004052 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695a      	ldr	r2, [r3, #20]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004018:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401e:	2b00      	cmp	r3, #0
 8004020:	d013      	beq.n	800404a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004026:	4a22      	ldr	r2, [pc, #136]	; (80040b0 <HAL_UART_IRQHandler+0x1f4>)
 8004028:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402e:	4618      	mov	r0, r3
 8004030:	f7fd fa00 	bl	8001434 <HAL_DMA_Abort_IT>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d016      	beq.n	8004068 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004044:	4610      	mov	r0, r2
 8004046:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004048:	e00e      	b.n	8004068 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f844 	bl	80040d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004050:	e00a      	b.n	8004068 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f840 	bl	80040d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004058:	e006      	b.n	8004068 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f83c 	bl	80040d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004066:	e01e      	b.n	80040a6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004068:	bf00      	nop
    return;
 800406a:	e01c      	b.n	80040a6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004072:	2b00      	cmp	r3, #0
 8004074:	d008      	beq.n	8004088 <HAL_UART_IRQHandler+0x1cc>
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f8ad 	bl	80041e0 <UART_Transmit_IT>
    return;
 8004086:	e00f      	b.n	80040a8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <HAL_UART_IRQHandler+0x1ec>
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f8f4 	bl	800428a <UART_EndTransmit_IT>
    return;
 80040a2:	bf00      	nop
 80040a4:	e000      	b.n	80040a8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80040a6:	bf00      	nop
  }
}
 80040a8:	3720      	adds	r7, #32
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	080041b9 	.word	0x080041b9

080040b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr

080040c6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr

080040d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr

080040ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	603b      	str	r3, [r7, #0]
 80040f6:	4613      	mov	r3, r2
 80040f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040fa:	e02c      	b.n	8004156 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004102:	d028      	beq.n	8004156 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d007      	beq.n	800411a <UART_WaitOnFlagUntilTimeout+0x30>
 800410a:	f7fd f859 	bl	80011c0 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	429a      	cmp	r2, r3
 8004118:	d21d      	bcs.n	8004156 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004128:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695a      	ldr	r2, [r3, #20]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0201 	bic.w	r2, r2, #1
 8004138:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e00f      	b.n	8004176 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4013      	ands	r3, r2
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	429a      	cmp	r2, r3
 8004164:	bf0c      	ite	eq
 8004166:	2301      	moveq	r3, #1
 8004168:	2300      	movne	r3, #0
 800416a:	b2db      	uxtb	r3, r3
 800416c:	461a      	mov	r2, r3
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	429a      	cmp	r2, r3
 8004172:	d0c3      	beq.n	80040fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004194:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695a      	ldr	r2, [r3, #20]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0201 	bic.w	r2, r2, #1
 80041a4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f7ff ff80 	bl	80040d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041d8:	bf00      	nop
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b21      	cmp	r3, #33	; 0x21
 80041f2:	d144      	bne.n	800427e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fc:	d11a      	bne.n	8004234 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004212:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d105      	bne.n	8004228 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	1c9a      	adds	r2, r3, #2
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	621a      	str	r2, [r3, #32]
 8004226:	e00e      	b.n	8004246 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	621a      	str	r2, [r3, #32]
 8004232:	e008      	b.n	8004246 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	1c59      	adds	r1, r3, #1
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6211      	str	r1, [r2, #32]
 800423e:	781a      	ldrb	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29b      	uxth	r3, r3
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	4619      	mov	r1, r3
 8004254:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10f      	bne.n	800427a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004268:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004278:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	e000      	b.n	8004280 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800427e:	2302      	movs	r3, #2
  }
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr

0800428a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff ff02 	bl	80040b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b22      	cmp	r3, #34	; 0x22
 80042cc:	d171      	bne.n	80043b2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d6:	d123      	bne.n	8004320 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042dc:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10e      	bne.n	8004304 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	1c9a      	adds	r2, r3, #2
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	629a      	str	r2, [r3, #40]	; 0x28
 8004302:	e029      	b.n	8004358 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	b29b      	uxth	r3, r3
 800430c:	b2db      	uxtb	r3, r3
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	629a      	str	r2, [r3, #40]	; 0x28
 800431e:	e01b      	b.n	8004358 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6858      	ldr	r0, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	1c59      	adds	r1, r3, #1
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6291      	str	r1, [r2, #40]	; 0x28
 8004338:	b2c2      	uxtb	r2, r0
 800433a:	701a      	strb	r2, [r3, #0]
 800433c:	e00c      	b.n	8004358 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	b2da      	uxtb	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	1c58      	adds	r0, r3, #1
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	6288      	str	r0, [r1, #40]	; 0x28
 8004350:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800435c:	b29b      	uxth	r3, r3
 800435e:	3b01      	subs	r3, #1
 8004360:	b29b      	uxth	r3, r3
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	4619      	mov	r1, r3
 8004366:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004368:	2b00      	cmp	r3, #0
 800436a:	d120      	bne.n	80043ae <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0220 	bic.w	r2, r2, #32
 800437a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800438a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695a      	ldr	r2, [r3, #20]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0201 	bic.w	r2, r2, #1
 800439a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff fe8e 	bl	80040c6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	e002      	b.n	80043b4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	e000      	b.n	80043b4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80043b2:	2302      	movs	r3, #2
  }
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043f6:	f023 030c 	bic.w	r3, r3, #12
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6812      	ldr	r2, [r2, #0]
 80043fe:	68f9      	ldr	r1, [r7, #12]
 8004400:	430b      	orrs	r3, r1
 8004402:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a52      	ldr	r2, [pc, #328]	; (8004568 <UART_SetConfig+0x1ac>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d14e      	bne.n	80044c2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004424:	f7fe fd7e 	bl	8002f24 <HAL_RCC_GetPCLK2Freq>
 8004428:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	009a      	lsls	r2, r3, #2
 8004434:	441a      	add	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004440:	4a4a      	ldr	r2, [pc, #296]	; (800456c <UART_SetConfig+0x1b0>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	0119      	lsls	r1, r3, #4
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	009a      	lsls	r2, r3, #2
 8004454:	441a      	add	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004460:	4b42      	ldr	r3, [pc, #264]	; (800456c <UART_SetConfig+0x1b0>)
 8004462:	fba3 0302 	umull	r0, r3, r3, r2
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	2064      	movs	r0, #100	; 0x64
 800446a:	fb00 f303 	mul.w	r3, r0, r3
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	3332      	adds	r3, #50	; 0x32
 8004474:	4a3d      	ldr	r2, [pc, #244]	; (800456c <UART_SetConfig+0x1b0>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004480:	4419      	add	r1, r3
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	009a      	lsls	r2, r3, #2
 800448c:	441a      	add	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	fbb2 f2f3 	udiv	r2, r2, r3
 8004498:	4b34      	ldr	r3, [pc, #208]	; (800456c <UART_SetConfig+0x1b0>)
 800449a:	fba3 0302 	umull	r0, r3, r3, r2
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	2064      	movs	r0, #100	; 0x64
 80044a2:	fb00 f303 	mul.w	r3, r0, r3
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	3332      	adds	r3, #50	; 0x32
 80044ac:	4a2f      	ldr	r2, [pc, #188]	; (800456c <UART_SetConfig+0x1b0>)
 80044ae:	fba2 2303 	umull	r2, r3, r2, r3
 80044b2:	095b      	lsrs	r3, r3, #5
 80044b4:	f003 020f 	and.w	r2, r3, #15
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	440a      	add	r2, r1
 80044be:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80044c0:	e04d      	b.n	800455e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80044c2:	f7fe fd1b 	bl	8002efc <HAL_RCC_GetPCLK1Freq>
 80044c6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	4613      	mov	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	009a      	lsls	r2, r3, #2
 80044d2:	441a      	add	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	fbb2 f3f3 	udiv	r3, r2, r3
 80044de:	4a23      	ldr	r2, [pc, #140]	; (800456c <UART_SetConfig+0x1b0>)
 80044e0:	fba2 2303 	umull	r2, r3, r2, r3
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	0119      	lsls	r1, r3, #4
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	4613      	mov	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	009a      	lsls	r2, r3, #2
 80044f2:	441a      	add	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80044fe:	4b1b      	ldr	r3, [pc, #108]	; (800456c <UART_SetConfig+0x1b0>)
 8004500:	fba3 0302 	umull	r0, r3, r3, r2
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	2064      	movs	r0, #100	; 0x64
 8004508:	fb00 f303 	mul.w	r3, r0, r3
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	3332      	adds	r3, #50	; 0x32
 8004512:	4a16      	ldr	r2, [pc, #88]	; (800456c <UART_SetConfig+0x1b0>)
 8004514:	fba2 2303 	umull	r2, r3, r2, r3
 8004518:	095b      	lsrs	r3, r3, #5
 800451a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800451e:	4419      	add	r1, r3
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	4613      	mov	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	009a      	lsls	r2, r3, #2
 800452a:	441a      	add	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	fbb2 f2f3 	udiv	r2, r2, r3
 8004536:	4b0d      	ldr	r3, [pc, #52]	; (800456c <UART_SetConfig+0x1b0>)
 8004538:	fba3 0302 	umull	r0, r3, r3, r2
 800453c:	095b      	lsrs	r3, r3, #5
 800453e:	2064      	movs	r0, #100	; 0x64
 8004540:	fb00 f303 	mul.w	r3, r0, r3
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	3332      	adds	r3, #50	; 0x32
 800454a:	4a08      	ldr	r2, [pc, #32]	; (800456c <UART_SetConfig+0x1b0>)
 800454c:	fba2 2303 	umull	r2, r3, r2, r3
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	f003 020f 	and.w	r2, r3, #15
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	440a      	add	r2, r1
 800455c:	609a      	str	r2, [r3, #8]
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40013800 	.word	0x40013800
 800456c:	51eb851f 	.word	0x51eb851f

08004570 <interpolation>:

float interpolation(float inputVal, float x1, float x2, float y1, float y2);
float limitedInterpolation(float inputVal, float x1, float x2, float y1, float y2);

float interpolation(float inputVal, float x1, float x2, float y1, float y2)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	603b      	str	r3, [r7, #0]

    static float outputVal = 0.0;

    //y = m.x + c

    deltaX = (x2 - x1);
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7fc fad5 	bl	8000b30 <__aeabi_fsub>
 8004586:	4603      	mov	r3, r0
 8004588:	461a      	mov	r2, r3
 800458a:	4b1e      	ldr	r3, [pc, #120]	; (8004604 <interpolation+0x94>)
 800458c:	601a      	str	r2, [r3, #0]
    deltaY = (y2 - y1);
 800458e:	6839      	ldr	r1, [r7, #0]
 8004590:	69b8      	ldr	r0, [r7, #24]
 8004592:	f7fc facd 	bl	8000b30 <__aeabi_fsub>
 8004596:	4603      	mov	r3, r0
 8004598:	461a      	mov	r2, r3
 800459a:	4b1b      	ldr	r3, [pc, #108]	; (8004608 <interpolation+0x98>)
 800459c:	601a      	str	r2, [r3, #0]

    m = (deltaY/deltaX);
 800459e:	4b1a      	ldr	r3, [pc, #104]	; (8004608 <interpolation+0x98>)
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4b18      	ldr	r3, [pc, #96]	; (8004604 <interpolation+0x94>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4619      	mov	r1, r3
 80045a8:	4610      	mov	r0, r2
 80045aa:	f7fc fc7f 	bl	8000eac <__aeabi_fdiv>
 80045ae:	4603      	mov	r3, r0
 80045b0:	461a      	mov	r2, r3
 80045b2:	4b16      	ldr	r3, [pc, #88]	; (800460c <interpolation+0x9c>)
 80045b4:	601a      	str	r2, [r3, #0]

    c = (y1 - (m*x1));
 80045b6:	4b15      	ldr	r3, [pc, #84]	; (800460c <interpolation+0x9c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fc fbc1 	bl	8000d44 <__aeabi_fmul>
 80045c2:	4603      	mov	r3, r0
 80045c4:	4619      	mov	r1, r3
 80045c6:	6838      	ldr	r0, [r7, #0]
 80045c8:	f7fc fab2 	bl	8000b30 <__aeabi_fsub>
 80045cc:	4603      	mov	r3, r0
 80045ce:	461a      	mov	r2, r3
 80045d0:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <interpolation+0xa0>)
 80045d2:	601a      	str	r2, [r3, #0]

    outputVal = ((m*inputVal) + c);
 80045d4:	4b0d      	ldr	r3, [pc, #52]	; (800460c <interpolation+0x9c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68f9      	ldr	r1, [r7, #12]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fc fbb2 	bl	8000d44 <__aeabi_fmul>
 80045e0:	4603      	mov	r3, r0
 80045e2:	461a      	mov	r2, r3
 80045e4:	4b0a      	ldr	r3, [pc, #40]	; (8004610 <interpolation+0xa0>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4619      	mov	r1, r3
 80045ea:	4610      	mov	r0, r2
 80045ec:	f7fc faa2 	bl	8000b34 <__addsf3>
 80045f0:	4603      	mov	r3, r0
 80045f2:	461a      	mov	r2, r3
 80045f4:	4b07      	ldr	r3, [pc, #28]	; (8004614 <interpolation+0xa4>)
 80045f6:	601a      	str	r2, [r3, #0]

	return outputVal;
 80045f8:	4b06      	ldr	r3, [pc, #24]	; (8004614 <interpolation+0xa4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	200001fc 	.word	0x200001fc
 8004608:	20000200 	.word	0x20000200
 800460c:	20000204 	.word	0x20000204
 8004610:	20000208 	.word	0x20000208
 8004614:	2000020c 	.word	0x2000020c

08004618 <limitedInterpolation>:
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
float limitedInterpolation(float inputVal, float x1, float x2, float y1, float y2)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b088      	sub	sp, #32
 800461c:	af02      	add	r7, sp, #8
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]
	float limitedOutputVal = 0;
 8004626:	f04f 0300 	mov.w	r3, #0
 800462a:	617b      	str	r3, [r7, #20]

	limitedOutputVal = interpolation( inputVal, x1, x2, y1, y2 );
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	68b9      	ldr	r1, [r7, #8]
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f7ff ff9a 	bl	8004570 <interpolation>
 800463c:	6178      	str	r0, [r7, #20]

	if(y1 > y2)
 800463e:	6a39      	ldr	r1, [r7, #32]
 8004640:	6838      	ldr	r0, [r7, #0]
 8004642:	f7fc fd3b 	bl	80010bc <__aeabi_fcmpgt>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d013      	beq.n	8004674 <limitedInterpolation+0x5c>
	{
		if(limitedOutputVal > y1)
 800464c:	6839      	ldr	r1, [r7, #0]
 800464e:	6978      	ldr	r0, [r7, #20]
 8004650:	f7fc fd34 	bl	80010bc <__aeabi_fcmpgt>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <limitedInterpolation+0x46>
		{
			return y1;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	e01d      	b.n	800469a <limitedInterpolation+0x82>
		}
		else if(limitedOutputVal < y2)
 800465e:	6a39      	ldr	r1, [r7, #32]
 8004660:	6978      	ldr	r0, [r7, #20]
 8004662:	f7fc fd0d 	bl	8001080 <__aeabi_fcmplt>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <limitedInterpolation+0x58>
		{
			return y2;
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	e014      	b.n	800469a <limitedInterpolation+0x82>
		}
		else
		{
			return limitedOutputVal;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	e012      	b.n	800469a <limitedInterpolation+0x82>
		}
	}
	else
	{
		if(limitedOutputVal > y2)
 8004674:	6a39      	ldr	r1, [r7, #32]
 8004676:	6978      	ldr	r0, [r7, #20]
 8004678:	f7fc fd20 	bl	80010bc <__aeabi_fcmpgt>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <limitedInterpolation+0x6e>
		{
			return y2;
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	e009      	b.n	800469a <limitedInterpolation+0x82>
		}
		else if(limitedOutputVal < y1)
 8004686:	6839      	ldr	r1, [r7, #0]
 8004688:	6978      	ldr	r0, [r7, #20]
 800468a:	f7fc fcf9 	bl	8001080 <__aeabi_fcmplt>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <limitedInterpolation+0x80>
		{
			return y1;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	e000      	b.n	800469a <limitedInterpolation+0x82>
		}
		else
		{
			return limitedOutputVal;
 8004698:	697b      	ldr	r3, [r7, #20]
		}
	}
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <medianFilterAppend>:

float medianFilterAppend(float currentValue, float newValue, float coefficient, float maxDifference);


float medianFilterAppend(float currentValue, float newValue, float coefficient, float maxDifference)//0-1024
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	603b      	str	r3, [r7, #0]
	static float newValueLimitted;

	if((newValue - currentValue) > 0)
 80046b2:	68f9      	ldr	r1, [r7, #12]
 80046b4:	68b8      	ldr	r0, [r7, #8]
 80046b6:	f7fc fa3b 	bl	8000b30 <__aeabi_fsub>
 80046ba:	4603      	mov	r3, r0
 80046bc:	f04f 0100 	mov.w	r1, #0
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fc fcfb 	bl	80010bc <__aeabi_fcmpgt>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d018      	beq.n	80046fe <medianFilterAppend+0x5a>
	{
		if((newValue - currentValue) > maxDifference)
 80046cc:	68f9      	ldr	r1, [r7, #12]
 80046ce:	68b8      	ldr	r0, [r7, #8]
 80046d0:	f7fc fa2e 	bl	8000b30 <__aeabi_fsub>
 80046d4:	4603      	mov	r3, r0
 80046d6:	4619      	mov	r1, r3
 80046d8:	6838      	ldr	r0, [r7, #0]
 80046da:	f7fc fcd1 	bl	8001080 <__aeabi_fcmplt>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <medianFilterAppend+0x52>
		{
			newValueLimitted = currentValue + maxDifference;
 80046e4:	6839      	ldr	r1, [r7, #0]
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f7fc fa24 	bl	8000b34 <__addsf3>
 80046ec:	4603      	mov	r3, r0
 80046ee:	461a      	mov	r2, r3
 80046f0:	4b19      	ldr	r3, [pc, #100]	; (8004758 <medianFilterAppend+0xb4>)
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	e01b      	b.n	800472e <medianFilterAppend+0x8a>
		}
		else
		{
			newValueLimitted = newValue;
 80046f6:	4a18      	ldr	r2, [pc, #96]	; (8004758 <medianFilterAppend+0xb4>)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	e017      	b.n	800472e <medianFilterAppend+0x8a>
		}
	}
	else
	{
		if((currentValue - newValue) > maxDifference)
 80046fe:	68b9      	ldr	r1, [r7, #8]
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f7fc fa15 	bl	8000b30 <__aeabi_fsub>
 8004706:	4603      	mov	r3, r0
 8004708:	4619      	mov	r1, r3
 800470a:	6838      	ldr	r0, [r7, #0]
 800470c:	f7fc fcb8 	bl	8001080 <__aeabi_fcmplt>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d008      	beq.n	8004728 <medianFilterAppend+0x84>
		{
			newValueLimitted = currentValue - maxDifference;
 8004716:	6839      	ldr	r1, [r7, #0]
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f7fc fa09 	bl	8000b30 <__aeabi_fsub>
 800471e:	4603      	mov	r3, r0
 8004720:	461a      	mov	r2, r3
 8004722:	4b0d      	ldr	r3, [pc, #52]	; (8004758 <medianFilterAppend+0xb4>)
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	e002      	b.n	800472e <medianFilterAppend+0x8a>
		}
		else
		{
			newValueLimitted = newValue;
 8004728:	4a0b      	ldr	r2, [pc, #44]	; (8004758 <medianFilterAppend+0xb4>)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	6013      	str	r3, [r2, #0]
		}
	}

	return (currentValue + ((newValueLimitted - currentValue) * coefficient));
 800472e:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <medianFilterAppend+0xb4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68f9      	ldr	r1, [r7, #12]
 8004734:	4618      	mov	r0, r3
 8004736:	f7fc f9fb 	bl	8000b30 <__aeabi_fsub>
 800473a:	4603      	mov	r3, r0
 800473c:	6879      	ldr	r1, [r7, #4]
 800473e:	4618      	mov	r0, r3
 8004740:	f7fc fb00 	bl	8000d44 <__aeabi_fmul>
 8004744:	4603      	mov	r3, r0
 8004746:	68f9      	ldr	r1, [r7, #12]
 8004748:	4618      	mov	r0, r3
 800474a:	f7fc f9f3 	bl	8000b34 <__addsf3>
 800474e:	4603      	mov	r3, r0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20000210 	.word	0x20000210

0800475c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004760:	f7fc fcd6 	bl	8001110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004764:	f000 f826 	bl	80047b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004768:	f000 f992 	bl	8004a90 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800476c:	f000 f966 	bl	8004a3c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8004770:	f000 f8e4 	bl	800493c <MX_TIM2_Init>
  MX_I2C1_Init();
 8004774:	f000 f864 	bl	8004840 <MX_I2C1_Init>
  MX_TIM1_Init();
 8004778:	f000 f890 	bl	800489c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800477c:	2100      	movs	r1, #0
 800477e:	480b      	ldr	r0, [pc, #44]	; (80047ac <main+0x50>)
 8004780:	f7fe fc84 	bl	800308c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8004784:	2104      	movs	r1, #4
 8004786:	4809      	ldr	r0, [pc, #36]	; (80047ac <main+0x50>)
 8004788:	f7fe fc80 	bl	800308c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 800478c:	4808      	ldr	r0, [pc, #32]	; (80047b0 <main+0x54>)
 800478e:	f7fe fc26 	bl	8002fde <HAL_TIM_Base_Start_IT>
  //HAL_UART_Receive_IT(&huart1,(uint8_t *)rx_buffer,10);
  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
  HAL_Delay(150);
 8004792:	2096      	movs	r0, #150	; 0x96
 8004794:	f7fc fd1e 	bl	80011d4 <HAL_Delay>
  programInit();
 8004798:	f000 f9e8 	bl	8004b6c <programInit>
  while (1)  //*****************************************************************************************************
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  startTimeScanFlags();
 800479c:	f001 fc78 	bl	8006090 <startTimeScanFlags>
	  programTask();
 80047a0:	f000 fa42 	bl	8004c28 <programTask>
	/* if(scan2Msec)
	 {
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	 }*/

	  clearTimeScanFlags();
 80047a4:	f001 fd14 	bl	80061d0 <clearTimeScanFlags>
	  startTimeScanFlags();
 80047a8:	e7f8      	b.n	800479c <main+0x40>
 80047aa:	bf00      	nop
 80047ac:	20000410 	.word	0x20000410
 80047b0:	200003cc 	.word	0x200003cc

080047b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b090      	sub	sp, #64	; 0x40
 80047b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047ba:	f107 0318 	add.w	r3, r7, #24
 80047be:	2228      	movs	r2, #40	; 0x28
 80047c0:	2100      	movs	r1, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f001 fd92 	bl	80062ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047c8:	1d3b      	adds	r3, r7, #4
 80047ca:	2200      	movs	r2, #0
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	605a      	str	r2, [r3, #4]
 80047d0:	609a      	str	r2, [r3, #8]
 80047d2:	60da      	str	r2, [r3, #12]
 80047d4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80047d6:	2301      	movs	r3, #1
 80047d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80047da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80047e0:	2300      	movs	r3, #0
 80047e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80047e4:	2301      	movs	r3, #1
 80047e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047e8:	2302      	movs	r3, #2
 80047ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80047ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80047f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80047f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047f8:	f107 0318 	add.w	r3, r7, #24
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fd ffa7 	bl	8002750 <HAL_RCC_OscConfig>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8004808:	f000 fc7e 	bl	8005108 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800480c:	230f      	movs	r3, #15
 800480e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004810:	2302      	movs	r3, #2
 8004812:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004814:	2300      	movs	r3, #0
 8004816:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004818:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800481c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004822:	1d3b      	adds	r3, r7, #4
 8004824:	2102      	movs	r1, #2
 8004826:	4618      	mov	r0, r3
 8004828:	f7fe fa12 	bl	8002c50 <HAL_RCC_ClockConfig>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8004832:	f000 fc69 	bl	8005108 <Error_Handler>
  }
}
 8004836:	bf00      	nop
 8004838:	3740      	adds	r7, #64	; 0x40
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004844:	4b12      	ldr	r3, [pc, #72]	; (8004890 <MX_I2C1_Init+0x50>)
 8004846:	4a13      	ldr	r2, [pc, #76]	; (8004894 <MX_I2C1_Init+0x54>)
 8004848:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800484a:	4b11      	ldr	r3, [pc, #68]	; (8004890 <MX_I2C1_Init+0x50>)
 800484c:	4a12      	ldr	r2, [pc, #72]	; (8004898 <MX_I2C1_Init+0x58>)
 800484e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004850:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <MX_I2C1_Init+0x50>)
 8004852:	2200      	movs	r2, #0
 8004854:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004856:	4b0e      	ldr	r3, [pc, #56]	; (8004890 <MX_I2C1_Init+0x50>)
 8004858:	2200      	movs	r2, #0
 800485a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800485c:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <MX_I2C1_Init+0x50>)
 800485e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004862:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004864:	4b0a      	ldr	r3, [pc, #40]	; (8004890 <MX_I2C1_Init+0x50>)
 8004866:	2200      	movs	r2, #0
 8004868:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800486a:	4b09      	ldr	r3, [pc, #36]	; (8004890 <MX_I2C1_Init+0x50>)
 800486c:	2200      	movs	r2, #0
 800486e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004870:	4b07      	ldr	r3, [pc, #28]	; (8004890 <MX_I2C1_Init+0x50>)
 8004872:	2200      	movs	r2, #0
 8004874:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004876:	4b06      	ldr	r3, [pc, #24]	; (8004890 <MX_I2C1_Init+0x50>)
 8004878:	2200      	movs	r2, #0
 800487a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800487c:	4804      	ldr	r0, [pc, #16]	; (8004890 <MX_I2C1_Init+0x50>)
 800487e:	f7fc ffd9 	bl	8001834 <HAL_I2C_Init>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004888:	f000 fc3e 	bl	8005108 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800488c:	bf00      	nop
 800488e:	bd80      	pop	{r7, pc}
 8004890:	20000284 	.word	0x20000284
 8004894:	40005400 	.word	0x40005400
 8004898:	00061a80 	.word	0x00061a80

0800489c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048a2:	f107 0308 	add.w	r3, r7, #8
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	605a      	str	r2, [r3, #4]
 80048ac:	609a      	str	r2, [r3, #8]
 80048ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048b0:	463b      	mov	r3, r7
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80048b8:	4b1e      	ldr	r3, [pc, #120]	; (8004934 <MX_TIM1_Init+0x98>)
 80048ba:	4a1f      	ldr	r2, [pc, #124]	; (8004938 <MX_TIM1_Init+0x9c>)
 80048bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35800;
 80048be:	4b1d      	ldr	r3, [pc, #116]	; (8004934 <MX_TIM1_Init+0x98>)
 80048c0:	f648 32d8 	movw	r2, #35800	; 0x8bd8
 80048c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048c6:	4b1b      	ldr	r3, [pc, #108]	; (8004934 <MX_TIM1_Init+0x98>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 80048cc:	4b19      	ldr	r3, [pc, #100]	; (8004934 <MX_TIM1_Init+0x98>)
 80048ce:	2201      	movs	r2, #1
 80048d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048d2:	4b18      	ldr	r3, [pc, #96]	; (8004934 <MX_TIM1_Init+0x98>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80048d8:	4b16      	ldr	r3, [pc, #88]	; (8004934 <MX_TIM1_Init+0x98>)
 80048da:	2200      	movs	r2, #0
 80048dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048de:	4b15      	ldr	r3, [pc, #84]	; (8004934 <MX_TIM1_Init+0x98>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80048e4:	4813      	ldr	r0, [pc, #76]	; (8004934 <MX_TIM1_Init+0x98>)
 80048e6:	f7fe fb4f 	bl	8002f88 <HAL_TIM_Base_Init>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80048f0:	f000 fc0a 	bl	8005108 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80048fa:	f107 0308 	add.w	r3, r7, #8
 80048fe:	4619      	mov	r1, r3
 8004900:	480c      	ldr	r0, [pc, #48]	; (8004934 <MX_TIM1_Init+0x98>)
 8004902:	f7fe fdc3 	bl	800348c <HAL_TIM_ConfigClockSource>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800490c:	f000 fbfc 	bl	8005108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004910:	2300      	movs	r3, #0
 8004912:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004914:	2300      	movs	r3, #0
 8004916:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004918:	463b      	mov	r3, r7
 800491a:	4619      	mov	r1, r3
 800491c:	4805      	ldr	r0, [pc, #20]	; (8004934 <MX_TIM1_Init+0x98>)
 800491e:	f7ff f93d 	bl	8003b9c <HAL_TIMEx_MasterConfigSynchronization>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004928:	f000 fbee 	bl	8005108 <Error_Handler>

  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800492c:	bf00      	nop
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	200003cc 	.word	0x200003cc
 8004938:	40012c00 	.word	0x40012c00

0800493c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08e      	sub	sp, #56	; 0x38
 8004940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004942:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004946:	2200      	movs	r2, #0
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	605a      	str	r2, [r3, #4]
 800494c:	609a      	str	r2, [r3, #8]
 800494e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004950:	f107 0320 	add.w	r3, r7, #32
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800495a:	1d3b      	adds	r3, r7, #4
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	605a      	str	r2, [r3, #4]
 8004962:	609a      	str	r2, [r3, #8]
 8004964:	60da      	str	r2, [r3, #12]
 8004966:	611a      	str	r2, [r3, #16]
 8004968:	615a      	str	r2, [r3, #20]
 800496a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800496c:	4b32      	ldr	r3, [pc, #200]	; (8004a38 <MX_TIM2_Init+0xfc>)
 800496e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004972:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004974:	4b30      	ldr	r3, [pc, #192]	; (8004a38 <MX_TIM2_Init+0xfc>)
 8004976:	2200      	movs	r2, #0
 8004978:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800497a:	4b2f      	ldr	r3, [pc, #188]	; (8004a38 <MX_TIM2_Init+0xfc>)
 800497c:	2200      	movs	r2, #0
 800497e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004980:	4b2d      	ldr	r3, [pc, #180]	; (8004a38 <MX_TIM2_Init+0xfc>)
 8004982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004986:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004988:	4b2b      	ldr	r3, [pc, #172]	; (8004a38 <MX_TIM2_Init+0xfc>)
 800498a:	2200      	movs	r2, #0
 800498c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800498e:	4b2a      	ldr	r3, [pc, #168]	; (8004a38 <MX_TIM2_Init+0xfc>)
 8004990:	2200      	movs	r2, #0
 8004992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004994:	4828      	ldr	r0, [pc, #160]	; (8004a38 <MX_TIM2_Init+0xfc>)
 8004996:	f7fe faf7 	bl	8002f88 <HAL_TIM_Base_Init>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80049a0:	f000 fbb2 	bl	8005108 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80049aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049ae:	4619      	mov	r1, r3
 80049b0:	4821      	ldr	r0, [pc, #132]	; (8004a38 <MX_TIM2_Init+0xfc>)
 80049b2:	f7fe fd6b 	bl	800348c <HAL_TIM_ConfigClockSource>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80049bc:	f000 fba4 	bl	8005108 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80049c0:	481d      	ldr	r0, [pc, #116]	; (8004a38 <MX_TIM2_Init+0xfc>)
 80049c2:	f7fe fb2f 	bl	8003024 <HAL_TIM_PWM_Init>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80049cc:	f000 fb9c 	bl	8005108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049d0:	2300      	movs	r3, #0
 80049d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049d4:	2300      	movs	r3, #0
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80049d8:	f107 0320 	add.w	r3, r7, #32
 80049dc:	4619      	mov	r1, r3
 80049de:	4816      	ldr	r0, [pc, #88]	; (8004a38 <MX_TIM2_Init+0xfc>)
 80049e0:	f7ff f8dc 	bl	8003b9c <HAL_TIMEx_MasterConfigSynchronization>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80049ea:	f000 fb8d 	bl	8005108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049ee:	2360      	movs	r3, #96	; 0x60
 80049f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80049f2:	2300      	movs	r3, #0
 80049f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049f6:	2300      	movs	r3, #0
 80049f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80049fe:	1d3b      	adds	r3, r7, #4
 8004a00:	2200      	movs	r2, #0
 8004a02:	4619      	mov	r1, r3
 8004a04:	480c      	ldr	r0, [pc, #48]	; (8004a38 <MX_TIM2_Init+0xfc>)
 8004a06:	f7fe fc7b 	bl	8003300 <HAL_TIM_PWM_ConfigChannel>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004a10:	f000 fb7a 	bl	8005108 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a14:	1d3b      	adds	r3, r7, #4
 8004a16:	2204      	movs	r2, #4
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4807      	ldr	r0, [pc, #28]	; (8004a38 <MX_TIM2_Init+0xfc>)
 8004a1c:	f7fe fc70 	bl	8003300 <HAL_TIM_PWM_ConfigChannel>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8004a26:	f000 fb6f 	bl	8005108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004a2a:	4803      	ldr	r0, [pc, #12]	; (8004a38 <MX_TIM2_Init+0xfc>)
 8004a2c:	f001 f92e 	bl	8005c8c <HAL_TIM_MspPostInit>

}
 8004a30:	bf00      	nop
 8004a32:	3738      	adds	r7, #56	; 0x38
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	20000410 	.word	0x20000410

08004a3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004a40:	4b11      	ldr	r3, [pc, #68]	; (8004a88 <MX_USART1_UART_Init+0x4c>)
 8004a42:	4a12      	ldr	r2, [pc, #72]	; (8004a8c <MX_USART1_UART_Init+0x50>)
 8004a44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004a46:	4b10      	ldr	r3, [pc, #64]	; (8004a88 <MX_USART1_UART_Init+0x4c>)
 8004a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004a4e:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <MX_USART1_UART_Init+0x4c>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004a54:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <MX_USART1_UART_Init+0x4c>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004a5a:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <MX_USART1_UART_Init+0x4c>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004a60:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <MX_USART1_UART_Init+0x4c>)
 8004a62:	220c      	movs	r2, #12
 8004a64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a66:	4b08      	ldr	r3, [pc, #32]	; (8004a88 <MX_USART1_UART_Init+0x4c>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a6c:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <MX_USART1_UART_Init+0x4c>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004a72:	4805      	ldr	r0, [pc, #20]	; (8004a88 <MX_USART1_UART_Init+0x4c>)
 8004a74:	f7ff f8e8 	bl	8003c48 <HAL_UART_Init>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004a7e:	f000 fb43 	bl	8005108 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004a82:	bf00      	nop
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	200002e4 	.word	0x200002e4
 8004a8c:	40013800 	.word	0x40013800

08004a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b088      	sub	sp, #32
 8004a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a96:	f107 0310 	add.w	r3, r7, #16
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	605a      	str	r2, [r3, #4]
 8004aa0:	609a      	str	r2, [r3, #8]
 8004aa2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004aa4:	4b2e      	ldr	r3, [pc, #184]	; (8004b60 <MX_GPIO_Init+0xd0>)
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	4a2d      	ldr	r2, [pc, #180]	; (8004b60 <MX_GPIO_Init+0xd0>)
 8004aaa:	f043 0310 	orr.w	r3, r3, #16
 8004aae:	6193      	str	r3, [r2, #24]
 8004ab0:	4b2b      	ldr	r3, [pc, #172]	; (8004b60 <MX_GPIO_Init+0xd0>)
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	f003 0310 	and.w	r3, r3, #16
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004abc:	4b28      	ldr	r3, [pc, #160]	; (8004b60 <MX_GPIO_Init+0xd0>)
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	4a27      	ldr	r2, [pc, #156]	; (8004b60 <MX_GPIO_Init+0xd0>)
 8004ac2:	f043 0320 	orr.w	r3, r3, #32
 8004ac6:	6193      	str	r3, [r2, #24]
 8004ac8:	4b25      	ldr	r3, [pc, #148]	; (8004b60 <MX_GPIO_Init+0xd0>)
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	f003 0320 	and.w	r3, r3, #32
 8004ad0:	60bb      	str	r3, [r7, #8]
 8004ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ad4:	4b22      	ldr	r3, [pc, #136]	; (8004b60 <MX_GPIO_Init+0xd0>)
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	4a21      	ldr	r2, [pc, #132]	; (8004b60 <MX_GPIO_Init+0xd0>)
 8004ada:	f043 0304 	orr.w	r3, r3, #4
 8004ade:	6193      	str	r3, [r2, #24]
 8004ae0:	4b1f      	ldr	r3, [pc, #124]	; (8004b60 <MX_GPIO_Init+0xd0>)
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	607b      	str	r3, [r7, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aec:	4b1c      	ldr	r3, [pc, #112]	; (8004b60 <MX_GPIO_Init+0xd0>)
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	4a1b      	ldr	r2, [pc, #108]	; (8004b60 <MX_GPIO_Init+0xd0>)
 8004af2:	f043 0308 	orr.w	r3, r3, #8
 8004af6:	6193      	str	r3, [r2, #24]
 8004af8:	4b19      	ldr	r3, [pc, #100]	; (8004b60 <MX_GPIO_Init+0xd0>)
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	603b      	str	r3, [r7, #0]
 8004b02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8004b04:	2200      	movs	r2, #0
 8004b06:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8004b0a:	4816      	ldr	r0, [pc, #88]	; (8004b64 <MX_GPIO_Init+0xd4>)
 8004b0c:	f7fc fe62 	bl	80017d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, motor_sag_geri_Pin|motor_sag_ileri_Pin|motor_sol_ileri_Pin|motor_sol_geri_Pin, GPIO_PIN_RESET);
 8004b10:	2200      	movs	r2, #0
 8004b12:	f243 0103 	movw	r1, #12291	; 0x3003
 8004b16:	4814      	ldr	r0, [pc, #80]	; (8004b68 <MX_GPIO_Init+0xd8>)
 8004b18:	f7fc fe5c 	bl	80017d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004b1c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004b20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b22:	2301      	movs	r3, #1
 8004b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b26:	2300      	movs	r3, #0
 8004b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b2e:	f107 0310 	add.w	r3, r7, #16
 8004b32:	4619      	mov	r1, r3
 8004b34:	480b      	ldr	r0, [pc, #44]	; (8004b64 <MX_GPIO_Init+0xd4>)
 8004b36:	f7fc fcf3 	bl	8001520 <HAL_GPIO_Init>

  /*Configure GPIO pins : motor_sag_geri_Pin motor_sag_ileri_Pin motor_sol_ileri_Pin motor_sol_geri_Pin */
  GPIO_InitStruct.Pin = motor_sag_geri_Pin|motor_sag_ileri_Pin|motor_sol_ileri_Pin|motor_sol_geri_Pin;
 8004b3a:	f243 0303 	movw	r3, #12291	; 0x3003
 8004b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b40:	2301      	movs	r3, #1
 8004b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b48:	2302      	movs	r3, #2
 8004b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b4c:	f107 0310 	add.w	r3, r7, #16
 8004b50:	4619      	mov	r1, r3
 8004b52:	4805      	ldr	r0, [pc, #20]	; (8004b68 <MX_GPIO_Init+0xd8>)
 8004b54:	f7fc fce4 	bl	8001520 <HAL_GPIO_Init>

}
 8004b58:	bf00      	nop
 8004b5a:	3720      	adds	r7, #32
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40021000 	.word	0x40021000
 8004b64:	40011000 	.word	0x40011000
 8004b68:	40010c00 	.word	0x40010c00

08004b6c <programInit>:




void programInit(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0

	aci_kalib=5;
 8004b70:	4b21      	ldr	r3, [pc, #132]	; (8004bf8 <programInit+0x8c>)
 8004b72:	4a22      	ldr	r2, [pc, #136]	; (8004bfc <programInit+0x90>)
 8004b74:	601a      	str	r2, [r3, #0]
	xAxisValue_eski=0;
 8004b76:	4b22      	ldr	r3, [pc, #136]	; (8004c00 <programInit+0x94>)
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]
	yAxisValue_eski=0;
 8004b7e:	4b21      	ldr	r3, [pc, #132]	; (8004c04 <programInit+0x98>)
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
	zAxisValue_eski=0;
 8004b86:	4b20      	ldr	r3, [pc, #128]	; (8004c08 <programInit+0x9c>)
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
	yGyroValue_eski=0;
 8004b8e:	4b1f      	ldr	r3, [pc, #124]	; (8004c0c <programInit+0xa0>)
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
	zGyroValue_eski=0;
 8004b96:	4b1e      	ldr	r3, [pc, #120]	; (8004c10 <programInit+0xa4>)
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]

    MPU6050_Init(MPU6050_DEV_1_ADDRESS);
 8004b9e:	20d0      	movs	r0, #208	; 0xd0
 8004ba0:	f000 fab8 	bl	8005114 <MPU6050_Init>
    motorPID.EPSILON = 0;  //hata_payi
 8004ba4:	4b1b      	ldr	r3, [pc, #108]	; (8004c14 <programInit+0xa8>)
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
    motorPID.DT = 0.01;		 //zaman sabiti
 8004bac:	4b19      	ldr	r3, [pc, #100]	; (8004c14 <programInit+0xa8>)
 8004bae:	4a1a      	ldr	r2, [pc, #104]	; (8004c18 <programInit+0xac>)
 8004bb0:	605a      	str	r2, [r3, #4]
    motorPID.KP = 1;
 8004bb2:	4b18      	ldr	r3, [pc, #96]	; (8004c14 <programInit+0xa8>)
 8004bb4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004bb8:	609a      	str	r2, [r3, #8]
    motorPID.KI = 1;
 8004bba:	4b16      	ldr	r3, [pc, #88]	; (8004c14 <programInit+0xa8>)
 8004bbc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004bc0:	60da      	str	r2, [r3, #12]
    motorPID.KD = 0;
 8004bc2:	4b14      	ldr	r3, [pc, #80]	; (8004c14 <programInit+0xa8>)
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	611a      	str	r2, [r3, #16]
    motorPID.PID_ERROR_LIMIT = 60.0;
 8004bca:	4b12      	ldr	r3, [pc, #72]	; (8004c14 <programInit+0xa8>)
 8004bcc:	4a13      	ldr	r2, [pc, #76]	; (8004c1c <programInit+0xb0>)
 8004bce:	615a      	str	r2, [r3, #20]
    motorPID.INTEGRAL_INITIAL_VALUE = 0.0;
 8004bd0:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <programInit+0xa8>)
 8004bd2:	f04f 0200 	mov.w	r2, #0
 8004bd6:	619a      	str	r2, [r3, #24]
    motorPID.INTEGRAL_MIN_VAL = 0.0;
 8004bd8:	4b0e      	ldr	r3, [pc, #56]	; (8004c14 <programInit+0xa8>)
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	621a      	str	r2, [r3, #32]
	motorPID.INTEGRAL_MAX_VAL = 80.0;
 8004be0:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <programInit+0xa8>)
 8004be2:	4a0f      	ldr	r2, [pc, #60]	; (8004c20 <programInit+0xb4>)
 8004be4:	61da      	str	r2, [r3, #28]
	motorPID.MAX_OUTPUT = 100.0;
 8004be6:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <programInit+0xa8>)
 8004be8:	4a0e      	ldr	r2, [pc, #56]	; (8004c24 <programInit+0xb8>)
 8004bea:	625a      	str	r2, [r3, #36]	; 0x24
	pid_reset(&motorPID);
 8004bec:	4809      	ldr	r0, [pc, #36]	; (8004c14 <programInit+0xa8>)
 8004bee:	f000 fe45 	bl	800587c <pid_reset>
}
 8004bf2:	bf00      	nop
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	200002e0 	.word	0x200002e0
 8004bfc:	40a00000 	.word	0x40a00000
 8004c00:	200004c8 	.word	0x200004c8
 8004c04:	200004a0 	.word	0x200004a0
 8004c08:	200004dc 	.word	0x200004dc
 8004c0c:	200004c4 	.word	0x200004c4
 8004c10:	200004cc 	.word	0x200004cc
 8004c14:	20000388 	.word	0x20000388
 8004c18:	3c23d70a 	.word	0x3c23d70a
 8004c1c:	42700000 	.word	0x42700000
 8004c20:	42a00000 	.word	0x42a00000
 8004c24:	42c80000 	.word	0x42c80000

08004c28 <programTask>:

void programTask(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
	//workingLed();
	//motorControl();
	MPU6050_Task(MPU6050_DEV_1_ADDRESS);
 8004c2c:	20d0      	movs	r0, #208	; 0xd0
 8004c2e:	f000 faf5 	bl	800521c <MPU6050_Task>
	///pwm_proces();
	pidTask();
 8004c32:	f000 f805 	bl	8004c40 <pidTask>
	//pwm_proces_abs();
	uartTask();
 8004c36:	f000 f955 	bl	8004ee4 <uartTask>
//	U_8 writeData[2];
//	writeData[0] = 0x0F;
//	writeData[1] = 0xF8;
//	I2CWrite(AD7997_0_ADDR_AGND, 0x02, (U_8*)&writeData, sizeof(writeData), 200, FALSE);
//	I2CWrite(AD7997_0_ADDR_VDD,  0x02, (U_8*)&writeData, sizeof(writeData), 200, FALSE);
}
 8004c3a:	bf00      	nop
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <pidTask>:
				htim2.Instance->CCR2 = (uint16_t) (tempPwmValue2);
			}
}

void pidTask(void)  //PID işlemi burada yapılıyor.
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af02      	add	r7, sp, #8

	static float pwm_min_val=20000.0;
	if (scan10Msec)
 8004c46:	4b96      	ldr	r3, [pc, #600]	; (8004ea0 <pidTask+0x260>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 8125 	beq.w	8004e9a <pidTask+0x25a>
	{

		if(ilk_deneme==0)
 8004c50:	4b94      	ldr	r3, [pc, #592]	; (8004ea4 <pidTask+0x264>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10d      	bne.n	8004c74 <pidTask+0x34>
		{
			if(pitch!=0)
 8004c58:	4b93      	ldr	r3, [pc, #588]	; (8004ea8 <pidTask+0x268>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f04f 0100 	mov.w	r1, #0
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fc fa03 	bl	800106c <__aeabi_fcmpeq>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 8115 	beq.w	8004e98 <pidTask+0x258>
				return;
			else
			{
				ilk_deneme=1;
 8004c6e:	4b8d      	ldr	r3, [pc, #564]	; (8004ea4 <pidTask+0x264>)
 8004c70:	2201      	movs	r2, #1
 8004c72:	701a      	strb	r2, [r3, #0]
			}

		}

		static float pitch_abs;
		if(pitch<0)
 8004c74:	4b8c      	ldr	r3, [pc, #560]	; (8004ea8 <pidTask+0x268>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f04f 0100 	mov.w	r1, #0
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fc f9ff 	bl	8001080 <__aeabi_fcmplt>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d006      	beq.n	8004c96 <pidTask+0x56>
		{
			pitch_abs=-1*pitch;
 8004c88:	4b87      	ldr	r3, [pc, #540]	; (8004ea8 <pidTask+0x268>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004c90:	4a86      	ldr	r2, [pc, #536]	; (8004eac <pidTask+0x26c>)
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	e003      	b.n	8004c9e <pidTask+0x5e>
		}
		else
			pitch_abs=pitch;
 8004c96:	4b84      	ldr	r3, [pc, #528]	; (8004ea8 <pidTask+0x268>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a84      	ldr	r2, [pc, #528]	; (8004eac <pidTask+0x26c>)
 8004c9c:	6013      	str	r3, [r2, #0]


		motorPID.setValue = 0;	//olması gereken.
 8004c9e:	4b84      	ldr	r3, [pc, #528]	; (8004eb0 <pidTask+0x270>)
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	62da      	str	r2, [r3, #44]	; 0x2c
		motorPID.feedbackValue = pitch_abs;
 8004ca6:	4b81      	ldr	r3, [pc, #516]	; (8004eac <pidTask+0x26c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a81      	ldr	r2, [pc, #516]	; (8004eb0 <pidTask+0x270>)
 8004cac:	6293      	str	r3, [r2, #40]	; 0x28
		pid_control(&motorPID, positiveLimiting);
 8004cae:	2102      	movs	r1, #2
 8004cb0:	487f      	ldr	r0, [pc, #508]	; (8004eb0 <pidTask+0x270>)
 8004cb2:	f000 fe09 	bl	80058c8 <pid_control>
		if(motorPID.error<aci_kalib  && motorPID.error > -1 * aci_kalib)
 8004cb6:	4b7e      	ldr	r3, [pc, #504]	; (8004eb0 <pidTask+0x270>)
 8004cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cba:	4b7e      	ldr	r3, [pc, #504]	; (8004eb4 <pidTask+0x274>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	f7fc f9dd 	bl	8001080 <__aeabi_fcmplt>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d013      	beq.n	8004cf4 <pidTask+0xb4>
 8004ccc:	4b78      	ldr	r3, [pc, #480]	; (8004eb0 <pidTask+0x270>)
 8004cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cd0:	4b78      	ldr	r3, [pc, #480]	; (8004eb4 <pidTask+0x274>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4610      	mov	r0, r2
 8004cdc:	f7fc f9ee 	bl	80010bc <__aeabi_fcmpgt>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d006      	beq.n	8004cf4 <pidTask+0xb4>
		{
			pid_reset(&motorPID);
 8004ce6:	4872      	ldr	r0, [pc, #456]	; (8004eb0 <pidTask+0x270>)
 8004ce8:	f000 fdc8 	bl	800587c <pid_reset>

			pitch=0;
 8004cec:	4b6e      	ldr	r3, [pc, #440]	; (8004ea8 <pidTask+0x268>)
 8004cee:	f04f 0200 	mov.w	r2, #0
 8004cf2:	601a      	str	r2, [r3, #0]

		}

		 sagMotorPwmDutyValue = motorPID.output;
 8004cf4:	4b6e      	ldr	r3, [pc, #440]	; (8004eb0 <pidTask+0x270>)
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	4a6f      	ldr	r2, [pc, #444]	; (8004eb8 <pidTask+0x278>)
 8004cfa:	6013      	str	r3, [r2, #0]
					solMotorPwmDutyValue = motorPID.output;
 8004cfc:	4b6c      	ldr	r3, [pc, #432]	; (8004eb0 <pidTask+0x270>)
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	4a6e      	ldr	r2, [pc, #440]	; (8004ebc <pidTask+0x27c>)
 8004d02:	6013      	str	r3, [r2, #0]
//					{
//
//					}


					if (pitch >0)
 8004d04:	4b68      	ldr	r3, [pc, #416]	; (8004ea8 <pidTask+0x268>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f04f 0100 	mov.w	r1, #0
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fc f9d5 	bl	80010bc <__aeabi_fcmpgt>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d019      	beq.n	8004d4c <pidTask+0x10c>
					{
						HAL_GPIO_WritePin(GPIOB, SAG_MOTOR_DIR_BACK_PIN, SET);
 8004d18:	2201      	movs	r2, #1
 8004d1a:	2102      	movs	r1, #2
 8004d1c:	4868      	ldr	r0, [pc, #416]	; (8004ec0 <pidTask+0x280>)
 8004d1e:	f7fc fd59 	bl	80017d4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SAG_MOTOR_DIR_FORWARD_PIN, RESET);
 8004d22:	2200      	movs	r2, #0
 8004d24:	2101      	movs	r1, #1
 8004d26:	4866      	ldr	r0, [pc, #408]	; (8004ec0 <pidTask+0x280>)
 8004d28:	f7fc fd54 	bl	80017d4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SOL_MOTOR_DIR_BACK_PIN, SET);
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d32:	4863      	ldr	r0, [pc, #396]	; (8004ec0 <pidTask+0x280>)
 8004d34:	f7fc fd4e 	bl	80017d4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SOL_MOTOR_DIR_FORWARD_PIN, RESET);
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d3e:	4860      	ldr	r0, [pc, #384]	; (8004ec0 <pidTask+0x280>)
 8004d40:	f7fc fd48 	bl	80017d4 <HAL_GPIO_WritePin>
						//pwm_min_val=20000.0;

						yon=90;
 8004d44:	4b5f      	ldr	r3, [pc, #380]	; (8004ec4 <pidTask+0x284>)
 8004d46:	225a      	movs	r2, #90	; 0x5a
 8004d48:	701a      	strb	r2, [r3, #0]
 8004d4a:	e03c      	b.n	8004dc6 <pidTask+0x186>

					}
					else if (pitch<0)
 8004d4c:	4b56      	ldr	r3, [pc, #344]	; (8004ea8 <pidTask+0x268>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f04f 0100 	mov.w	r1, #0
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fc f993 	bl	8001080 <__aeabi_fcmplt>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d019      	beq.n	8004d94 <pidTask+0x154>
					{

						HAL_GPIO_WritePin(GPIOB, SAG_MOTOR_DIR_BACK_PIN, RESET);
 8004d60:	2200      	movs	r2, #0
 8004d62:	2102      	movs	r1, #2
 8004d64:	4856      	ldr	r0, [pc, #344]	; (8004ec0 <pidTask+0x280>)
 8004d66:	f7fc fd35 	bl	80017d4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SAG_MOTOR_DIR_FORWARD_PIN, SET);
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	4854      	ldr	r0, [pc, #336]	; (8004ec0 <pidTask+0x280>)
 8004d70:	f7fc fd30 	bl	80017d4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SOL_MOTOR_DIR_BACK_PIN, RESET);
 8004d74:	2200      	movs	r2, #0
 8004d76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d7a:	4851      	ldr	r0, [pc, #324]	; (8004ec0 <pidTask+0x280>)
 8004d7c:	f7fc fd2a 	bl	80017d4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SOL_MOTOR_DIR_FORWARD_PIN, SET);
 8004d80:	2201      	movs	r2, #1
 8004d82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d86:	484e      	ldr	r0, [pc, #312]	; (8004ec0 <pidTask+0x280>)
 8004d88:	f7fc fd24 	bl	80017d4 <HAL_GPIO_WritePin>
						//pwm_min_val=50000;
						yon=0;
 8004d8c:	4b4d      	ldr	r3, [pc, #308]	; (8004ec4 <pidTask+0x284>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	e018      	b.n	8004dc6 <pidTask+0x186>
					}
					else
					{
						HAL_GPIO_WritePin(GPIOB, SAG_MOTOR_DIR_BACK_PIN, RESET);
 8004d94:	2200      	movs	r2, #0
 8004d96:	2102      	movs	r1, #2
 8004d98:	4849      	ldr	r0, [pc, #292]	; (8004ec0 <pidTask+0x280>)
 8004d9a:	f7fc fd1b 	bl	80017d4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SAG_MOTOR_DIR_FORWARD_PIN, RESET);
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2101      	movs	r1, #1
 8004da2:	4847      	ldr	r0, [pc, #284]	; (8004ec0 <pidTask+0x280>)
 8004da4:	f7fc fd16 	bl	80017d4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SOL_MOTOR_DIR_BACK_PIN, RESET);
 8004da8:	2200      	movs	r2, #0
 8004daa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004dae:	4844      	ldr	r0, [pc, #272]	; (8004ec0 <pidTask+0x280>)
 8004db0:	f7fc fd10 	bl	80017d4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SOL_MOTOR_DIR_FORWARD_PIN, RESET);
 8004db4:	2200      	movs	r2, #0
 8004db6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004dba:	4841      	ldr	r0, [pc, #260]	; (8004ec0 <pidTask+0x280>)
 8004dbc:	f7fc fd0a 	bl	80017d4 <HAL_GPIO_WritePin>
						yon=0;
 8004dc0:	4b40      	ldr	r3, [pc, #256]	; (8004ec4 <pidTask+0x284>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	701a      	strb	r2, [r3, #0]
					}


					if (pitch > 60 || pitch < -60)
 8004dc6:	4b38      	ldr	r3, [pc, #224]	; (8004ea8 <pidTask+0x268>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	493f      	ldr	r1, [pc, #252]	; (8004ec8 <pidTask+0x288>)
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fc f975 	bl	80010bc <__aeabi_fcmpgt>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d108      	bne.n	8004dea <pidTask+0x1aa>
 8004dd8:	4b33      	ldr	r3, [pc, #204]	; (8004ea8 <pidTask+0x268>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	493b      	ldr	r1, [pc, #236]	; (8004ecc <pidTask+0x28c>)
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fc f94e 	bl	8001080 <__aeabi_fcmplt>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d008      	beq.n	8004dfc <pidTask+0x1bc>
					{

						htim2.Instance->CCR1 = 0;
 8004dea:	4b39      	ldr	r3, [pc, #228]	; (8004ed0 <pidTask+0x290>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2200      	movs	r2, #0
 8004df0:	635a      	str	r2, [r3, #52]	; 0x34
						htim2.Instance->CCR2 = 0;
 8004df2:	4b37      	ldr	r3, [pc, #220]	; (8004ed0 <pidTask+0x290>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2200      	movs	r2, #0
 8004df8:	639a      	str	r2, [r3, #56]	; 0x38
 8004dfa:	e04e      	b.n	8004e9a <pidTask+0x25a>
					}

					else if (pitch < aci_kalib && pitch > -1 * aci_kalib)
 8004dfc:	4b2a      	ldr	r3, [pc, #168]	; (8004ea8 <pidTask+0x268>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	4b2c      	ldr	r3, [pc, #176]	; (8004eb4 <pidTask+0x274>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4619      	mov	r1, r3
 8004e06:	4610      	mov	r0, r2
 8004e08:	f7fc f93a 	bl	8001080 <__aeabi_fcmplt>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d018      	beq.n	8004e44 <pidTask+0x204>
 8004e12:	4b28      	ldr	r3, [pc, #160]	; (8004eb4 <pidTask+0x274>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8004e1a:	4b23      	ldr	r3, [pc, #140]	; (8004ea8 <pidTask+0x268>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4610      	mov	r0, r2
 8004e22:	f7fc f92d 	bl	8001080 <__aeabi_fcmplt>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00b      	beq.n	8004e44 <pidTask+0x204>
					{
						htim2.Instance->CCR1 = (uint16_t) 0;
 8004e2c:	4b28      	ldr	r3, [pc, #160]	; (8004ed0 <pidTask+0x290>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2200      	movs	r2, #0
 8004e32:	635a      	str	r2, [r3, #52]	; 0x34
						htim2.Instance->CCR2 = (uint16_t) 0;
 8004e34:	4b26      	ldr	r3, [pc, #152]	; (8004ed0 <pidTask+0x290>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	639a      	str	r2, [r3, #56]	; 0x38
						yon=45;
 8004e3c:	4b21      	ldr	r3, [pc, #132]	; (8004ec4 <pidTask+0x284>)
 8004e3e:	222d      	movs	r2, #45	; 0x2d
 8004e40:	701a      	strb	r2, [r3, #0]
 8004e42:	e02a      	b.n	8004e9a <pidTask+0x25a>
					}

					else
					{

						float tempPwmValue1 = limitedInterpolation(sagMotorPwmDutyValue, 0,
 8004e44:	4b1c      	ldr	r3, [pc, #112]	; (8004eb8 <pidTask+0x278>)
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	4b22      	ldr	r3, [pc, #136]	; (8004ed4 <pidTask+0x294>)
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	4b22      	ldr	r3, [pc, #136]	; (8004ed8 <pidTask+0x298>)
 8004e4e:	4a23      	ldr	r2, [pc, #140]	; (8004edc <pidTask+0x29c>)
 8004e50:	f04f 0100 	mov.w	r1, #0
 8004e54:	f7ff fbe0 	bl	8004618 <limitedInterpolation>
 8004e58:	6078      	str	r0, [r7, #4]
								100, 20000, 60000);
						float tempPwmValue2 = limitedInterpolation(solMotorPwmDutyValue, 0,
 8004e5a:	4b18      	ldr	r3, [pc, #96]	; (8004ebc <pidTask+0x27c>)
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	4b1d      	ldr	r3, [pc, #116]	; (8004ed4 <pidTask+0x294>)
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	4b1d      	ldr	r3, [pc, #116]	; (8004ed8 <pidTask+0x298>)
 8004e64:	4a1d      	ldr	r2, [pc, #116]	; (8004edc <pidTask+0x29c>)
 8004e66:	f04f 0100 	mov.w	r1, #0
 8004e6a:	f7ff fbd5 	bl	8004618 <limitedInterpolation>
 8004e6e:	6038      	str	r0, [r7, #0]
								100, 20000, 60000);
						duty_izleme = tempPwmValue1;
 8004e70:	4a1b      	ldr	r2, [pc, #108]	; (8004ee0 <pidTask+0x2a0>)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6013      	str	r3, [r2, #0]

						htim2.Instance->CCR1 = (uint16_t) (tempPwmValue1);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fc f92a 	bl	80010d0 <__aeabi_f2uiz>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <pidTask+0x290>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	635a      	str	r2, [r3, #52]	; 0x34
						htim2.Instance->CCR2 = (uint16_t) (tempPwmValue2);
 8004e86:	6838      	ldr	r0, [r7, #0]
 8004e88:	f7fc f922 	bl	80010d0 <__aeabi_f2uiz>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	4b0f      	ldr	r3, [pc, #60]	; (8004ed0 <pidTask+0x290>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	639a      	str	r2, [r3, #56]	; 0x38
 8004e96:	e000      	b.n	8004e9a <pidTask+0x25a>
				return;
 8004e98:	bf00      	nop
					}
	}

}
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	20000241 	.word	0x20000241
 8004ea4:	20000215 	.word	0x20000215
 8004ea8:	200004d4 	.word	0x200004d4
 8004eac:	20000228 	.word	0x20000228
 8004eb0:	20000388 	.word	0x20000388
 8004eb4:	200002e0 	.word	0x200002e0
 8004eb8:	20000218 	.word	0x20000218
 8004ebc:	2000021c 	.word	0x2000021c
 8004ec0:	40010c00 	.word	0x40010c00
 8004ec4:	20000224 	.word	0x20000224
 8004ec8:	42700000 	.word	0x42700000
 8004ecc:	c2700000 	.word	0xc2700000
 8004ed0:	20000410 	.word	0x20000410
 8004ed4:	476a6000 	.word	0x476a6000
 8004ed8:	469c4000 	.word	0x469c4000
 8004edc:	42c80000 	.word	0x42c80000
 8004ee0:	20000220 	.word	0x20000220

08004ee4 <uartTask>:
void uartTask(void)
{
 8004ee4:	b598      	push	{r3, r4, r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
	if (scan1Sec)
 8004ee8:	4b7b      	ldr	r3, [pc, #492]	; (80050d8 <uartTask+0x1f4>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 80cb 	beq.w	8005088 <uartTask+0x1a4>
		{
		HAL_UART_Receive_IT(&huart1,(uint8_t *)rx_buffer,7);
 8004ef2:	2207      	movs	r2, #7
 8004ef4:	4979      	ldr	r1, [pc, #484]	; (80050dc <uartTask+0x1f8>)
 8004ef6:	487a      	ldr	r0, [pc, #488]	; (80050e0 <uartTask+0x1fc>)
 8004ef8:	f7fe ff8c 	bl	8003e14 <HAL_UART_Receive_IT>
		if(syc>=7)    /// DESİMAL 48     ASCILL 0
 8004efc:	4b79      	ldr	r3, [pc, #484]	; (80050e4 <uartTask+0x200>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b06      	cmp	r3, #6
 8004f02:	f240 80c1 	bls.w	8005088 <uartTask+0x1a4>
		{
			if (rx_buffer[0] == 'S' && rx_buffer[6] == 'B')
 8004f06:	4b75      	ldr	r3, [pc, #468]	; (80050dc <uartTask+0x1f8>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b53      	cmp	r3, #83	; 0x53
 8004f0c:	f040 80b9 	bne.w	8005082 <uartTask+0x19e>
 8004f10:	4b72      	ldr	r3, [pc, #456]	; (80050dc <uartTask+0x1f8>)
 8004f12:	799b      	ldrb	r3, [r3, #6]
 8004f14:	2b42      	cmp	r3, #66	; 0x42
 8004f16:	f040 80b4 	bne.w	8005082 <uartTask+0x19e>
			{
				if (rx_buffer[1] == 'K' && rx_buffer[2] == 'P')
 8004f1a:	4b70      	ldr	r3, [pc, #448]	; (80050dc <uartTask+0x1f8>)
 8004f1c:	785b      	ldrb	r3, [r3, #1]
 8004f1e:	2b4b      	cmp	r3, #75	; 0x4b
 8004f20:	d128      	bne.n	8004f74 <uartTask+0x90>
 8004f22:	4b6e      	ldr	r3, [pc, #440]	; (80050dc <uartTask+0x1f8>)
 8004f24:	789b      	ldrb	r3, [r3, #2]
 8004f26:	2b50      	cmp	r3, #80	; 0x50
 8004f28:	d124      	bne.n	8004f74 <uartTask+0x90>
				{
					 motorPID.KP= (float)((rx_buffer[3]-48)*10+(rx_buffer[4]-48)+(float)((float)(rx_buffer[5]-48)/10));
 8004f2a:	4b6c      	ldr	r3, [pc, #432]	; (80050dc <uartTask+0x1f8>)
 8004f2c:	78db      	ldrb	r3, [r3, #3]
 8004f2e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004f32:	4613      	mov	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	4b67      	ldr	r3, [pc, #412]	; (80050dc <uartTask+0x1f8>)
 8004f3e:	791b      	ldrb	r3, [r3, #4]
 8004f40:	3b30      	subs	r3, #48	; 0x30
 8004f42:	4413      	add	r3, r2
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fb fea9 	bl	8000c9c <__aeabi_i2f>
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	4b63      	ldr	r3, [pc, #396]	; (80050dc <uartTask+0x1f8>)
 8004f4e:	795b      	ldrb	r3, [r3, #5]
 8004f50:	3b30      	subs	r3, #48	; 0x30
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fb fea2 	bl	8000c9c <__aeabi_i2f>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	4963      	ldr	r1, [pc, #396]	; (80050e8 <uartTask+0x204>)
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fb ffa5 	bl	8000eac <__aeabi_fdiv>
 8004f62:	4603      	mov	r3, r0
 8004f64:	4619      	mov	r1, r3
 8004f66:	4620      	mov	r0, r4
 8004f68:	f7fb fde4 	bl	8000b34 <__addsf3>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	461a      	mov	r2, r3
 8004f70:	4b5e      	ldr	r3, [pc, #376]	; (80050ec <uartTask+0x208>)
 8004f72:	609a      	str	r2, [r3, #8]
					/* n = sprintf((char *) buffer, "%.2f \n",motorPID.KP);
					 HAL_UART_Transmit(&huart1,buffer,n,10000);*/

				}
				if (rx_buffer[1] == 'K' && rx_buffer[2] == 'I')
 8004f74:	4b59      	ldr	r3, [pc, #356]	; (80050dc <uartTask+0x1f8>)
 8004f76:	785b      	ldrb	r3, [r3, #1]
 8004f78:	2b4b      	cmp	r3, #75	; 0x4b
 8004f7a:	d128      	bne.n	8004fce <uartTask+0xea>
 8004f7c:	4b57      	ldr	r3, [pc, #348]	; (80050dc <uartTask+0x1f8>)
 8004f7e:	789b      	ldrb	r3, [r3, #2]
 8004f80:	2b49      	cmp	r3, #73	; 0x49
 8004f82:	d124      	bne.n	8004fce <uartTask+0xea>
				{
					motorPID.KI= (float)((rx_buffer[3]-48)*10+(rx_buffer[4]-48)+(float)((float)(rx_buffer[5]-48)/10));
 8004f84:	4b55      	ldr	r3, [pc, #340]	; (80050dc <uartTask+0x1f8>)
 8004f86:	78db      	ldrb	r3, [r3, #3]
 8004f88:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	461a      	mov	r2, r3
 8004f96:	4b51      	ldr	r3, [pc, #324]	; (80050dc <uartTask+0x1f8>)
 8004f98:	791b      	ldrb	r3, [r3, #4]
 8004f9a:	3b30      	subs	r3, #48	; 0x30
 8004f9c:	4413      	add	r3, r2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fb fe7c 	bl	8000c9c <__aeabi_i2f>
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	4b4d      	ldr	r3, [pc, #308]	; (80050dc <uartTask+0x1f8>)
 8004fa8:	795b      	ldrb	r3, [r3, #5]
 8004faa:	3b30      	subs	r3, #48	; 0x30
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fb fe75 	bl	8000c9c <__aeabi_i2f>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	494c      	ldr	r1, [pc, #304]	; (80050e8 <uartTask+0x204>)
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fb ff78 	bl	8000eac <__aeabi_fdiv>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f7fb fdb7 	bl	8000b34 <__addsf3>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4b48      	ldr	r3, [pc, #288]	; (80050ec <uartTask+0x208>)
 8004fcc:	60da      	str	r2, [r3, #12]
				}
				if (rx_buffer[1] == 'K' && rx_buffer[2] == 'D')
 8004fce:	4b43      	ldr	r3, [pc, #268]	; (80050dc <uartTask+0x1f8>)
 8004fd0:	785b      	ldrb	r3, [r3, #1]
 8004fd2:	2b4b      	cmp	r3, #75	; 0x4b
 8004fd4:	d128      	bne.n	8005028 <uartTask+0x144>
 8004fd6:	4b41      	ldr	r3, [pc, #260]	; (80050dc <uartTask+0x1f8>)
 8004fd8:	789b      	ldrb	r3, [r3, #2]
 8004fda:	2b44      	cmp	r3, #68	; 0x44
 8004fdc:	d124      	bne.n	8005028 <uartTask+0x144>
				{
					motorPID.KD= (float)((rx_buffer[3]-48)*10+(rx_buffer[4]-48)+(float)((float)(rx_buffer[5]-48)/10));
 8004fde:	4b3f      	ldr	r3, [pc, #252]	; (80050dc <uartTask+0x1f8>)
 8004fe0:	78db      	ldrb	r3, [r3, #3]
 8004fe2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	461a      	mov	r2, r3
 8004ff0:	4b3a      	ldr	r3, [pc, #232]	; (80050dc <uartTask+0x1f8>)
 8004ff2:	791b      	ldrb	r3, [r3, #4]
 8004ff4:	3b30      	subs	r3, #48	; 0x30
 8004ff6:	4413      	add	r3, r2
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fb fe4f 	bl	8000c9c <__aeabi_i2f>
 8004ffe:	4604      	mov	r4, r0
 8005000:	4b36      	ldr	r3, [pc, #216]	; (80050dc <uartTask+0x1f8>)
 8005002:	795b      	ldrb	r3, [r3, #5]
 8005004:	3b30      	subs	r3, #48	; 0x30
 8005006:	4618      	mov	r0, r3
 8005008:	f7fb fe48 	bl	8000c9c <__aeabi_i2f>
 800500c:	4603      	mov	r3, r0
 800500e:	4936      	ldr	r1, [pc, #216]	; (80050e8 <uartTask+0x204>)
 8005010:	4618      	mov	r0, r3
 8005012:	f7fb ff4b 	bl	8000eac <__aeabi_fdiv>
 8005016:	4603      	mov	r3, r0
 8005018:	4619      	mov	r1, r3
 800501a:	4620      	mov	r0, r4
 800501c:	f7fb fd8a 	bl	8000b34 <__addsf3>
 8005020:	4603      	mov	r3, r0
 8005022:	461a      	mov	r2, r3
 8005024:	4b31      	ldr	r3, [pc, #196]	; (80050ec <uartTask+0x208>)
 8005026:	611a      	str	r2, [r3, #16]
				}
				if (rx_buffer[1] == 'A' && rx_buffer[2] == 'K')
 8005028:	4b2c      	ldr	r3, [pc, #176]	; (80050dc <uartTask+0x1f8>)
 800502a:	785b      	ldrb	r3, [r3, #1]
 800502c:	2b41      	cmp	r3, #65	; 0x41
 800502e:	d128      	bne.n	8005082 <uartTask+0x19e>
 8005030:	4b2a      	ldr	r3, [pc, #168]	; (80050dc <uartTask+0x1f8>)
 8005032:	789b      	ldrb	r3, [r3, #2]
 8005034:	2b4b      	cmp	r3, #75	; 0x4b
 8005036:	d124      	bne.n	8005082 <uartTask+0x19e>
				{
					aci_kalib= (float) ((rx_buffer[3] - 48) * 10 + (rx_buffer[4] - 48) + (float) ((float) (rx_buffer[5] - 48) / 10));
 8005038:	4b28      	ldr	r3, [pc, #160]	; (80050dc <uartTask+0x1f8>)
 800503a:	78db      	ldrb	r3, [r3, #3]
 800503c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005040:	4613      	mov	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	461a      	mov	r2, r3
 800504a:	4b24      	ldr	r3, [pc, #144]	; (80050dc <uartTask+0x1f8>)
 800504c:	791b      	ldrb	r3, [r3, #4]
 800504e:	3b30      	subs	r3, #48	; 0x30
 8005050:	4413      	add	r3, r2
 8005052:	4618      	mov	r0, r3
 8005054:	f7fb fe22 	bl	8000c9c <__aeabi_i2f>
 8005058:	4604      	mov	r4, r0
 800505a:	4b20      	ldr	r3, [pc, #128]	; (80050dc <uartTask+0x1f8>)
 800505c:	795b      	ldrb	r3, [r3, #5]
 800505e:	3b30      	subs	r3, #48	; 0x30
 8005060:	4618      	mov	r0, r3
 8005062:	f7fb fe1b 	bl	8000c9c <__aeabi_i2f>
 8005066:	4603      	mov	r3, r0
 8005068:	491f      	ldr	r1, [pc, #124]	; (80050e8 <uartTask+0x204>)
 800506a:	4618      	mov	r0, r3
 800506c:	f7fb ff1e 	bl	8000eac <__aeabi_fdiv>
 8005070:	4603      	mov	r3, r0
 8005072:	4619      	mov	r1, r3
 8005074:	4620      	mov	r0, r4
 8005076:	f7fb fd5d 	bl	8000b34 <__addsf3>
 800507a:	4603      	mov	r3, r0
 800507c:	461a      	mov	r2, r3
 800507e:	4b1c      	ldr	r3, [pc, #112]	; (80050f0 <uartTask+0x20c>)
 8005080:	601a      	str	r2, [r3, #0]
				}

		   }
		syc=0;
 8005082:	4b18      	ldr	r3, [pc, #96]	; (80050e4 <uartTask+0x200>)
 8005084:	2200      	movs	r2, #0
 8005086:	701a      	strb	r2, [r3, #0]
			// __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
		}
		}

		if (scan2Msec)
 8005088:	4b1a      	ldr	r3, [pc, #104]	; (80050f4 <uartTask+0x210>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d020      	beq.n	80050d2 <uartTask+0x1ee>
		//n = sprintf((char *) buffer, "%.2f   %.2f   %.2f   %.2f   %.2f   %.2f \n",motorPID.KP,motorPID.KI,motorPID.KD,pitch,motorPID.error,duty_izleme);

	   // n = sprintf((char *) buffer, "%.2f  %.2f \n",pitch,duty_izleme);
		//	n = sprintf((char *) buffer, "%d",(int8_t)pitch);

			tek_sayi[0]=205;
 8005090:	4b19      	ldr	r3, [pc, #100]	; (80050f8 <uartTask+0x214>)
 8005092:	22cd      	movs	r2, #205	; 0xcd
 8005094:	701a      	strb	r2, [r3, #0]
			tek_sayi[3]=230;
 8005096:	4b18      	ldr	r3, [pc, #96]	; (80050f8 <uartTask+0x214>)
 8005098:	22e6      	movs	r2, #230	; 0xe6
 800509a:	70da      	strb	r2, [r3, #3]
			tek_sayi[1]=(uint8_t)(pitch+90);
 800509c:	4b17      	ldr	r3, [pc, #92]	; (80050fc <uartTask+0x218>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4917      	ldr	r1, [pc, #92]	; (8005100 <uartTask+0x21c>)
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fb fd46 	bl	8000b34 <__addsf3>
 80050a8:	4603      	mov	r3, r0
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fc f810 	bl	80010d0 <__aeabi_f2uiz>
 80050b0:	4603      	mov	r3, r0
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <uartTask+0x214>)
 80050b6:	705a      	strb	r2, [r3, #1]
			tek_sayi[2]=(uint8_t)(yon);
 80050b8:	4b12      	ldr	r3, [pc, #72]	; (8005104 <uartTask+0x220>)
 80050ba:	f993 3000 	ldrsb.w	r3, [r3]
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	4b0d      	ldr	r3, [pc, #52]	; (80050f8 <uartTask+0x214>)
 80050c2:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1,tek_sayi,4,10000);
 80050c4:	f242 7310 	movw	r3, #10000	; 0x2710
 80050c8:	2204      	movs	r2, #4
 80050ca:	490b      	ldr	r1, [pc, #44]	; (80050f8 <uartTask+0x214>)
 80050cc:	4804      	ldr	r0, [pc, #16]	; (80050e0 <uartTask+0x1fc>)
 80050ce:	f7fe fe08 	bl	8003ce2 <HAL_UART_Transmit>


	}
}
 80050d2:	bf00      	nop
 80050d4:	bd98      	pop	{r3, r4, r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000247 	.word	0x20000247
 80050dc:	200004e4 	.word	0x200004e4
 80050e0:	200002e4 	.word	0x200002e4
 80050e4:	20000214 	.word	0x20000214
 80050e8:	41200000 	.word	0x41200000
 80050ec:	20000388 	.word	0x20000388
 80050f0:	200002e0 	.word	0x200002e0
 80050f4:	20000240 	.word	0x20000240
 80050f8:	2000040c 	.word	0x2000040c
 80050fc:	200004d4 	.word	0x200004d4
 8005100:	42b40000 	.word	0x42b40000
 8005104:	20000224 	.word	0x20000224

08005108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800510c:	bf00      	nop
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr

08005114 <MPU6050_Init>:
uint8_t once=0;
uint8_t sonra=0;


void MPU6050_Init(uint8_t dev_addr)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af02      	add	r7, sp, #8
 800511a:	4603      	mov	r3, r0
 800511c:	71fb      	strb	r3, [r7, #7]


	gidecekler[0] = 0x07;
 800511e:	4b20      	ldr	r3, [pc, #128]	; (80051a0 <MPU6050_Init+0x8c>)
 8005120:	2207      	movs	r2, #7
 8005122:	701a      	strb	r2, [r3, #0]

	mpu6050_write(dev_addr,SMPLRT_DIV,(uint8_t*)&gidecekler,sizeof(gidecekler),200);
 8005124:	79fb      	ldrb	r3, [r7, #7]
 8005126:	b298      	uxth	r0, r3
 8005128:	23c8      	movs	r3, #200	; 0xc8
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	2301      	movs	r3, #1
 800512e:	4a1c      	ldr	r2, [pc, #112]	; (80051a0 <MPU6050_Init+0x8c>)
 8005130:	2119      	movs	r1, #25
 8005132:	f000 f837 	bl	80051a4 <mpu6050_write>

	gidecekler[0] = 0x01;
 8005136:	4b1a      	ldr	r3, [pc, #104]	; (80051a0 <MPU6050_Init+0x8c>)
 8005138:	2201      	movs	r2, #1
 800513a:	701a      	strb	r2, [r3, #0]

	mpu6050_write(dev_addr,PWR_MGMT_1,(uint8_t*)&gidecekler,sizeof(gidecekler),200);
 800513c:	79fb      	ldrb	r3, [r7, #7]
 800513e:	b298      	uxth	r0, r3
 8005140:	23c8      	movs	r3, #200	; 0xc8
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	2301      	movs	r3, #1
 8005146:	4a16      	ldr	r2, [pc, #88]	; (80051a0 <MPU6050_Init+0x8c>)
 8005148:	216b      	movs	r1, #107	; 0x6b
 800514a:	f000 f82b 	bl	80051a4 <mpu6050_write>

	gidecekler[0] = 0x00;
 800514e:	4b14      	ldr	r3, [pc, #80]	; (80051a0 <MPU6050_Init+0x8c>)
 8005150:	2200      	movs	r2, #0
 8005152:	701a      	strb	r2, [r3, #0]

	mpu6050_write(dev_addr,CONFIG,(uint8_t*)&gidecekler,sizeof(gidecekler),200);
 8005154:	79fb      	ldrb	r3, [r7, #7]
 8005156:	b298      	uxth	r0, r3
 8005158:	23c8      	movs	r3, #200	; 0xc8
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	2301      	movs	r3, #1
 800515e:	4a10      	ldr	r2, [pc, #64]	; (80051a0 <MPU6050_Init+0x8c>)
 8005160:	211a      	movs	r1, #26
 8005162:	f000 f81f 	bl	80051a4 <mpu6050_write>

	gidecekler[0] = 0x18;
 8005166:	4b0e      	ldr	r3, [pc, #56]	; (80051a0 <MPU6050_Init+0x8c>)
 8005168:	2218      	movs	r2, #24
 800516a:	701a      	strb	r2, [r3, #0]

	mpu6050_write(dev_addr,GYRO_CONFIG,(uint8_t*)&gidecekler,sizeof(gidecekler),200);
 800516c:	79fb      	ldrb	r3, [r7, #7]
 800516e:	b298      	uxth	r0, r3
 8005170:	23c8      	movs	r3, #200	; 0xc8
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	2301      	movs	r3, #1
 8005176:	4a0a      	ldr	r2, [pc, #40]	; (80051a0 <MPU6050_Init+0x8c>)
 8005178:	211b      	movs	r1, #27
 800517a:	f000 f813 	bl	80051a4 <mpu6050_write>

	gidecekler[0] = 0x01;
 800517e:	4b08      	ldr	r3, [pc, #32]	; (80051a0 <MPU6050_Init+0x8c>)
 8005180:	2201      	movs	r2, #1
 8005182:	701a      	strb	r2, [r3, #0]

	mpu6050_write(dev_addr,INT_ENABLE,(uint8_t*)&gidecekler,sizeof(gidecekler),200);
 8005184:	79fb      	ldrb	r3, [r7, #7]
 8005186:	b298      	uxth	r0, r3
 8005188:	23c8      	movs	r3, #200	; 0xc8
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	2301      	movs	r3, #1
 800518e:	4a04      	ldr	r2, [pc, #16]	; (80051a0 <MPU6050_Init+0x8c>)
 8005190:	2138      	movs	r1, #56	; 0x38
 8005192:	f000 f807 	bl	80051a4 <mpu6050_write>
	/*mpu6050_read(dev_addr,SMPLRT_DIV,(uint8_t*)&sonra,1,200);
	mpu6050_read(dev_addr,PWR_MGMT_1,(uint8_t*)&sonra,1,200);
	mpu6050_read(dev_addr,CONFIG,(uint8_t*)&sonra,1,200);
	mpu6050_read(dev_addr,GYRO_CONFIG,(uint8_t*)&sonra,1,200);
	mpu6050_read(dev_addr,INT_ENABLE,(uint8_t*)&sonra,1,200);*/
}
 8005196:	bf00      	nop
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	200004e0 	.word	0x200004e0

080051a4 <mpu6050_write>:

void mpu6050_write(uint16_t dev_addr,uint16_t reg_addr,uint8_t *data, uint16_t size, uint32_t timeout)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af04      	add	r7, sp, #16
 80051aa:	60ba      	str	r2, [r7, #8]
 80051ac:	461a      	mov	r2, r3
 80051ae:	4603      	mov	r3, r0
 80051b0:	81fb      	strh	r3, [r7, #14]
 80051b2:	460b      	mov	r3, r1
 80051b4:	81bb      	strh	r3, [r7, #12]
 80051b6:	4613      	mov	r3, r2
 80051b8:	80fb      	strh	r3, [r7, #6]
	//HAL_I2C_Master_Transmit(&hi2c1, dev_addr, data, size, timeout);
	HAL_I2C_Mem_Write(&hi2c1, dev_addr, reg_addr, 0x01, data, size, timeout);
 80051ba:	89ba      	ldrh	r2, [r7, #12]
 80051bc:	89f9      	ldrh	r1, [r7, #14]
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	9302      	str	r3, [sp, #8]
 80051c2:	88fb      	ldrh	r3, [r7, #6]
 80051c4:	9301      	str	r3, [sp, #4]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	2301      	movs	r3, #1
 80051cc:	4803      	ldr	r0, [pc, #12]	; (80051dc <mpu6050_write+0x38>)
 80051ce:	f7fc fc59 	bl	8001a84 <HAL_I2C_Mem_Write>

}
 80051d2:	bf00      	nop
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	20000284 	.word	0x20000284

080051e0 <mpu6050_read>:

void mpu6050_read(uint16_t dev_addr,uint16_t reg_addr,uint8_t *data, uint16_t size, uint32_t timeout)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af04      	add	r7, sp, #16
 80051e6:	60ba      	str	r2, [r7, #8]
 80051e8:	461a      	mov	r2, r3
 80051ea:	4603      	mov	r3, r0
 80051ec:	81fb      	strh	r3, [r7, #14]
 80051ee:	460b      	mov	r3, r1
 80051f0:	81bb      	strh	r3, [r7, #12]
 80051f2:	4613      	mov	r3, r2
 80051f4:	80fb      	strh	r3, [r7, #6]
	//HAL_I2C_Master_Transmit(&hi2c1, dev_addr,reg_addr, 1, timeout);

	HAL_I2C_Mem_Read(&hi2c1, dev_addr, reg_addr, 1, data, size, timeout);
 80051f6:	89ba      	ldrh	r2, [r7, #12]
 80051f8:	89f9      	ldrh	r1, [r7, #14]
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	9302      	str	r3, [sp, #8]
 80051fe:	88fb      	ldrh	r3, [r7, #6]
 8005200:	9301      	str	r3, [sp, #4]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	2301      	movs	r3, #1
 8005208:	4803      	ldr	r0, [pc, #12]	; (8005218 <mpu6050_read+0x38>)
 800520a:	f7fc fd35 	bl	8001c78 <HAL_I2C_Mem_Read>

}
 800520e:	bf00      	nop
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	20000284 	.word	0x20000284

0800521c <MPU6050_Task>:

void MPU6050_Task(uint8_t dev_addr)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	71fb      	strb	r3, [r7, #7]
	if(scan2Msec)
 8005226:	4b11      	ldr	r3, [pc, #68]	; (800526c <MPU6050_Task+0x50>)
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d01a      	beq.n	8005264 <MPU6050_Task+0x48>
	{


//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800522e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005232:	480f      	ldr	r0, [pc, #60]	; (8005270 <MPU6050_Task+0x54>)
 8005234:	f7fc fae6 	bl	8001804 <HAL_GPIO_TogglePin>

		mpu6050_Acc_X_Axis_Read(dev_addr);
 8005238:	79fb      	ldrb	r3, [r7, #7]
 800523a:	4618      	mov	r0, r3
 800523c:	f000 f81a 	bl	8005274 <mpu6050_Acc_X_Axis_Read>
		mpu6050_Acc_Y_Axis_Read(dev_addr);
 8005240:	79fb      	ldrb	r3, [r7, #7]
 8005242:	4618      	mov	r0, r3
 8005244:	f000 f87e 	bl	8005344 <mpu6050_Acc_Y_Axis_Read>
	    mpu6050_Acc_Z_Axis_Read(dev_addr);
 8005248:	79fb      	ldrb	r3, [r7, #7]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 f8e4 	bl	8005418 <mpu6050_Acc_Z_Axis_Read>


		//mpu6050_Gyr_X_Axis_Read(dev_addr);
		mpu6050_Gyr_Y_Axis_Read(dev_addr);
 8005250:	79fb      	ldrb	r3, [r7, #7]
 8005252:	4618      	mov	r0, r3
 8005254:	f000 f966 	bl	8005524 <mpu6050_Gyr_Y_Axis_Read>
		//mpu6050_Gyr_Z_Axis_Read(dev_addr);
	//	 mpu6050_Tmp_Read(dev_addr);


		 xang();
 8005258:	f000 f9b2 	bl	80055c0 <xang>
		 yang();
 800525c:	f000 fa14 	bl	8005688 <yang>

		 pitch_find();
 8005260:	f000 fa76 	bl	8005750 <pitch_find>
		mpu6050_read(dev_addr, CONFIG, (uint8_t*) &dizi[2], 1, 200);
		mpu6050_read(dev_addr, GYRO_CONFIG, (uint8_t*) &dizi[3], 1, 200);
		mpu6050_read(dev_addr, INT_ENABLE, (uint8_t*) &dizi[4], 1, 200);*/

	}
}
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	20000240 	.word	0x20000240
 8005270:	40011000 	.word	0x40011000

08005274 <mpu6050_Acc_X_Axis_Read>:
void mpu6050_Acc_X_Axis_Read(uint8_t dev_addr)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af02      	add	r7, sp, #8
 800527a:	4603      	mov	r3, r0
 800527c:	71fb      	strb	r3, [r7, #7]
	uint8_t readDataL;
	uint8_t readDataH;
	mpu6050_read(dev_addr, 0x3B, (uint8_t*) &readDataH, 1, 200);
 800527e:	79fb      	ldrb	r3, [r7, #7]
 8005280:	b298      	uxth	r0, r3
 8005282:	f107 020e 	add.w	r2, r7, #14
 8005286:	23c8      	movs	r3, #200	; 0xc8
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	2301      	movs	r3, #1
 800528c:	213b      	movs	r1, #59	; 0x3b
 800528e:	f7ff ffa7 	bl	80051e0 <mpu6050_read>
	mpu6050_read(dev_addr, 0x3C, (uint8_t*) &readDataL, 1, 200);
 8005292:	79fb      	ldrb	r3, [r7, #7]
 8005294:	b298      	uxth	r0, r3
 8005296:	f107 020f 	add.w	r2, r7, #15
 800529a:	23c8      	movs	r3, #200	; 0xc8
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	2301      	movs	r3, #1
 80052a0:	213c      	movs	r1, #60	; 0x3c
 80052a2:	f7ff ff9d 	bl	80051e0 <mpu6050_read>
	xAxisValue = (float)((int16_t) ((readDataH) << 8) | (int16_t) (readDataL));
 80052a6:	7bbb      	ldrb	r3, [r7, #14]
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	b21b      	sxth	r3, r3
 80052ac:	461a      	mov	r2, r3
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fb fcf2 	bl	8000c9c <__aeabi_i2f>
 80052b8:	4602      	mov	r2, r0
 80052ba:	4b1d      	ldr	r3, [pc, #116]	; (8005330 <mpu6050_Acc_X_Axis_Read+0xbc>)
 80052bc:	601a      	str	r2, [r3, #0]
	if (xAxisValue > 16384)
 80052be:	4b1c      	ldr	r3, [pc, #112]	; (8005330 <mpu6050_Acc_X_Axis_Read+0xbc>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fb fef8 	bl	80010bc <__aeabi_fcmpgt>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d004      	beq.n	80052dc <mpu6050_Acc_X_Axis_Read+0x68>
		xAxisValue = 16384;
 80052d2:	4b17      	ldr	r3, [pc, #92]	; (8005330 <mpu6050_Acc_X_Axis_Read+0xbc>)
 80052d4:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	e00b      	b.n	80052f4 <mpu6050_Acc_X_Axis_Read+0x80>
	else if (xAxisValue < -16384)
 80052dc:	4b14      	ldr	r3, [pc, #80]	; (8005330 <mpu6050_Acc_X_Axis_Read+0xbc>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4914      	ldr	r1, [pc, #80]	; (8005334 <mpu6050_Acc_X_Axis_Read+0xc0>)
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fb fecc 	bl	8001080 <__aeabi_fcmplt>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <mpu6050_Acc_X_Axis_Read+0x80>
		xAxisValue = -16384;
 80052ee:	4b10      	ldr	r3, [pc, #64]	; (8005330 <mpu6050_Acc_X_Axis_Read+0xbc>)
 80052f0:	4a10      	ldr	r2, [pc, #64]	; (8005334 <mpu6050_Acc_X_Axis_Read+0xc0>)
 80052f2:	601a      	str	r2, [r3, #0]

	xAxisValue=xAxisValue/16384;
 80052f4:	4b0e      	ldr	r3, [pc, #56]	; (8005330 <mpu6050_Acc_X_Axis_Read+0xbc>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fb fdd5 	bl	8000eac <__aeabi_fdiv>
 8005302:	4603      	mov	r3, r0
 8005304:	461a      	mov	r2, r3
 8005306:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <mpu6050_Acc_X_Axis_Read+0xbc>)
 8005308:	601a      	str	r2, [r3, #0]
	//xAxisValue = (xAxisValue * (uint16_t) 90) / (uint16_t) 16384;

	xAxisValue=medianFilterAppend(xAxisValue_eski,xAxisValue, 0.3,0.6); //saniyede en fazla 30 derece değişim olabileceği kabul edildi.
 800530a:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <mpu6050_Acc_X_Axis_Read+0xc4>)
 800530c:	6818      	ldr	r0, [r3, #0]
 800530e:	4b08      	ldr	r3, [pc, #32]	; (8005330 <mpu6050_Acc_X_Axis_Read+0xbc>)
 8005310:	6819      	ldr	r1, [r3, #0]
 8005312:	4b0a      	ldr	r3, [pc, #40]	; (800533c <mpu6050_Acc_X_Axis_Read+0xc8>)
 8005314:	4a0a      	ldr	r2, [pc, #40]	; (8005340 <mpu6050_Acc_X_Axis_Read+0xcc>)
 8005316:	f7ff f9c5 	bl	80046a4 <medianFilterAppend>
 800531a:	4602      	mov	r2, r0
 800531c:	4b04      	ldr	r3, [pc, #16]	; (8005330 <mpu6050_Acc_X_Axis_Read+0xbc>)
 800531e:	601a      	str	r2, [r3, #0]
	xAxisValue_eski=xAxisValue;
 8005320:	4b03      	ldr	r3, [pc, #12]	; (8005330 <mpu6050_Acc_X_Axis_Read+0xbc>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a04      	ldr	r2, [pc, #16]	; (8005338 <mpu6050_Acc_X_Axis_Read+0xc4>)
 8005326:	6013      	str	r3, [r2, #0]

}
 8005328:	bf00      	nop
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	200004d0 	.word	0x200004d0
 8005334:	c6800000 	.word	0xc6800000
 8005338:	200004c8 	.word	0x200004c8
 800533c:	3f19999a 	.word	0x3f19999a
 8005340:	3e99999a 	.word	0x3e99999a

08005344 <mpu6050_Acc_Y_Axis_Read>:
void mpu6050_Acc_Y_Axis_Read(uint8_t dev_addr) {
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af02      	add	r7, sp, #8
 800534a:	4603      	mov	r3, r0
 800534c:	71fb      	strb	r3, [r7, #7]
	uint8_t readDataL;
	uint8_t readDataH;
	mpu6050_read(dev_addr, 0x3D, (uint8_t*) &readDataH, 1, 200);
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	b298      	uxth	r0, r3
 8005352:	f107 020e 	add.w	r2, r7, #14
 8005356:	23c8      	movs	r3, #200	; 0xc8
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	2301      	movs	r3, #1
 800535c:	213d      	movs	r1, #61	; 0x3d
 800535e:	f7ff ff3f 	bl	80051e0 <mpu6050_read>
	mpu6050_read(dev_addr, 0x3E, (uint8_t*) &readDataL, 1, 200);
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	b298      	uxth	r0, r3
 8005366:	f107 020f 	add.w	r2, r7, #15
 800536a:	23c8      	movs	r3, #200	; 0xc8
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	2301      	movs	r3, #1
 8005370:	213e      	movs	r1, #62	; 0x3e
 8005372:	f7ff ff35 	bl	80051e0 <mpu6050_read>
	yAxisValue = (float)((int16_t) ((readDataH) << 8) | (int16_t) (readDataL));
 8005376:	7bbb      	ldrb	r3, [r7, #14]
 8005378:	021b      	lsls	r3, r3, #8
 800537a:	b21b      	sxth	r3, r3
 800537c:	461a      	mov	r2, r3
 800537e:	7bfb      	ldrb	r3, [r7, #15]
 8005380:	4313      	orrs	r3, r2
 8005382:	4618      	mov	r0, r3
 8005384:	f7fb fc8a 	bl	8000c9c <__aeabi_i2f>
 8005388:	4602      	mov	r2, r0
 800538a:	4b1d      	ldr	r3, [pc, #116]	; (8005400 <mpu6050_Acc_Y_Axis_Read+0xbc>)
 800538c:	601a      	str	r2, [r3, #0]
	if (yAxisValue > 16384)
 800538e:	4b1c      	ldr	r3, [pc, #112]	; (8005400 <mpu6050_Acc_Y_Axis_Read+0xbc>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8005396:	4618      	mov	r0, r3
 8005398:	f7fb fe90 	bl	80010bc <__aeabi_fcmpgt>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d004      	beq.n	80053ac <mpu6050_Acc_Y_Axis_Read+0x68>
		yAxisValue = 16384;
 80053a2:	4b17      	ldr	r3, [pc, #92]	; (8005400 <mpu6050_Acc_Y_Axis_Read+0xbc>)
 80053a4:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	e00b      	b.n	80053c4 <mpu6050_Acc_Y_Axis_Read+0x80>
	else if (yAxisValue < -16384)
 80053ac:	4b14      	ldr	r3, [pc, #80]	; (8005400 <mpu6050_Acc_Y_Axis_Read+0xbc>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4914      	ldr	r1, [pc, #80]	; (8005404 <mpu6050_Acc_Y_Axis_Read+0xc0>)
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fb fe64 	bl	8001080 <__aeabi_fcmplt>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <mpu6050_Acc_Y_Axis_Read+0x80>
		yAxisValue = -16384;
 80053be:	4b10      	ldr	r3, [pc, #64]	; (8005400 <mpu6050_Acc_Y_Axis_Read+0xbc>)
 80053c0:	4a10      	ldr	r2, [pc, #64]	; (8005404 <mpu6050_Acc_Y_Axis_Read+0xc0>)
 80053c2:	601a      	str	r2, [r3, #0]

	yAxisValue=yAxisValue/16384;
 80053c4:	4b0e      	ldr	r3, [pc, #56]	; (8005400 <mpu6050_Acc_Y_Axis_Read+0xbc>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fb fd6d 	bl	8000eac <__aeabi_fdiv>
 80053d2:	4603      	mov	r3, r0
 80053d4:	461a      	mov	r2, r3
 80053d6:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <mpu6050_Acc_Y_Axis_Read+0xbc>)
 80053d8:	601a      	str	r2, [r3, #0]

	yAxisValue=medianFilterAppend(yAxisValue_eski,yAxisValue, 0.3,0.6); //1 msaniyede en fazla 30 derece değişim olabileceği kabul edildi.
 80053da:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <mpu6050_Acc_Y_Axis_Read+0xc4>)
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	4b08      	ldr	r3, [pc, #32]	; (8005400 <mpu6050_Acc_Y_Axis_Read+0xbc>)
 80053e0:	6819      	ldr	r1, [r3, #0]
 80053e2:	4b0a      	ldr	r3, [pc, #40]	; (800540c <mpu6050_Acc_Y_Axis_Read+0xc8>)
 80053e4:	4a0a      	ldr	r2, [pc, #40]	; (8005410 <mpu6050_Acc_Y_Axis_Read+0xcc>)
 80053e6:	f7ff f95d 	bl	80046a4 <medianFilterAppend>
 80053ea:	4602      	mov	r2, r0
 80053ec:	4b04      	ldr	r3, [pc, #16]	; (8005400 <mpu6050_Acc_Y_Axis_Read+0xbc>)
 80053ee:	601a      	str	r2, [r3, #0]
	yAxisValue_eski=yAxisValue;
 80053f0:	4b03      	ldr	r3, [pc, #12]	; (8005400 <mpu6050_Acc_Y_Axis_Read+0xbc>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a04      	ldr	r2, [pc, #16]	; (8005408 <mpu6050_Acc_Y_Axis_Read+0xc4>)
 80053f6:	6013      	str	r3, [r2, #0]
	//yAxisValue = (yAxisValue * (uint16_t) 90) / (uint16_t) 16384;
}
 80053f8:	bf00      	nop
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	200004ac 	.word	0x200004ac
 8005404:	c6800000 	.word	0xc6800000
 8005408:	200004a0 	.word	0x200004a0
 800540c:	3f19999a 	.word	0x3f19999a
 8005410:	3e99999a 	.word	0x3e99999a
 8005414:	00000000 	.word	0x00000000

08005418 <mpu6050_Acc_Z_Axis_Read>:
void mpu6050_Acc_Z_Axis_Read(uint8_t dev_addr) {
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af02      	add	r7, sp, #8
 800541e:	4603      	mov	r3, r0
 8005420:	71fb      	strb	r3, [r7, #7]
	int8_t readDataL;
	int8_t readDataH;
	mpu6050_read(dev_addr, 0x3F, (uint8_t*) &readDataH, 1, 200);
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	b298      	uxth	r0, r3
 8005426:	f107 020e 	add.w	r2, r7, #14
 800542a:	23c8      	movs	r3, #200	; 0xc8
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	2301      	movs	r3, #1
 8005430:	213f      	movs	r1, #63	; 0x3f
 8005432:	f7ff fed5 	bl	80051e0 <mpu6050_read>
	mpu6050_read(dev_addr, 0x40, (uint8_t*) &readDataL, 1, 200);
 8005436:	79fb      	ldrb	r3, [r7, #7]
 8005438:	b298      	uxth	r0, r3
 800543a:	f107 020f 	add.w	r2, r7, #15
 800543e:	23c8      	movs	r3, #200	; 0xc8
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	2301      	movs	r3, #1
 8005444:	2140      	movs	r1, #64	; 0x40
 8005446:	f7ff fecb 	bl	80051e0 <mpu6050_read>
	zAxisValue = (float)((int16_t) ((readDataH) << 8) | (int16_t) (readDataL));
 800544a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800544e:	021b      	lsls	r3, r3, #8
 8005450:	b21b      	sxth	r3, r3
 8005452:	461a      	mov	r2, r3
 8005454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005458:	4313      	orrs	r3, r2
 800545a:	4618      	mov	r0, r3
 800545c:	f7fb fc1e 	bl	8000c9c <__aeabi_i2f>
 8005460:	4602      	mov	r2, r0
 8005462:	4b2b      	ldr	r3, [pc, #172]	; (8005510 <mpu6050_Acc_Z_Axis_Read+0xf8>)
 8005464:	601a      	str	r2, [r3, #0]
	if (zAxisValue > 16384)
 8005466:	4b2a      	ldr	r3, [pc, #168]	; (8005510 <mpu6050_Acc_Z_Axis_Read+0xf8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 800546e:	4618      	mov	r0, r3
 8005470:	f7fb fe24 	bl	80010bc <__aeabi_fcmpgt>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d004      	beq.n	8005484 <mpu6050_Acc_Z_Axis_Read+0x6c>
		zAxisValue = 16384;
 800547a:	4b25      	ldr	r3, [pc, #148]	; (8005510 <mpu6050_Acc_Z_Axis_Read+0xf8>)
 800547c:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	e00b      	b.n	800549c <mpu6050_Acc_Z_Axis_Read+0x84>
	else if (zAxisValue < -16384)
 8005484:	4b22      	ldr	r3, [pc, #136]	; (8005510 <mpu6050_Acc_Z_Axis_Read+0xf8>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4922      	ldr	r1, [pc, #136]	; (8005514 <mpu6050_Acc_Z_Axis_Read+0xfc>)
 800548a:	4618      	mov	r0, r3
 800548c:	f7fb fdf8 	bl	8001080 <__aeabi_fcmplt>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <mpu6050_Acc_Z_Axis_Read+0x84>
		zAxisValue = -16384;
 8005496:	4b1e      	ldr	r3, [pc, #120]	; (8005510 <mpu6050_Acc_Z_Axis_Read+0xf8>)
 8005498:	4a1e      	ldr	r2, [pc, #120]	; (8005514 <mpu6050_Acc_Z_Axis_Read+0xfc>)
 800549a:	601a      	str	r2, [r3, #0]

	zAxisValue=zAxisValue/16384;
 800549c:	4b1c      	ldr	r3, [pc, #112]	; (8005510 <mpu6050_Acc_Z_Axis_Read+0xf8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fb fd01 	bl	8000eac <__aeabi_fdiv>
 80054aa:	4603      	mov	r3, r0
 80054ac:	461a      	mov	r2, r3
 80054ae:	4b18      	ldr	r3, [pc, #96]	; (8005510 <mpu6050_Acc_Z_Axis_Read+0xf8>)
 80054b0:	601a      	str	r2, [r3, #0]

	if(zAxisValue<0.01)
 80054b2:	4b17      	ldr	r3, [pc, #92]	; (8005510 <mpu6050_Acc_Z_Axis_Read+0xf8>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fa ffb6 	bl	8000428 <__aeabi_f2d>
 80054bc:	a312      	add	r3, pc, #72	; (adr r3, 8005508 <mpu6050_Acc_Z_Axis_Read+0xf0>)
 80054be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c2:	f7fb fa7b 	bl	80009bc <__aeabi_dcmplt>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <mpu6050_Acc_Z_Axis_Read+0xbc>
		zAxisValue=zAxisValue_eski;
 80054cc:	4b12      	ldr	r3, [pc, #72]	; (8005518 <mpu6050_Acc_Z_Axis_Read+0x100>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a0f      	ldr	r2, [pc, #60]	; (8005510 <mpu6050_Acc_Z_Axis_Read+0xf8>)
 80054d2:	6013      	str	r3, [r2, #0]

	zAxisValue_eski=zAxisValue;
 80054d4:	4b0e      	ldr	r3, [pc, #56]	; (8005510 <mpu6050_Acc_Z_Axis_Read+0xf8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a0f      	ldr	r2, [pc, #60]	; (8005518 <mpu6050_Acc_Z_Axis_Read+0x100>)
 80054da:	6013      	str	r3, [r2, #0]

	zAxisValue=medianFilterAppend(zAxisValue_eski,zAxisValue, 0.3,0.6); //en fazla 30 derece değişim olabileceği kabul edildi.
 80054dc:	4b0e      	ldr	r3, [pc, #56]	; (8005518 <mpu6050_Acc_Z_Axis_Read+0x100>)
 80054de:	6818      	ldr	r0, [r3, #0]
 80054e0:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <mpu6050_Acc_Z_Axis_Read+0xf8>)
 80054e2:	6819      	ldr	r1, [r3, #0]
 80054e4:	4b0d      	ldr	r3, [pc, #52]	; (800551c <mpu6050_Acc_Z_Axis_Read+0x104>)
 80054e6:	4a0e      	ldr	r2, [pc, #56]	; (8005520 <mpu6050_Acc_Z_Axis_Read+0x108>)
 80054e8:	f7ff f8dc 	bl	80046a4 <medianFilterAppend>
 80054ec:	4602      	mov	r2, r0
 80054ee:	4b08      	ldr	r3, [pc, #32]	; (8005510 <mpu6050_Acc_Z_Axis_Read+0xf8>)
 80054f0:	601a      	str	r2, [r3, #0]
	zAxisValue_eski=zAxisValue;
 80054f2:	4b07      	ldr	r3, [pc, #28]	; (8005510 <mpu6050_Acc_Z_Axis_Read+0xf8>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a08      	ldr	r2, [pc, #32]	; (8005518 <mpu6050_Acc_Z_Axis_Read+0x100>)
 80054f8:	6013      	str	r3, [r2, #0]
	//zAxisValue = (zAxisValue * (uint16_t) 90) / (uint16_t) 16384;
}
 80054fa:	bf00      	nop
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	f3af 8000 	nop.w
 8005508:	47ae147b 	.word	0x47ae147b
 800550c:	3f847ae1 	.word	0x3f847ae1
 8005510:	200004bc 	.word	0x200004bc
 8005514:	c6800000 	.word	0xc6800000
 8005518:	200004dc 	.word	0x200004dc
 800551c:	3f19999a 	.word	0x3f19999a
 8005520:	3e99999a 	.word	0x3e99999a

08005524 <mpu6050_Gyr_Y_Axis_Read>:
	mpu6050_read(dev_addr,0x44,(uint8_t*)&readDataL,1,200);
	xGyroValue = (int16_t)(readDataH) << 8 | (int16_t)(readDataL);
	xGyroValue = xGyroValue / (uint16_t) 131;
}
void mpu6050_Gyr_Y_Axis_Read(uint8_t dev_addr)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af02      	add	r7, sp, #8
 800552a:	4603      	mov	r3, r0
 800552c:	71fb      	strb	r3, [r7, #7]
	int8_t readDataL;
	int8_t readDataH;
	mpu6050_read(dev_addr,0x45,(uint8_t*)&readDataH,1,200);
 800552e:	79fb      	ldrb	r3, [r7, #7]
 8005530:	b298      	uxth	r0, r3
 8005532:	f107 020e 	add.w	r2, r7, #14
 8005536:	23c8      	movs	r3, #200	; 0xc8
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	2301      	movs	r3, #1
 800553c:	2145      	movs	r1, #69	; 0x45
 800553e:	f7ff fe4f 	bl	80051e0 <mpu6050_read>
	mpu6050_read(dev_addr,0x46,(uint8_t*)&readDataL,1,200);
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	b298      	uxth	r0, r3
 8005546:	f107 020f 	add.w	r2, r7, #15
 800554a:	23c8      	movs	r3, #200	; 0xc8
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	2301      	movs	r3, #1
 8005550:	2146      	movs	r1, #70	; 0x46
 8005552:	f7ff fe45 	bl	80051e0 <mpu6050_read>
	yGyroValue = (float) ( (int16_t)((readDataH) << 8) | (int16_t)(readDataL));
 8005556:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800555a:	021b      	lsls	r3, r3, #8
 800555c:	b21b      	sxth	r3, r3
 800555e:	461a      	mov	r2, r3
 8005560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005564:	4313      	orrs	r3, r2
 8005566:	4618      	mov	r0, r3
 8005568:	f7fb fb98 	bl	8000c9c <__aeabi_i2f>
 800556c:	4602      	mov	r2, r0
 800556e:	4b10      	ldr	r3, [pc, #64]	; (80055b0 <mpu6050_Gyr_Y_Axis_Read+0x8c>)
 8005570:	601a      	str	r2, [r3, #0]
	yGyroValue = (float)yGyroValue / (float)131;
 8005572:	4b0f      	ldr	r3, [pc, #60]	; (80055b0 <mpu6050_Gyr_Y_Axis_Read+0x8c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	490f      	ldr	r1, [pc, #60]	; (80055b4 <mpu6050_Gyr_Y_Axis_Read+0x90>)
 8005578:	4618      	mov	r0, r3
 800557a:	f7fb fc97 	bl	8000eac <__aeabi_fdiv>
 800557e:	4603      	mov	r3, r0
 8005580:	461a      	mov	r2, r3
 8005582:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <mpu6050_Gyr_Y_Axis_Read+0x8c>)
 8005584:	601a      	str	r2, [r3, #0]

	yGyroValue=medianFilterAppend(yGyroValue_eski,yGyroValue, 0.3 ,0.25); //saniyede en fazla 30 derece değişim olabileceği kabul edildi.
 8005586:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <mpu6050_Gyr_Y_Axis_Read+0x94>)
 8005588:	6818      	ldr	r0, [r3, #0]
 800558a:	4b09      	ldr	r3, [pc, #36]	; (80055b0 <mpu6050_Gyr_Y_Axis_Read+0x8c>)
 800558c:	6819      	ldr	r1, [r3, #0]
 800558e:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8005592:	4a0a      	ldr	r2, [pc, #40]	; (80055bc <mpu6050_Gyr_Y_Axis_Read+0x98>)
 8005594:	f7ff f886 	bl	80046a4 <medianFilterAppend>
 8005598:	4602      	mov	r2, r0
 800559a:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <mpu6050_Gyr_Y_Axis_Read+0x8c>)
 800559c:	601a      	str	r2, [r3, #0]
    yGyroValue_eski=yGyroValue;
 800559e:	4b04      	ldr	r3, [pc, #16]	; (80055b0 <mpu6050_Gyr_Y_Axis_Read+0x8c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a05      	ldr	r2, [pc, #20]	; (80055b8 <mpu6050_Gyr_Y_Axis_Read+0x94>)
 80055a4:	6013      	str	r3, [r2, #0]


}
 80055a6:	bf00      	nop
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	200004a4 	.word	0x200004a4
 80055b4:	43030000 	.word	0x43030000
 80055b8:	200004c4 	.word	0x200004c4
 80055bc:	3e99999a 	.word	0x3e99999a

080055c0 <xang>:
	zGyroValue = zGyroValue / (uint16_t) 131;
}

void xang(void)

{
 80055c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80055c4:	af00      	add	r7, sp, #0
	x_ang=atan(yAxisValue/(sqrt(pow(xAxisValue,2)+pow(zAxisValue,2))))*57296/1000;
 80055c6:	4b2a      	ldr	r3, [pc, #168]	; (8005670 <xang+0xb0>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fa ff2c 	bl	8000428 <__aeabi_f2d>
 80055d0:	4604      	mov	r4, r0
 80055d2:	460d      	mov	r5, r1
 80055d4:	4b27      	ldr	r3, [pc, #156]	; (8005674 <xang+0xb4>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fa ff25 	bl	8000428 <__aeabi_f2d>
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055e6:	f002 fd77 	bl	80080d8 <pow>
 80055ea:	4680      	mov	r8, r0
 80055ec:	4689      	mov	r9, r1
 80055ee:	4b22      	ldr	r3, [pc, #136]	; (8005678 <xang+0xb8>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fa ff18 	bl	8000428 <__aeabi_f2d>
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005600:	f002 fd6a 	bl	80080d8 <pow>
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	4640      	mov	r0, r8
 800560a:	4649      	mov	r1, r9
 800560c:	f7fa fdae 	bl	800016c <__adddf3>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4610      	mov	r0, r2
 8005616:	4619      	mov	r1, r3
 8005618:	f002 feba 	bl	8008390 <sqrt>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4620      	mov	r0, r4
 8005622:	4629      	mov	r1, r5
 8005624:	f7fb f882 	bl	800072c <__aeabi_ddiv>
 8005628:	4603      	mov	r3, r0
 800562a:	460c      	mov	r4, r1
 800562c:	4618      	mov	r0, r3
 800562e:	4621      	mov	r1, r4
 8005630:	f002 fb7e 	bl	8007d30 <atan>
 8005634:	a30c      	add	r3, pc, #48	; (adr r3, 8005668 <xang+0xa8>)
 8005636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563a:	f7fa ff4d 	bl	80004d8 <__aeabi_dmul>
 800563e:	4603      	mov	r3, r0
 8005640:	460c      	mov	r4, r1
 8005642:	4618      	mov	r0, r3
 8005644:	4621      	mov	r1, r4
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	4b0c      	ldr	r3, [pc, #48]	; (800567c <xang+0xbc>)
 800564c:	f7fb f86e 	bl	800072c <__aeabi_ddiv>
 8005650:	4603      	mov	r3, r0
 8005652:	460c      	mov	r4, r1
 8005654:	4618      	mov	r0, r3
 8005656:	4621      	mov	r1, r4
 8005658:	f7fb fa16 	bl	8000a88 <__aeabi_d2f>
 800565c:	4602      	mov	r2, r0
 800565e:	4b08      	ldr	r3, [pc, #32]	; (8005680 <xang+0xc0>)
 8005660:	601a      	str	r2, [r3, #0]

	//x_ang=medianFilterAppend(x_ang_eski,x_ang, 0.3,20);
	//x_ang_eski=x_ang;
}
 8005662:	bf00      	nop
 8005664:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005668:	00000000 	.word	0x00000000
 800566c:	40ebfa00 	.word	0x40ebfa00
 8005670:	200004ac 	.word	0x200004ac
 8005674:	200004d0 	.word	0x200004d0
 8005678:	200004bc 	.word	0x200004bc
 800567c:	408f4000 	.word	0x408f4000
 8005680:	200004c0 	.word	0x200004c0
 8005684:	00000000 	.word	0x00000000

08005688 <yang>:

void yang(void)
{
 8005688:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800568c:	af00      	add	r7, sp, #0
	y_ang=atan(xAxisValue/(sqrt(pow(yAxisValue,2)+pow(zAxisValue,2))))*57296/1000;
 800568e:	4b2a      	ldr	r3, [pc, #168]	; (8005738 <yang+0xb0>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f7fa fec8 	bl	8000428 <__aeabi_f2d>
 8005698:	4604      	mov	r4, r0
 800569a:	460d      	mov	r5, r1
 800569c:	4b27      	ldr	r3, [pc, #156]	; (800573c <yang+0xb4>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fa fec1 	bl	8000428 <__aeabi_f2d>
 80056a6:	f04f 0200 	mov.w	r2, #0
 80056aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056ae:	f002 fd13 	bl	80080d8 <pow>
 80056b2:	4680      	mov	r8, r0
 80056b4:	4689      	mov	r9, r1
 80056b6:	4b22      	ldr	r3, [pc, #136]	; (8005740 <yang+0xb8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fa feb4 	bl	8000428 <__aeabi_f2d>
 80056c0:	f04f 0200 	mov.w	r2, #0
 80056c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056c8:	f002 fd06 	bl	80080d8 <pow>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4640      	mov	r0, r8
 80056d2:	4649      	mov	r1, r9
 80056d4:	f7fa fd4a 	bl	800016c <__adddf3>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4610      	mov	r0, r2
 80056de:	4619      	mov	r1, r3
 80056e0:	f002 fe56 	bl	8008390 <sqrt>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4620      	mov	r0, r4
 80056ea:	4629      	mov	r1, r5
 80056ec:	f7fb f81e 	bl	800072c <__aeabi_ddiv>
 80056f0:	4603      	mov	r3, r0
 80056f2:	460c      	mov	r4, r1
 80056f4:	4618      	mov	r0, r3
 80056f6:	4621      	mov	r1, r4
 80056f8:	f002 fb1a 	bl	8007d30 <atan>
 80056fc:	a30c      	add	r3, pc, #48	; (adr r3, 8005730 <yang+0xa8>)
 80056fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005702:	f7fa fee9 	bl	80004d8 <__aeabi_dmul>
 8005706:	4603      	mov	r3, r0
 8005708:	460c      	mov	r4, r1
 800570a:	4618      	mov	r0, r3
 800570c:	4621      	mov	r1, r4
 800570e:	f04f 0200 	mov.w	r2, #0
 8005712:	4b0c      	ldr	r3, [pc, #48]	; (8005744 <yang+0xbc>)
 8005714:	f7fb f80a 	bl	800072c <__aeabi_ddiv>
 8005718:	4603      	mov	r3, r0
 800571a:	460c      	mov	r4, r1
 800571c:	4618      	mov	r0, r3
 800571e:	4621      	mov	r1, r4
 8005720:	f7fb f9b2 	bl	8000a88 <__aeabi_d2f>
 8005724:	4602      	mov	r2, r0
 8005726:	4b08      	ldr	r3, [pc, #32]	; (8005748 <yang+0xc0>)
 8005728:	601a      	str	r2, [r3, #0]

	//y_ang=medianFilterAppend(y_ang_eski,y_ang, 0.3,20);
	//y_ang_eski=y_ang;
}
 800572a:	bf00      	nop
 800572c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005730:	00000000 	.word	0x00000000
 8005734:	40ebfa00 	.word	0x40ebfa00
 8005738:	200004d0 	.word	0x200004d0
 800573c:	200004ac 	.word	0x200004ac
 8005740:	200004bc 	.word	0x200004bc
 8005744:	408f4000 	.word	0x408f4000
 8005748:	200004b8 	.word	0x200004b8
 800574c:	00000000 	.word	0x00000000

08005750 <pitch_find>:

void pitch_find(void)
{
 8005750:	b5b0      	push	{r4, r5, r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
	int8_t ara_deger=0;
 8005756:	2300      	movs	r3, #0
 8005758:	71fb      	strb	r3, [r7, #7]

	pitch=pitch+yGyroValue*0.002;   /// okuma zamanına göre burası da değişecek.*************************
 800575a:	4b35      	ldr	r3, [pc, #212]	; (8005830 <pitch_find+0xe0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4618      	mov	r0, r3
 8005760:	f7fa fe62 	bl	8000428 <__aeabi_f2d>
 8005764:	4604      	mov	r4, r0
 8005766:	460d      	mov	r5, r1
 8005768:	4b32      	ldr	r3, [pc, #200]	; (8005834 <pitch_find+0xe4>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4618      	mov	r0, r3
 800576e:	f7fa fe5b 	bl	8000428 <__aeabi_f2d>
 8005772:	a32d      	add	r3, pc, #180	; (adr r3, 8005828 <pitch_find+0xd8>)
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	f7fa feae 	bl	80004d8 <__aeabi_dmul>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	4620      	mov	r0, r4
 8005782:	4629      	mov	r1, r5
 8005784:	f7fa fcf2 	bl	800016c <__adddf3>
 8005788:	4603      	mov	r3, r0
 800578a:	460c      	mov	r4, r1
 800578c:	4618      	mov	r0, r3
 800578e:	4621      	mov	r1, r4
 8005790:	f7fb f97a 	bl	8000a88 <__aeabi_d2f>
 8005794:	4602      	mov	r2, r0
 8005796:	4b26      	ldr	r3, [pc, #152]	; (8005830 <pitch_find+0xe0>)
 8005798:	601a      	str	r2, [r3, #0]

	pitch=0.5*(pitch)+0.5*(y_ang);
 800579a:	4b25      	ldr	r3, [pc, #148]	; (8005830 <pitch_find+0xe0>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fa fe42 	bl	8000428 <__aeabi_f2d>
 80057a4:	f04f 0200 	mov.w	r2, #0
 80057a8:	4b23      	ldr	r3, [pc, #140]	; (8005838 <pitch_find+0xe8>)
 80057aa:	f7fa fe95 	bl	80004d8 <__aeabi_dmul>
 80057ae:	4603      	mov	r3, r0
 80057b0:	460c      	mov	r4, r1
 80057b2:	4625      	mov	r5, r4
 80057b4:	461c      	mov	r4, r3
 80057b6:	4b21      	ldr	r3, [pc, #132]	; (800583c <pitch_find+0xec>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fa fe34 	bl	8000428 <__aeabi_f2d>
 80057c0:	f04f 0200 	mov.w	r2, #0
 80057c4:	4b1c      	ldr	r3, [pc, #112]	; (8005838 <pitch_find+0xe8>)
 80057c6:	f7fa fe87 	bl	80004d8 <__aeabi_dmul>
 80057ca:	4602      	mov	r2, r0
 80057cc:	460b      	mov	r3, r1
 80057ce:	4620      	mov	r0, r4
 80057d0:	4629      	mov	r1, r5
 80057d2:	f7fa fccb 	bl	800016c <__adddf3>
 80057d6:	4603      	mov	r3, r0
 80057d8:	460c      	mov	r4, r1
 80057da:	4618      	mov	r0, r3
 80057dc:	4621      	mov	r1, r4
 80057de:	f7fb f953 	bl	8000a88 <__aeabi_d2f>
 80057e2:	4602      	mov	r2, r0
 80057e4:	4b12      	ldr	r3, [pc, #72]	; (8005830 <pitch_find+0xe0>)
 80057e6:	601a      	str	r2, [r3, #0]
	{
		pitch = 0;
	}*/
   // pitch=pitch/5;

    ara_deger=round(pitch);
 80057e8:	4b11      	ldr	r3, [pc, #68]	; (8005830 <pitch_find+0xe0>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fa fe1b 	bl	8000428 <__aeabi_f2d>
 80057f2:	4603      	mov	r3, r0
 80057f4:	460c      	mov	r4, r1
 80057f6:	4618      	mov	r0, r3
 80057f8:	4621      	mov	r1, r4
 80057fa:	f002 fc27 	bl	800804c <round>
 80057fe:	4603      	mov	r3, r0
 8005800:	460c      	mov	r4, r1
 8005802:	4618      	mov	r0, r3
 8005804:	4621      	mov	r1, r4
 8005806:	f7fb f917 	bl	8000a38 <__aeabi_d2iz>
 800580a:	4603      	mov	r3, r0
 800580c:	71fb      	strb	r3, [r7, #7]

    pitch=(float)ara_deger;
 800580e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005812:	4618      	mov	r0, r3
 8005814:	f7fb fa42 	bl	8000c9c <__aeabi_i2f>
 8005818:	4602      	mov	r2, r0
 800581a:	4b05      	ldr	r3, [pc, #20]	; (8005830 <pitch_find+0xe0>)
 800581c:	601a      	str	r2, [r3, #0]



    //pitch=y_ang-1.5;

}
 800581e:	bf00      	nop
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bdb0      	pop	{r4, r5, r7, pc}
 8005826:	bf00      	nop
 8005828:	d2f1a9fc 	.word	0xd2f1a9fc
 800582c:	3f60624d 	.word	0x3f60624d
 8005830:	200004d4 	.word	0x200004d4
 8005834:	200004a4 	.word	0x200004a4
 8005838:	3fe00000 	.word	0x3fe00000
 800583c:	200004b8 	.word	0x200004b8

08005840 <_fabs>:
void pid_load_value(PID * device, float setValue);

float _fabs(float value);

float _fabs(float value)
{
 8005840:	b590      	push	{r4, r7, lr}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
    if(value < 0)
 8005848:	f04f 0100 	mov.w	r1, #0
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7fb fc17 	bl	8001080 <__aeabi_fcmplt>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00c      	beq.n	8005872 <_fabs+0x32>
    {
        return (-1.0*value);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7fa fde5 	bl	8000428 <__aeabi_f2d>
 800585e:	4603      	mov	r3, r0
 8005860:	460c      	mov	r4, r1
 8005862:	4618      	mov	r0, r3
 8005864:	4621      	mov	r1, r4
 8005866:	f7fb f90f 	bl	8000a88 <__aeabi_d2f>
 800586a:	4603      	mov	r3, r0
 800586c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005870:	e000      	b.n	8005874 <_fabs+0x34>
    }
    else
    {
        return (value);
 8005872:	687b      	ldr	r3, [r7, #4]
    }
}
 8005874:	4618      	mov	r0, r3
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	bd90      	pop	{r4, r7, pc}

0800587c <pid_reset>:

void pid_reset(PID * device)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
	device->previousError = 0.0;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	631a      	str	r2, [r3, #48]	; 0x30
	device->error = 0.0;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f04f 0200 	mov.w	r2, #0
 8005892:	639a      	str	r2, [r3, #56]	; 0x38
	device->integral = device->INTEGRAL_INITIAL_VALUE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	699a      	ldr	r2, [r3, #24]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	635a      	str	r2, [r3, #52]	; 0x34
	device->setValue = 0.0;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	62da      	str	r2, [r3, #44]	; 0x2c
	device->feedbackValue = 0.0;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f04f 0200 	mov.w	r2, #0
 80058aa:	629a      	str	r2, [r3, #40]	; 0x28
	device->output = 0.0;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f04f 0200 	mov.w	r2, #0
 80058b2:	641a      	str	r2, [r3, #64]	; 0x40
	device->derivative = 0.0;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f04f 0200 	mov.w	r2, #0
 80058ba:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bc80      	pop	{r7}
 80058c4:	4770      	bx	lr
	...

080058c8 <pid_control>:

void pid_control(PID * device, LimitingType type)
{
 80058c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80058cc:	b082      	sub	sp, #8
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	460b      	mov	r3, r1
 80058d4:	70fb      	strb	r3, [r7, #3]
	static float tempOutput;

	device->error = device->setValue - device->feedbackValue;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058de:	4619      	mov	r1, r3
 80058e0:	4610      	mov	r0, r2
 80058e2:	f7fb f925 	bl	8000b30 <__aeabi_fsub>
 80058e6:	4603      	mov	r3, r0
 80058e8:	461a      	mov	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	639a      	str	r2, [r3, #56]	; 0x38

	if(device->error > device->PID_ERROR_LIMIT)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	4619      	mov	r1, r3
 80058f8:	4610      	mov	r0, r2
 80058fa:	f7fb fbdf 	bl	80010bc <__aeabi_fcmpgt>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d004      	beq.n	800590e <pid_control+0x46>
	{
		device->error = device->PID_ERROR_LIMIT;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	695a      	ldr	r2, [r3, #20]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	639a      	str	r2, [r3, #56]	; 0x38
 800590c:	e029      	b.n	8005962 <pid_control+0x9a>
	}
	else if(device->error < (-1.0 * (device->PID_ERROR_LIMIT)))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005912:	4618      	mov	r0, r3
 8005914:	f7fa fd88 	bl	8000428 <__aeabi_f2d>
 8005918:	4680      	mov	r8, r0
 800591a:	4689      	mov	r9, r1
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	4618      	mov	r0, r3
 8005922:	f7fa fd81 	bl	8000428 <__aeabi_f2d>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4614      	mov	r4, r2
 800592c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005930:	4622      	mov	r2, r4
 8005932:	462b      	mov	r3, r5
 8005934:	4640      	mov	r0, r8
 8005936:	4649      	mov	r1, r9
 8005938:	f7fb f840 	bl	80009bc <__aeabi_dcmplt>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00f      	beq.n	8005962 <pid_control+0x9a>
	{
		device->error = (-1.0 * device->PID_ERROR_LIMIT);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	4618      	mov	r0, r3
 8005948:	f7fa fd6e 	bl	8000428 <__aeabi_f2d>
 800594c:	4603      	mov	r3, r0
 800594e:	460c      	mov	r4, r1
 8005950:	4618      	mov	r0, r3
 8005952:	4621      	mov	r1, r4
 8005954:	f7fb f898 	bl	8000a88 <__aeabi_d2f>
 8005958:	4603      	mov	r3, r0
 800595a:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	639a      	str	r2, [r3, #56]	; 0x38
	}

	if(_fabs(device->error) > device->EPSILON)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff ff6a 	bl	8005840 <_fabs>
 800596c:	4602      	mov	r2, r0
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4619      	mov	r1, r3
 8005974:	4610      	mov	r0, r2
 8005976:	f7fb fba1 	bl	80010bc <__aeabi_fcmpgt>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d038      	beq.n	80059f2 <pid_control+0x12a>
	{
		device->integral += (device->error * device->DT * device->KI);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	4619      	mov	r1, r3
 800598e:	4610      	mov	r0, r2
 8005990:	f7fb f9d8 	bl	8000d44 <__aeabi_fmul>
 8005994:	4603      	mov	r3, r0
 8005996:	461a      	mov	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	4619      	mov	r1, r3
 800599e:	4610      	mov	r0, r2
 80059a0:	f7fb f9d0 	bl	8000d44 <__aeabi_fmul>
 80059a4:	4603      	mov	r3, r0
 80059a6:	4619      	mov	r1, r3
 80059a8:	4620      	mov	r0, r4
 80059aa:	f7fb f8c3 	bl	8000b34 <__addsf3>
 80059ae:	4603      	mov	r3, r0
 80059b0:	461a      	mov	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	635a      	str	r2, [r3, #52]	; 0x34

		if(device->integral > device->INTEGRAL_MAX_VAL)	device->integral = device->INTEGRAL_MAX_VAL;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	4619      	mov	r1, r3
 80059c0:	4610      	mov	r0, r2
 80059c2:	f7fb fb7b 	bl	80010bc <__aeabi_fcmpgt>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <pid_control+0x10c>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	69da      	ldr	r2, [r3, #28]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	635a      	str	r2, [r3, #52]	; 0x34
		if(device->integral < device->INTEGRAL_MIN_VAL)	device->integral = device->INTEGRAL_MIN_VAL;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	4619      	mov	r1, r3
 80059de:	4610      	mov	r0, r2
 80059e0:	f7fb fb4e 	bl	8001080 <__aeabi_fcmplt>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <pid_control+0x12a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1a      	ldr	r2, [r3, #32]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	635a      	str	r2, [r3, #52]	; 0x34
	}

	tempOutput = (device->KP * device->error) + (device->integral); // + (device->KD * device->derivative);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fa:	4619      	mov	r1, r3
 80059fc:	4610      	mov	r0, r2
 80059fe:	f7fb f9a1 	bl	8000d44 <__aeabi_fmul>
 8005a02:	4603      	mov	r3, r0
 8005a04:	461a      	mov	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	f7fb f891 	bl	8000b34 <__addsf3>
 8005a12:	4603      	mov	r3, r0
 8005a14:	461a      	mov	r2, r3
 8005a16:	4b48      	ldr	r3, [pc, #288]	; (8005b38 <pid_control+0x270>)
 8005a18:	601a      	str	r2, [r3, #0]

	device->previousError = device->error;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	631a      	str	r2, [r3, #48]	; 0x30


	//device->derivative = ((device->error - device->previousError) / device->DT);
	//Limiting output
	if(type == negativeLimiting)
 8005a22:	78fb      	ldrb	r3, [r7, #3]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d127      	bne.n	8005a78 <pid_control+0x1b0>
	{
		if(tempOutput > 0.0)
 8005a28:	4b43      	ldr	r3, [pc, #268]	; (8005b38 <pid_control+0x270>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f04f 0100 	mov.w	r1, #0
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fb fb43 	bl	80010bc <__aeabi_fcmpgt>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d004      	beq.n	8005a46 <pid_control+0x17e>
		{
			device->output = 0.0;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f04f 0200 	mov.w	r2, #0
 8005a42:	641a      	str	r2, [r3, #64]	; 0x40
		device->output = tempOutput;
	}



}
 8005a44:	e072      	b.n	8005b2c <pid_control+0x264>
		else if(tempOutput < (-1 * device->MAX_OUTPUT))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8005a4e:	4b3a      	ldr	r3, [pc, #232]	; (8005b38 <pid_control+0x270>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4619      	mov	r1, r3
 8005a54:	4610      	mov	r0, r2
 8005a56:	f7fb fb31 	bl	80010bc <__aeabi_fcmpgt>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d006      	beq.n	8005a6e <pid_control+0x1a6>
			device->output = (-1 * device->MAX_OUTPUT);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005a6c:	e05e      	b.n	8005b2c <pid_control+0x264>
			device->output = tempOutput;
 8005a6e:	4b32      	ldr	r3, [pc, #200]	; (8005b38 <pid_control+0x270>)
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005a76:	e059      	b.n	8005b2c <pid_control+0x264>
	else if(type == positiveLimiting)
 8005a78:	78fb      	ldrb	r3, [r7, #3]
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d123      	bne.n	8005ac6 <pid_control+0x1fe>
		if(tempOutput > device->MAX_OUTPUT)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a82:	4b2d      	ldr	r3, [pc, #180]	; (8005b38 <pid_control+0x270>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4619      	mov	r1, r3
 8005a88:	4610      	mov	r0, r2
 8005a8a:	f7fb faf9 	bl	8001080 <__aeabi_fcmplt>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d004      	beq.n	8005a9e <pid_control+0x1d6>
			device->output = device->MAX_OUTPUT;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005a9c:	e046      	b.n	8005b2c <pid_control+0x264>
		else if(tempOutput < 0.0)
 8005a9e:	4b26      	ldr	r3, [pc, #152]	; (8005b38 <pid_control+0x270>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f04f 0100 	mov.w	r1, #0
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fb faea 	bl	8001080 <__aeabi_fcmplt>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d004      	beq.n	8005abc <pid_control+0x1f4>
			device->output = 0.0;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f04f 0200 	mov.w	r2, #0
 8005ab8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005aba:	e037      	b.n	8005b2c <pid_control+0x264>
			device->output = tempOutput;
 8005abc:	4b1e      	ldr	r3, [pc, #120]	; (8005b38 <pid_control+0x270>)
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005ac4:	e032      	b.n	8005b2c <pid_control+0x264>
	else if(type == fullLimiting)
 8005ac6:	78fb      	ldrb	r3, [r7, #3]
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	d128      	bne.n	8005b1e <pid_control+0x256>
		if(tempOutput > device->MAX_OUTPUT)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ad0:	4b19      	ldr	r3, [pc, #100]	; (8005b38 <pid_control+0x270>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4610      	mov	r0, r2
 8005ad8:	f7fb fad2 	bl	8001080 <__aeabi_fcmplt>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d004      	beq.n	8005aec <pid_control+0x224>
			device->output = device->MAX_OUTPUT;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005aea:	e01f      	b.n	8005b2c <pid_control+0x264>
		else if(tempOutput < (-1 * device->MAX_OUTPUT))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8005af4:	4b10      	ldr	r3, [pc, #64]	; (8005b38 <pid_control+0x270>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4619      	mov	r1, r3
 8005afa:	4610      	mov	r0, r2
 8005afc:	f7fb fade 	bl	80010bc <__aeabi_fcmpgt>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d006      	beq.n	8005b14 <pid_control+0x24c>
			device->output = (-1 * device->MAX_OUTPUT);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005b12:	e00b      	b.n	8005b2c <pid_control+0x264>
			device->output = tempOutput;
 8005b14:	4b08      	ldr	r3, [pc, #32]	; (8005b38 <pid_control+0x270>)
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005b1c:	e006      	b.n	8005b2c <pid_control+0x264>
	else if(type == nonLimiting)
 8005b1e:	78fb      	ldrb	r3, [r7, #3]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d103      	bne.n	8005b2c <pid_control+0x264>
		device->output = tempOutput;
 8005b24:	4b04      	ldr	r3, [pc, #16]	; (8005b38 <pid_control+0x270>)
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005b2c:	bf00      	nop
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005b36:	bf00      	nop
 8005b38:	2000022c 	.word	0x2000022c

08005b3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005b42:	4b15      	ldr	r3, [pc, #84]	; (8005b98 <HAL_MspInit+0x5c>)
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	4a14      	ldr	r2, [pc, #80]	; (8005b98 <HAL_MspInit+0x5c>)
 8005b48:	f043 0301 	orr.w	r3, r3, #1
 8005b4c:	6193      	str	r3, [r2, #24]
 8005b4e:	4b12      	ldr	r3, [pc, #72]	; (8005b98 <HAL_MspInit+0x5c>)
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	60bb      	str	r3, [r7, #8]
 8005b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b5a:	4b0f      	ldr	r3, [pc, #60]	; (8005b98 <HAL_MspInit+0x5c>)
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	4a0e      	ldr	r2, [pc, #56]	; (8005b98 <HAL_MspInit+0x5c>)
 8005b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b64:	61d3      	str	r3, [r2, #28]
 8005b66:	4b0c      	ldr	r3, [pc, #48]	; (8005b98 <HAL_MspInit+0x5c>)
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b6e:	607b      	str	r3, [r7, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005b72:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <HAL_MspInit+0x60>)
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	4a04      	ldr	r2, [pc, #16]	; (8005b9c <HAL_MspInit+0x60>)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b8e:	bf00      	nop
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bc80      	pop	{r7}
 8005b96:	4770      	bx	lr
 8005b98:	40021000 	.word	0x40021000
 8005b9c:	40010000 	.word	0x40010000

08005ba0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b088      	sub	sp, #32
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ba8:	f107 0310 	add.w	r3, r7, #16
 8005bac:	2200      	movs	r2, #0
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	605a      	str	r2, [r3, #4]
 8005bb2:	609a      	str	r2, [r3, #8]
 8005bb4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a15      	ldr	r2, [pc, #84]	; (8005c10 <HAL_I2C_MspInit+0x70>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d123      	bne.n	8005c08 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bc0:	4b14      	ldr	r3, [pc, #80]	; (8005c14 <HAL_I2C_MspInit+0x74>)
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	4a13      	ldr	r2, [pc, #76]	; (8005c14 <HAL_I2C_MspInit+0x74>)
 8005bc6:	f043 0308 	orr.w	r3, r3, #8
 8005bca:	6193      	str	r3, [r2, #24]
 8005bcc:	4b11      	ldr	r3, [pc, #68]	; (8005c14 <HAL_I2C_MspInit+0x74>)
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	f003 0308 	and.w	r3, r3, #8
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005bd8:	23c0      	movs	r3, #192	; 0xc0
 8005bda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005bdc:	2312      	movs	r3, #18
 8005bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005be0:	2303      	movs	r3, #3
 8005be2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005be4:	f107 0310 	add.w	r3, r7, #16
 8005be8:	4619      	mov	r1, r3
 8005bea:	480b      	ldr	r0, [pc, #44]	; (8005c18 <HAL_I2C_MspInit+0x78>)
 8005bec:	f7fb fc98 	bl	8001520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005bf0:	4b08      	ldr	r3, [pc, #32]	; (8005c14 <HAL_I2C_MspInit+0x74>)
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	4a07      	ldr	r2, [pc, #28]	; (8005c14 <HAL_I2C_MspInit+0x74>)
 8005bf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bfa:	61d3      	str	r3, [r2, #28]
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <HAL_I2C_MspInit+0x74>)
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c04:	60bb      	str	r3, [r7, #8]
 8005c06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005c08:	bf00      	nop
 8005c0a:	3720      	adds	r7, #32
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	40005400 	.word	0x40005400
 8005c14:	40021000 	.word	0x40021000
 8005c18:	40010c00 	.word	0x40010c00

08005c1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a16      	ldr	r2, [pc, #88]	; (8005c84 <HAL_TIM_Base_MspInit+0x68>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d114      	bne.n	8005c58 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005c2e:	4b16      	ldr	r3, [pc, #88]	; (8005c88 <HAL_TIM_Base_MspInit+0x6c>)
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	4a15      	ldr	r2, [pc, #84]	; (8005c88 <HAL_TIM_Base_MspInit+0x6c>)
 8005c34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c38:	6193      	str	r3, [r2, #24]
 8005c3a:	4b13      	ldr	r3, [pc, #76]	; (8005c88 <HAL_TIM_Base_MspInit+0x6c>)
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8005c46:	2200      	movs	r2, #0
 8005c48:	2100      	movs	r1, #0
 8005c4a:	2019      	movs	r0, #25
 8005c4c:	f7fb fbbb 	bl	80013c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8005c50:	2019      	movs	r0, #25
 8005c52:	f7fb fbd4 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005c56:	e010      	b.n	8005c7a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c60:	d10b      	bne.n	8005c7a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005c62:	4b09      	ldr	r3, [pc, #36]	; (8005c88 <HAL_TIM_Base_MspInit+0x6c>)
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	4a08      	ldr	r2, [pc, #32]	; (8005c88 <HAL_TIM_Base_MspInit+0x6c>)
 8005c68:	f043 0301 	orr.w	r3, r3, #1
 8005c6c:	61d3      	str	r3, [r2, #28]
 8005c6e:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <HAL_TIM_Base_MspInit+0x6c>)
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	60bb      	str	r3, [r7, #8]
 8005c78:	68bb      	ldr	r3, [r7, #8]
}
 8005c7a:	bf00      	nop
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	40012c00 	.word	0x40012c00
 8005c88:	40021000 	.word	0x40021000

08005c8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c94:	f107 0310 	add.w	r3, r7, #16
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	605a      	str	r2, [r3, #4]
 8005c9e:	609a      	str	r2, [r3, #8]
 8005ca0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005caa:	d117      	bne.n	8005cdc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cac:	4b0d      	ldr	r3, [pc, #52]	; (8005ce4 <HAL_TIM_MspPostInit+0x58>)
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	4a0c      	ldr	r2, [pc, #48]	; (8005ce4 <HAL_TIM_MspPostInit+0x58>)
 8005cb2:	f043 0304 	orr.w	r3, r3, #4
 8005cb6:	6193      	str	r3, [r2, #24]
 8005cb8:	4b0a      	ldr	r3, [pc, #40]	; (8005ce4 <HAL_TIM_MspPostInit+0x58>)
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	f003 0304 	and.w	r3, r3, #4
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cc8:	2302      	movs	r3, #2
 8005cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ccc:	2302      	movs	r3, #2
 8005cce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cd0:	f107 0310 	add.w	r3, r7, #16
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4804      	ldr	r0, [pc, #16]	; (8005ce8 <HAL_TIM_MspPostInit+0x5c>)
 8005cd8:	f7fb fc22 	bl	8001520 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005cdc:	bf00      	nop
 8005cde:	3720      	adds	r7, #32
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	40021000 	.word	0x40021000
 8005ce8:	40010800 	.word	0x40010800

08005cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b088      	sub	sp, #32
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cf4:	f107 0310 	add.w	r3, r7, #16
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	605a      	str	r2, [r3, #4]
 8005cfe:	609a      	str	r2, [r3, #8]
 8005d00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a20      	ldr	r2, [pc, #128]	; (8005d88 <HAL_UART_MspInit+0x9c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d139      	bne.n	8005d80 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d0c:	4b1f      	ldr	r3, [pc, #124]	; (8005d8c <HAL_UART_MspInit+0xa0>)
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	4a1e      	ldr	r2, [pc, #120]	; (8005d8c <HAL_UART_MspInit+0xa0>)
 8005d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d16:	6193      	str	r3, [r2, #24]
 8005d18:	4b1c      	ldr	r3, [pc, #112]	; (8005d8c <HAL_UART_MspInit+0xa0>)
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d20:	60fb      	str	r3, [r7, #12]
 8005d22:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d24:	4b19      	ldr	r3, [pc, #100]	; (8005d8c <HAL_UART_MspInit+0xa0>)
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	4a18      	ldr	r2, [pc, #96]	; (8005d8c <HAL_UART_MspInit+0xa0>)
 8005d2a:	f043 0304 	orr.w	r3, r3, #4
 8005d2e:	6193      	str	r3, [r2, #24]
 8005d30:	4b16      	ldr	r3, [pc, #88]	; (8005d8c <HAL_UART_MspInit+0xa0>)
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	60bb      	str	r3, [r7, #8]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d42:	2302      	movs	r3, #2
 8005d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005d46:	2303      	movs	r3, #3
 8005d48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d4a:	f107 0310 	add.w	r3, r7, #16
 8005d4e:	4619      	mov	r1, r3
 8005d50:	480f      	ldr	r0, [pc, #60]	; (8005d90 <HAL_UART_MspInit+0xa4>)
 8005d52:	f7fb fbe5 	bl	8001520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d60:	2300      	movs	r3, #0
 8005d62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d64:	f107 0310 	add.w	r3, r7, #16
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4809      	ldr	r0, [pc, #36]	; (8005d90 <HAL_UART_MspInit+0xa4>)
 8005d6c:	f7fb fbd8 	bl	8001520 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005d70:	2200      	movs	r2, #0
 8005d72:	2100      	movs	r1, #0
 8005d74:	2025      	movs	r0, #37	; 0x25
 8005d76:	f7fb fb26 	bl	80013c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005d7a:	2025      	movs	r0, #37	; 0x25
 8005d7c:	f7fb fb3f 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005d80:	bf00      	nop
 8005d82:	3720      	adds	r7, #32
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	40013800 	.word	0x40013800
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	40010800 	.word	0x40010800

08005d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d94:	b480      	push	{r7}
 8005d96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005d98:	bf00      	nop
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bc80      	pop	{r7}
 8005d9e:	4770      	bx	lr

08005da0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005da0:	b480      	push	{r7}
 8005da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005da4:	e7fe      	b.n	8005da4 <HardFault_Handler+0x4>

08005da6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005da6:	b480      	push	{r7}
 8005da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005daa:	e7fe      	b.n	8005daa <MemManage_Handler+0x4>

08005dac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005db0:	e7fe      	b.n	8005db0 <BusFault_Handler+0x4>

08005db2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005db2:	b480      	push	{r7}
 8005db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005db6:	e7fe      	b.n	8005db6 <UsageFault_Handler+0x4>

08005db8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005dbc:	bf00      	nop
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr

08005dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005dc8:	bf00      	nop
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bc80      	pop	{r7}
 8005dce:	4770      	bx	lr

08005dd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005dd4:	bf00      	nop
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bc80      	pop	{r7}
 8005dda:	4770      	bx	lr

08005ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005de0:	f7fb f9dc 	bl	800119c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005de4:	bf00      	nop
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005dec:	4803      	ldr	r0, [pc, #12]	; (8005dfc <TIM1_UP_IRQHandler+0x14>)
 8005dee:	f7fd f97f 	bl	80030f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  timerTask();
 8005df2:	f000 f877 	bl	8005ee4 <timerTask>
  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8005df6:	bf00      	nop
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	200003cc 	.word	0x200003cc

08005e00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005e04:	4805      	ldr	r0, [pc, #20]	; (8005e1c <USART1_IRQHandler+0x1c>)
 8005e06:	f7fe f859 	bl	8003ebc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

//  HAL_UART_Receive_IT(&huart1,(uint8_t *)rx_buffer,6);

  syc++;
 8005e0a:	4b05      	ldr	r3, [pc, #20]	; (8005e20 <USART1_IRQHandler+0x20>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	4b03      	ldr	r3, [pc, #12]	; (8005e20 <USART1_IRQHandler+0x20>)
 8005e14:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART1_IRQn 1 */
}
 8005e16:	bf00      	nop
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	200002e4 	.word	0x200002e4
 8005e20:	20000214 	.word	0x20000214

08005e24 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005e2c:	4b11      	ldr	r3, [pc, #68]	; (8005e74 <_sbrk+0x50>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d102      	bne.n	8005e3a <_sbrk+0x16>
		heap_end = &end;
 8005e34:	4b0f      	ldr	r3, [pc, #60]	; (8005e74 <_sbrk+0x50>)
 8005e36:	4a10      	ldr	r2, [pc, #64]	; (8005e78 <_sbrk+0x54>)
 8005e38:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005e3a:	4b0e      	ldr	r3, [pc, #56]	; (8005e74 <_sbrk+0x50>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005e40:	4b0c      	ldr	r3, [pc, #48]	; (8005e74 <_sbrk+0x50>)
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4413      	add	r3, r2
 8005e48:	466a      	mov	r2, sp
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d907      	bls.n	8005e5e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005e4e:	f000 fa23 	bl	8006298 <__errno>
 8005e52:	4602      	mov	r2, r0
 8005e54:	230c      	movs	r3, #12
 8005e56:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005e58:	f04f 33ff 	mov.w	r3, #4294967295
 8005e5c:	e006      	b.n	8005e6c <_sbrk+0x48>
	}

	heap_end += incr;
 8005e5e:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <_sbrk+0x50>)
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4413      	add	r3, r2
 8005e66:	4a03      	ldr	r2, [pc, #12]	; (8005e74 <_sbrk+0x50>)
 8005e68:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	20000230 	.word	0x20000230
 8005e78:	200004f8 	.word	0x200004f8

08005e7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005e80:	4b15      	ldr	r3, [pc, #84]	; (8005ed8 <SystemInit+0x5c>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a14      	ldr	r2, [pc, #80]	; (8005ed8 <SystemInit+0x5c>)
 8005e86:	f043 0301 	orr.w	r3, r3, #1
 8005e8a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005e8c:	4b12      	ldr	r3, [pc, #72]	; (8005ed8 <SystemInit+0x5c>)
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	4911      	ldr	r1, [pc, #68]	; (8005ed8 <SystemInit+0x5c>)
 8005e92:	4b12      	ldr	r3, [pc, #72]	; (8005edc <SystemInit+0x60>)
 8005e94:	4013      	ands	r3, r2
 8005e96:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005e98:	4b0f      	ldr	r3, [pc, #60]	; (8005ed8 <SystemInit+0x5c>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a0e      	ldr	r2, [pc, #56]	; (8005ed8 <SystemInit+0x5c>)
 8005e9e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ea6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005ea8:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <SystemInit+0x5c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a0a      	ldr	r2, [pc, #40]	; (8005ed8 <SystemInit+0x5c>)
 8005eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eb2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005eb4:	4b08      	ldr	r3, [pc, #32]	; (8005ed8 <SystemInit+0x5c>)
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	4a07      	ldr	r2, [pc, #28]	; (8005ed8 <SystemInit+0x5c>)
 8005eba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005ebe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005ec0:	4b05      	ldr	r3, [pc, #20]	; (8005ed8 <SystemInit+0x5c>)
 8005ec2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005ec6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005ec8:	4b05      	ldr	r3, [pc, #20]	; (8005ee0 <SystemInit+0x64>)
 8005eca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ece:	609a      	str	r2, [r3, #8]
#endif 
}
 8005ed0:	bf00      	nop
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc80      	pop	{r7}
 8005ed6:	4770      	bx	lr
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	f8ff0000 	.word	0xf8ff0000
 8005ee0:	e000ed00 	.word	0xe000ed00

08005ee4 <timerTask>:
{

}
//------------------------------------------------------------------------------
void timerTask(void)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	af00      	add	r7, sp, #0



	scanStart1Msec = TRUE;
 8005ee8:	4b54      	ldr	r3, [pc, #336]	; (800603c <timerTask+0x158>)
 8005eea:	2201      	movs	r2, #1
 8005eec:	701a      	strb	r2, [r3, #0]

	counter2Msec++;
 8005eee:	4b54      	ldr	r3, [pc, #336]	; (8006040 <timerTask+0x15c>)
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	4b52      	ldr	r3, [pc, #328]	; (8006040 <timerTask+0x15c>)
 8005ef8:	801a      	strh	r2, [r3, #0]
		if(counter2Msec > 1)
 8005efa:	4b51      	ldr	r3, [pc, #324]	; (8006040 <timerTask+0x15c>)
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d905      	bls.n	8005f0e <timerTask+0x2a>
		{
			counter2Msec = 0;
 8005f02:	4b4f      	ldr	r3, [pc, #316]	; (8006040 <timerTask+0x15c>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	801a      	strh	r2, [r3, #0]
			scanStart2Msec = TRUE;
 8005f08:	4b4e      	ldr	r3, [pc, #312]	; (8006044 <timerTask+0x160>)
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	701a      	strb	r2, [r3, #0]
		}

	counter10Msec++;
 8005f0e:	4b4e      	ldr	r3, [pc, #312]	; (8006048 <timerTask+0x164>)
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	3301      	adds	r3, #1
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	4b4c      	ldr	r3, [pc, #304]	; (8006048 <timerTask+0x164>)
 8005f18:	801a      	strh	r2, [r3, #0]
	if(counter10Msec > 9)
 8005f1a:	4b4b      	ldr	r3, [pc, #300]	; (8006048 <timerTask+0x164>)
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	2b09      	cmp	r3, #9
 8005f20:	d905      	bls.n	8005f2e <timerTask+0x4a>
	{
		counter10Msec = 0;
 8005f22:	4b49      	ldr	r3, [pc, #292]	; (8006048 <timerTask+0x164>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	801a      	strh	r2, [r3, #0]
		scanStart10Msec = TRUE;
 8005f28:	4b48      	ldr	r3, [pc, #288]	; (800604c <timerTask+0x168>)
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	701a      	strb	r2, [r3, #0]
	}

	counter50Msec++;
 8005f2e:	4b48      	ldr	r3, [pc, #288]	; (8006050 <timerTask+0x16c>)
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	3301      	adds	r3, #1
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	4b46      	ldr	r3, [pc, #280]	; (8006050 <timerTask+0x16c>)
 8005f38:	801a      	strh	r2, [r3, #0]
	if(counter50Msec > 49)
 8005f3a:	4b45      	ldr	r3, [pc, #276]	; (8006050 <timerTask+0x16c>)
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	2b31      	cmp	r3, #49	; 0x31
 8005f40:	d905      	bls.n	8005f4e <timerTask+0x6a>
	{
		counter50Msec = 0;
 8005f42:	4b43      	ldr	r3, [pc, #268]	; (8006050 <timerTask+0x16c>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	801a      	strh	r2, [r3, #0]
		scanStart50Msec = TRUE;
 8005f48:	4b42      	ldr	r3, [pc, #264]	; (8006054 <timerTask+0x170>)
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	701a      	strb	r2, [r3, #0]
	}

	counter100Msec++;
 8005f4e:	4b42      	ldr	r3, [pc, #264]	; (8006058 <timerTask+0x174>)
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	3301      	adds	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	4b40      	ldr	r3, [pc, #256]	; (8006058 <timerTask+0x174>)
 8005f58:	801a      	strh	r2, [r3, #0]
	if(counter100Msec > 99)
 8005f5a:	4b3f      	ldr	r3, [pc, #252]	; (8006058 <timerTask+0x174>)
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	2b63      	cmp	r3, #99	; 0x63
 8005f60:	d905      	bls.n	8005f6e <timerTask+0x8a>
	{
		counter100Msec = 0;
 8005f62:	4b3d      	ldr	r3, [pc, #244]	; (8006058 <timerTask+0x174>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	801a      	strh	r2, [r3, #0]
		scanStart100Msec = TRUE;
 8005f68:	4b3c      	ldr	r3, [pc, #240]	; (800605c <timerTask+0x178>)
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	701a      	strb	r2, [r3, #0]
	}

	counter150Msec++;
 8005f6e:	4b3c      	ldr	r3, [pc, #240]	; (8006060 <timerTask+0x17c>)
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	3301      	adds	r3, #1
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	4b3a      	ldr	r3, [pc, #232]	; (8006060 <timerTask+0x17c>)
 8005f78:	801a      	strh	r2, [r3, #0]
	if (counter150Msec > 149)
 8005f7a:	4b39      	ldr	r3, [pc, #228]	; (8006060 <timerTask+0x17c>)
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	2b95      	cmp	r3, #149	; 0x95
 8005f80:	d905      	bls.n	8005f8e <timerTask+0xaa>
	{
		counter150Msec = 0;
 8005f82:	4b37      	ldr	r3, [pc, #220]	; (8006060 <timerTask+0x17c>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	801a      	strh	r2, [r3, #0]
		scanStart150Msec = TRUE;
 8005f88:	4b36      	ldr	r3, [pc, #216]	; (8006064 <timerTask+0x180>)
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	701a      	strb	r2, [r3, #0]
	}

	counter250Msec++;
 8005f8e:	4b36      	ldr	r3, [pc, #216]	; (8006068 <timerTask+0x184>)
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	3301      	adds	r3, #1
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	4b34      	ldr	r3, [pc, #208]	; (8006068 <timerTask+0x184>)
 8005f98:	801a      	strh	r2, [r3, #0]
	if(counter250Msec > 249)
 8005f9a:	4b33      	ldr	r3, [pc, #204]	; (8006068 <timerTask+0x184>)
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	2bf9      	cmp	r3, #249	; 0xf9
 8005fa0:	d905      	bls.n	8005fae <timerTask+0xca>
	{
		counter250Msec = 0;
 8005fa2:	4b31      	ldr	r3, [pc, #196]	; (8006068 <timerTask+0x184>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	801a      	strh	r2, [r3, #0]
		scanStart250Msec = TRUE;
 8005fa8:	4b30      	ldr	r3, [pc, #192]	; (800606c <timerTask+0x188>)
 8005faa:	2201      	movs	r2, #1
 8005fac:	701a      	strb	r2, [r3, #0]
	}

	counter500Msec++;
 8005fae:	4b30      	ldr	r3, [pc, #192]	; (8006070 <timerTask+0x18c>)
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	4b2e      	ldr	r3, [pc, #184]	; (8006070 <timerTask+0x18c>)
 8005fb8:	801a      	strh	r2, [r3, #0]
	if(counter500Msec > 499)
 8005fba:	4b2d      	ldr	r3, [pc, #180]	; (8006070 <timerTask+0x18c>)
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005fc2:	d305      	bcc.n	8005fd0 <timerTask+0xec>
	{
		counter500Msec = 0;
 8005fc4:	4b2a      	ldr	r3, [pc, #168]	; (8006070 <timerTask+0x18c>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	801a      	strh	r2, [r3, #0]
		scanStart500Msec = TRUE;
 8005fca:	4b2a      	ldr	r3, [pc, #168]	; (8006074 <timerTask+0x190>)
 8005fcc:	2201      	movs	r2, #1
 8005fce:	701a      	strb	r2, [r3, #0]
	}

	counter1Sec++;
 8005fd0:	4b29      	ldr	r3, [pc, #164]	; (8006078 <timerTask+0x194>)
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	4b27      	ldr	r3, [pc, #156]	; (8006078 <timerTask+0x194>)
 8005fda:	801a      	strh	r2, [r3, #0]
	if(counter1Sec > 999)
 8005fdc:	4b26      	ldr	r3, [pc, #152]	; (8006078 <timerTask+0x194>)
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fe4:	d325      	bcc.n	8006032 <timerTask+0x14e>
	{
		counter1Sec = 0;
 8005fe6:	4b24      	ldr	r3, [pc, #144]	; (8006078 <timerTask+0x194>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	801a      	strh	r2, [r3, #0]
		scanStart1Sec = TRUE;
 8005fec:	4b23      	ldr	r3, [pc, #140]	; (800607c <timerTask+0x198>)
 8005fee:	2201      	movs	r2, #1
 8005ff0:	701a      	strb	r2, [r3, #0]

		counter10Sec++;
 8005ff2:	4b23      	ldr	r3, [pc, #140]	; (8006080 <timerTask+0x19c>)
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	4b21      	ldr	r3, [pc, #132]	; (8006080 <timerTask+0x19c>)
 8005ffc:	801a      	strh	r2, [r3, #0]
		if(counter10Sec > 9)
 8005ffe:	4b20      	ldr	r3, [pc, #128]	; (8006080 <timerTask+0x19c>)
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	2b09      	cmp	r3, #9
 8006004:	d905      	bls.n	8006012 <timerTask+0x12e>
		{
			counter10Sec = 0;
 8006006:	4b1e      	ldr	r3, [pc, #120]	; (8006080 <timerTask+0x19c>)
 8006008:	2200      	movs	r2, #0
 800600a:	801a      	strh	r2, [r3, #0]
			scanStart10Sec = TRUE;
 800600c:	4b1d      	ldr	r3, [pc, #116]	; (8006084 <timerTask+0x1a0>)
 800600e:	2201      	movs	r2, #1
 8006010:	701a      	strb	r2, [r3, #0]
		}

		counter1Min++;
 8006012:	4b1d      	ldr	r3, [pc, #116]	; (8006088 <timerTask+0x1a4>)
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	3301      	adds	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	4b1b      	ldr	r3, [pc, #108]	; (8006088 <timerTask+0x1a4>)
 800601c:	801a      	strh	r2, [r3, #0]
		if(counter1Min > 59)
 800601e:	4b1a      	ldr	r3, [pc, #104]	; (8006088 <timerTask+0x1a4>)
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	2b3b      	cmp	r3, #59	; 0x3b
 8006024:	d905      	bls.n	8006032 <timerTask+0x14e>
		{
			counter1Min = 0;
 8006026:	4b18      	ldr	r3, [pc, #96]	; (8006088 <timerTask+0x1a4>)
 8006028:	2200      	movs	r2, #0
 800602a:	801a      	strh	r2, [r3, #0]
			scanStart1Min = TRUE;
 800602c:	4b17      	ldr	r3, [pc, #92]	; (800608c <timerTask+0x1a8>)
 800602e:	2201      	movs	r2, #1
 8006030:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8006032:	bf00      	nop
 8006034:	46bd      	mov	sp, r7
 8006036:	bc80      	pop	{r7}
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	20000234 	.word	0x20000234
 8006040:	2000024a 	.word	0x2000024a
 8006044:	20000235 	.word	0x20000235
 8006048:	2000024c 	.word	0x2000024c
 800604c:	20000236 	.word	0x20000236
 8006050:	2000024e 	.word	0x2000024e
 8006054:	20000237 	.word	0x20000237
 8006058:	20000250 	.word	0x20000250
 800605c:	20000238 	.word	0x20000238
 8006060:	20000252 	.word	0x20000252
 8006064:	20000239 	.word	0x20000239
 8006068:	20000254 	.word	0x20000254
 800606c:	2000023a 	.word	0x2000023a
 8006070:	20000256 	.word	0x20000256
 8006074:	2000023b 	.word	0x2000023b
 8006078:	20000258 	.word	0x20000258
 800607c:	2000023c 	.word	0x2000023c
 8006080:	2000025a 	.word	0x2000025a
 8006084:	2000023d 	.word	0x2000023d
 8006088:	2000025c 	.word	0x2000025c
 800608c:	2000023e 	.word	0x2000023e

08006090 <startTimeScanFlags>:
//------------------------------------------------------------------------------
void startTimeScanFlags(void)
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0

	if(scanStart1Msec)
 8006094:	4b38      	ldr	r3, [pc, #224]	; (8006178 <startTimeScanFlags+0xe8>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d005      	beq.n	80060a8 <startTimeScanFlags+0x18>
	{
		scanStart1Msec = FALSE;
 800609c:	4b36      	ldr	r3, [pc, #216]	; (8006178 <startTimeScanFlags+0xe8>)
 800609e:	2200      	movs	r2, #0
 80060a0:	701a      	strb	r2, [r3, #0]
		scan1Msec = TRUE;
 80060a2:	4b36      	ldr	r3, [pc, #216]	; (800617c <startTimeScanFlags+0xec>)
 80060a4:	2201      	movs	r2, #1
 80060a6:	701a      	strb	r2, [r3, #0]
	}

	if(scanStart2Msec)
 80060a8:	4b35      	ldr	r3, [pc, #212]	; (8006180 <startTimeScanFlags+0xf0>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <startTimeScanFlags+0x2c>
		{
			scanStart2Msec = FALSE;
 80060b0:	4b33      	ldr	r3, [pc, #204]	; (8006180 <startTimeScanFlags+0xf0>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	701a      	strb	r2, [r3, #0]
			scan2Msec = TRUE;
 80060b6:	4b33      	ldr	r3, [pc, #204]	; (8006184 <startTimeScanFlags+0xf4>)
 80060b8:	2201      	movs	r2, #1
 80060ba:	701a      	strb	r2, [r3, #0]
		}

	if(scanStart10Msec)
 80060bc:	4b32      	ldr	r3, [pc, #200]	; (8006188 <startTimeScanFlags+0xf8>)
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d005      	beq.n	80060d0 <startTimeScanFlags+0x40>
	{
		scanStart10Msec = FALSE;
 80060c4:	4b30      	ldr	r3, [pc, #192]	; (8006188 <startTimeScanFlags+0xf8>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	701a      	strb	r2, [r3, #0]
		scan10Msec = TRUE;
 80060ca:	4b30      	ldr	r3, [pc, #192]	; (800618c <startTimeScanFlags+0xfc>)
 80060cc:	2201      	movs	r2, #1
 80060ce:	701a      	strb	r2, [r3, #0]
	}
	if(scanStart50Msec)
 80060d0:	4b2f      	ldr	r3, [pc, #188]	; (8006190 <startTimeScanFlags+0x100>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d005      	beq.n	80060e4 <startTimeScanFlags+0x54>
	{
		scanStart50Msec = FALSE;
 80060d8:	4b2d      	ldr	r3, [pc, #180]	; (8006190 <startTimeScanFlags+0x100>)
 80060da:	2200      	movs	r2, #0
 80060dc:	701a      	strb	r2, [r3, #0]
		scan50Msec = TRUE;
 80060de:	4b2d      	ldr	r3, [pc, #180]	; (8006194 <startTimeScanFlags+0x104>)
 80060e0:	2201      	movs	r2, #1
 80060e2:	701a      	strb	r2, [r3, #0]
	}
	if(scanStart100Msec)
 80060e4:	4b2c      	ldr	r3, [pc, #176]	; (8006198 <startTimeScanFlags+0x108>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d005      	beq.n	80060f8 <startTimeScanFlags+0x68>
	{
		scanStart100Msec = FALSE;
 80060ec:	4b2a      	ldr	r3, [pc, #168]	; (8006198 <startTimeScanFlags+0x108>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	701a      	strb	r2, [r3, #0]
		scan100Msec = TRUE;
 80060f2:	4b2a      	ldr	r3, [pc, #168]	; (800619c <startTimeScanFlags+0x10c>)
 80060f4:	2201      	movs	r2, #1
 80060f6:	701a      	strb	r2, [r3, #0]
	}
	if(scanStart150Msec)
 80060f8:	4b29      	ldr	r3, [pc, #164]	; (80061a0 <startTimeScanFlags+0x110>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d005      	beq.n	800610c <startTimeScanFlags+0x7c>
	{
		scanStart150Msec = FALSE;
 8006100:	4b27      	ldr	r3, [pc, #156]	; (80061a0 <startTimeScanFlags+0x110>)
 8006102:	2200      	movs	r2, #0
 8006104:	701a      	strb	r2, [r3, #0]
		scan150Msec = TRUE;
 8006106:	4b27      	ldr	r3, [pc, #156]	; (80061a4 <startTimeScanFlags+0x114>)
 8006108:	2201      	movs	r2, #1
 800610a:	701a      	strb	r2, [r3, #0]
	}
	if(scanStart250Msec)
 800610c:	4b26      	ldr	r3, [pc, #152]	; (80061a8 <startTimeScanFlags+0x118>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d005      	beq.n	8006120 <startTimeScanFlags+0x90>
	{
		scanStart250Msec = FALSE;
 8006114:	4b24      	ldr	r3, [pc, #144]	; (80061a8 <startTimeScanFlags+0x118>)
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
		scan250Msec = TRUE;
 800611a:	4b24      	ldr	r3, [pc, #144]	; (80061ac <startTimeScanFlags+0x11c>)
 800611c:	2201      	movs	r2, #1
 800611e:	701a      	strb	r2, [r3, #0]
	}
	if(scanStart500Msec)
 8006120:	4b23      	ldr	r3, [pc, #140]	; (80061b0 <startTimeScanFlags+0x120>)
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <startTimeScanFlags+0xa4>
	{
		scanStart500Msec = FALSE;
 8006128:	4b21      	ldr	r3, [pc, #132]	; (80061b0 <startTimeScanFlags+0x120>)
 800612a:	2200      	movs	r2, #0
 800612c:	701a      	strb	r2, [r3, #0]
		scan500Msec = TRUE;
 800612e:	4b21      	ldr	r3, [pc, #132]	; (80061b4 <startTimeScanFlags+0x124>)
 8006130:	2201      	movs	r2, #1
 8006132:	701a      	strb	r2, [r3, #0]
	}
	if(scanStart1Sec)
 8006134:	4b20      	ldr	r3, [pc, #128]	; (80061b8 <startTimeScanFlags+0x128>)
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d005      	beq.n	8006148 <startTimeScanFlags+0xb8>
	{
		scanStart1Sec = FALSE;
 800613c:	4b1e      	ldr	r3, [pc, #120]	; (80061b8 <startTimeScanFlags+0x128>)
 800613e:	2200      	movs	r2, #0
 8006140:	701a      	strb	r2, [r3, #0]
		scan1Sec = TRUE;
 8006142:	4b1e      	ldr	r3, [pc, #120]	; (80061bc <startTimeScanFlags+0x12c>)
 8006144:	2201      	movs	r2, #1
 8006146:	701a      	strb	r2, [r3, #0]
	}
	if(scanStart10Sec)
 8006148:	4b1d      	ldr	r3, [pc, #116]	; (80061c0 <startTimeScanFlags+0x130>)
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d005      	beq.n	800615c <startTimeScanFlags+0xcc>
	{
		scanStart10Sec = FALSE;
 8006150:	4b1b      	ldr	r3, [pc, #108]	; (80061c0 <startTimeScanFlags+0x130>)
 8006152:	2200      	movs	r2, #0
 8006154:	701a      	strb	r2, [r3, #0]
		scan10Sec = TRUE;
 8006156:	4b1b      	ldr	r3, [pc, #108]	; (80061c4 <startTimeScanFlags+0x134>)
 8006158:	2201      	movs	r2, #1
 800615a:	701a      	strb	r2, [r3, #0]
	}
	if(scanStart1Min)
 800615c:	4b1a      	ldr	r3, [pc, #104]	; (80061c8 <startTimeScanFlags+0x138>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d005      	beq.n	8006170 <startTimeScanFlags+0xe0>
	{
		scanStart1Min = FALSE;
 8006164:	4b18      	ldr	r3, [pc, #96]	; (80061c8 <startTimeScanFlags+0x138>)
 8006166:	2200      	movs	r2, #0
 8006168:	701a      	strb	r2, [r3, #0]
		scan1Min = TRUE;
 800616a:	4b18      	ldr	r3, [pc, #96]	; (80061cc <startTimeScanFlags+0x13c>)
 800616c:	2201      	movs	r2, #1
 800616e:	701a      	strb	r2, [r3, #0]
	}
}
 8006170:	bf00      	nop
 8006172:	46bd      	mov	sp, r7
 8006174:	bc80      	pop	{r7}
 8006176:	4770      	bx	lr
 8006178:	20000234 	.word	0x20000234
 800617c:	2000023f 	.word	0x2000023f
 8006180:	20000235 	.word	0x20000235
 8006184:	20000240 	.word	0x20000240
 8006188:	20000236 	.word	0x20000236
 800618c:	20000241 	.word	0x20000241
 8006190:	20000237 	.word	0x20000237
 8006194:	20000242 	.word	0x20000242
 8006198:	20000238 	.word	0x20000238
 800619c:	20000243 	.word	0x20000243
 80061a0:	20000239 	.word	0x20000239
 80061a4:	20000244 	.word	0x20000244
 80061a8:	2000023a 	.word	0x2000023a
 80061ac:	20000245 	.word	0x20000245
 80061b0:	2000023b 	.word	0x2000023b
 80061b4:	20000246 	.word	0x20000246
 80061b8:	2000023c 	.word	0x2000023c
 80061bc:	20000247 	.word	0x20000247
 80061c0:	2000023d 	.word	0x2000023d
 80061c4:	20000248 	.word	0x20000248
 80061c8:	2000023e 	.word	0x2000023e
 80061cc:	20000249 	.word	0x20000249

080061d0 <clearTimeScanFlags>:
//------------------------------------------------------------------------------
void clearTimeScanFlags(void)
{
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
	scan1Msec = FALSE;
 80061d4:	4b12      	ldr	r3, [pc, #72]	; (8006220 <clearTimeScanFlags+0x50>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	701a      	strb	r2, [r3, #0]
	scan2Msec = FALSE;
 80061da:	4b12      	ldr	r3, [pc, #72]	; (8006224 <clearTimeScanFlags+0x54>)
 80061dc:	2200      	movs	r2, #0
 80061de:	701a      	strb	r2, [r3, #0]
	scan10Msec = FALSE;
 80061e0:	4b11      	ldr	r3, [pc, #68]	; (8006228 <clearTimeScanFlags+0x58>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	701a      	strb	r2, [r3, #0]
	scan50Msec = FALSE;
 80061e6:	4b11      	ldr	r3, [pc, #68]	; (800622c <clearTimeScanFlags+0x5c>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	701a      	strb	r2, [r3, #0]
	scan100Msec = FALSE;
 80061ec:	4b10      	ldr	r3, [pc, #64]	; (8006230 <clearTimeScanFlags+0x60>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	701a      	strb	r2, [r3, #0]
	scan150Msec = FALSE;
 80061f2:	4b10      	ldr	r3, [pc, #64]	; (8006234 <clearTimeScanFlags+0x64>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	701a      	strb	r2, [r3, #0]
	scan250Msec = FALSE;
 80061f8:	4b0f      	ldr	r3, [pc, #60]	; (8006238 <clearTimeScanFlags+0x68>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	701a      	strb	r2, [r3, #0]
	scan500Msec = FALSE;
 80061fe:	4b0f      	ldr	r3, [pc, #60]	; (800623c <clearTimeScanFlags+0x6c>)
 8006200:	2200      	movs	r2, #0
 8006202:	701a      	strb	r2, [r3, #0]
	scan1Sec = FALSE;
 8006204:	4b0e      	ldr	r3, [pc, #56]	; (8006240 <clearTimeScanFlags+0x70>)
 8006206:	2200      	movs	r2, #0
 8006208:	701a      	strb	r2, [r3, #0]
	scan10Sec = FALSE;
 800620a:	4b0e      	ldr	r3, [pc, #56]	; (8006244 <clearTimeScanFlags+0x74>)
 800620c:	2200      	movs	r2, #0
 800620e:	701a      	strb	r2, [r3, #0]
	scan1Min = FALSE;
 8006210:	4b0d      	ldr	r3, [pc, #52]	; (8006248 <clearTimeScanFlags+0x78>)
 8006212:	2200      	movs	r2, #0
 8006214:	701a      	strb	r2, [r3, #0]
}
 8006216:	bf00      	nop
 8006218:	46bd      	mov	sp, r7
 800621a:	bc80      	pop	{r7}
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	2000023f 	.word	0x2000023f
 8006224:	20000240 	.word	0x20000240
 8006228:	20000241 	.word	0x20000241
 800622c:	20000242 	.word	0x20000242
 8006230:	20000243 	.word	0x20000243
 8006234:	20000244 	.word	0x20000244
 8006238:	20000245 	.word	0x20000245
 800623c:	20000246 	.word	0x20000246
 8006240:	20000247 	.word	0x20000247
 8006244:	20000248 	.word	0x20000248
 8006248:	20000249 	.word	0x20000249

0800624c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800624c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800624e:	e003      	b.n	8006258 <LoopCopyDataInit>

08006250 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006250:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006252:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006254:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006256:	3104      	adds	r1, #4

08006258 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006258:	480a      	ldr	r0, [pc, #40]	; (8006284 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800625a:	4b0b      	ldr	r3, [pc, #44]	; (8006288 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800625c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800625e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006260:	d3f6      	bcc.n	8006250 <CopyDataInit>
  ldr r2, =_sbss
 8006262:	4a0a      	ldr	r2, [pc, #40]	; (800628c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006264:	e002      	b.n	800626c <LoopFillZerobss>

08006266 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006266:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006268:	f842 3b04 	str.w	r3, [r2], #4

0800626c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800626c:	4b08      	ldr	r3, [pc, #32]	; (8006290 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800626e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006270:	d3f9      	bcc.n	8006266 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006272:	f7ff fe03 	bl	8005e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006276:	f000 f815 	bl	80062a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800627a:	f7fe fa6f 	bl	800475c <main>
  bx lr
 800627e:	4770      	bx	lr
  ldr r3, =_sidata
 8006280:	080094d0 	.word	0x080094d0
  ldr r0, =_sdata
 8006284:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006288:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 800628c:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8006290:	200004f4 	.word	0x200004f4

08006294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006294:	e7fe      	b.n	8006294 <ADC1_2_IRQHandler>
	...

08006298 <__errno>:
 8006298:	4b01      	ldr	r3, [pc, #4]	; (80062a0 <__errno+0x8>)
 800629a:	6818      	ldr	r0, [r3, #0]
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	2000000c 	.word	0x2000000c

080062a4 <__libc_init_array>:
 80062a4:	b570      	push	{r4, r5, r6, lr}
 80062a6:	2500      	movs	r5, #0
 80062a8:	4e0c      	ldr	r6, [pc, #48]	; (80062dc <__libc_init_array+0x38>)
 80062aa:	4c0d      	ldr	r4, [pc, #52]	; (80062e0 <__libc_init_array+0x3c>)
 80062ac:	1ba4      	subs	r4, r4, r6
 80062ae:	10a4      	asrs	r4, r4, #2
 80062b0:	42a5      	cmp	r5, r4
 80062b2:	d109      	bne.n	80062c8 <__libc_init_array+0x24>
 80062b4:	f002 ff88 	bl	80091c8 <_init>
 80062b8:	2500      	movs	r5, #0
 80062ba:	4e0a      	ldr	r6, [pc, #40]	; (80062e4 <__libc_init_array+0x40>)
 80062bc:	4c0a      	ldr	r4, [pc, #40]	; (80062e8 <__libc_init_array+0x44>)
 80062be:	1ba4      	subs	r4, r4, r6
 80062c0:	10a4      	asrs	r4, r4, #2
 80062c2:	42a5      	cmp	r5, r4
 80062c4:	d105      	bne.n	80062d2 <__libc_init_array+0x2e>
 80062c6:	bd70      	pop	{r4, r5, r6, pc}
 80062c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062cc:	4798      	blx	r3
 80062ce:	3501      	adds	r5, #1
 80062d0:	e7ee      	b.n	80062b0 <__libc_init_array+0xc>
 80062d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062d6:	4798      	blx	r3
 80062d8:	3501      	adds	r5, #1
 80062da:	e7f2      	b.n	80062c2 <__libc_init_array+0x1e>
 80062dc:	080094c8 	.word	0x080094c8
 80062e0:	080094c8 	.word	0x080094c8
 80062e4:	080094c8 	.word	0x080094c8
 80062e8:	080094cc 	.word	0x080094cc

080062ec <memset>:
 80062ec:	4603      	mov	r3, r0
 80062ee:	4402      	add	r2, r0
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d100      	bne.n	80062f6 <memset+0xa>
 80062f4:	4770      	bx	lr
 80062f6:	f803 1b01 	strb.w	r1, [r3], #1
 80062fa:	e7f9      	b.n	80062f0 <memset+0x4>

080062fc <__cvt>:
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006302:	461e      	mov	r6, r3
 8006304:	bfbb      	ittet	lt
 8006306:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800630a:	461e      	movlt	r6, r3
 800630c:	2300      	movge	r3, #0
 800630e:	232d      	movlt	r3, #45	; 0x2d
 8006310:	b088      	sub	sp, #32
 8006312:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006314:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8006318:	f027 0720 	bic.w	r7, r7, #32
 800631c:	2f46      	cmp	r7, #70	; 0x46
 800631e:	4614      	mov	r4, r2
 8006320:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006322:	700b      	strb	r3, [r1, #0]
 8006324:	d004      	beq.n	8006330 <__cvt+0x34>
 8006326:	2f45      	cmp	r7, #69	; 0x45
 8006328:	d100      	bne.n	800632c <__cvt+0x30>
 800632a:	3501      	adds	r5, #1
 800632c:	2302      	movs	r3, #2
 800632e:	e000      	b.n	8006332 <__cvt+0x36>
 8006330:	2303      	movs	r3, #3
 8006332:	aa07      	add	r2, sp, #28
 8006334:	9204      	str	r2, [sp, #16]
 8006336:	aa06      	add	r2, sp, #24
 8006338:	e9cd a202 	strd	sl, r2, [sp, #8]
 800633c:	e9cd 3500 	strd	r3, r5, [sp]
 8006340:	4622      	mov	r2, r4
 8006342:	4633      	mov	r3, r6
 8006344:	f000 fba8 	bl	8006a98 <_dtoa_r>
 8006348:	2f47      	cmp	r7, #71	; 0x47
 800634a:	4680      	mov	r8, r0
 800634c:	d102      	bne.n	8006354 <__cvt+0x58>
 800634e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006350:	07db      	lsls	r3, r3, #31
 8006352:	d526      	bpl.n	80063a2 <__cvt+0xa6>
 8006354:	2f46      	cmp	r7, #70	; 0x46
 8006356:	eb08 0905 	add.w	r9, r8, r5
 800635a:	d111      	bne.n	8006380 <__cvt+0x84>
 800635c:	f898 3000 	ldrb.w	r3, [r8]
 8006360:	2b30      	cmp	r3, #48	; 0x30
 8006362:	d10a      	bne.n	800637a <__cvt+0x7e>
 8006364:	2200      	movs	r2, #0
 8006366:	2300      	movs	r3, #0
 8006368:	4620      	mov	r0, r4
 800636a:	4631      	mov	r1, r6
 800636c:	f7fa fb1c 	bl	80009a8 <__aeabi_dcmpeq>
 8006370:	b918      	cbnz	r0, 800637a <__cvt+0x7e>
 8006372:	f1c5 0501 	rsb	r5, r5, #1
 8006376:	f8ca 5000 	str.w	r5, [sl]
 800637a:	f8da 3000 	ldr.w	r3, [sl]
 800637e:	4499      	add	r9, r3
 8006380:	2200      	movs	r2, #0
 8006382:	2300      	movs	r3, #0
 8006384:	4620      	mov	r0, r4
 8006386:	4631      	mov	r1, r6
 8006388:	f7fa fb0e 	bl	80009a8 <__aeabi_dcmpeq>
 800638c:	b938      	cbnz	r0, 800639e <__cvt+0xa2>
 800638e:	2230      	movs	r2, #48	; 0x30
 8006390:	9b07      	ldr	r3, [sp, #28]
 8006392:	454b      	cmp	r3, r9
 8006394:	d205      	bcs.n	80063a2 <__cvt+0xa6>
 8006396:	1c59      	adds	r1, r3, #1
 8006398:	9107      	str	r1, [sp, #28]
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	e7f8      	b.n	8006390 <__cvt+0x94>
 800639e:	f8cd 901c 	str.w	r9, [sp, #28]
 80063a2:	4640      	mov	r0, r8
 80063a4:	9b07      	ldr	r3, [sp, #28]
 80063a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80063a8:	eba3 0308 	sub.w	r3, r3, r8
 80063ac:	6013      	str	r3, [r2, #0]
 80063ae:	b008      	add	sp, #32
 80063b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080063b4 <__exponent>:
 80063b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063b6:	2900      	cmp	r1, #0
 80063b8:	bfb4      	ite	lt
 80063ba:	232d      	movlt	r3, #45	; 0x2d
 80063bc:	232b      	movge	r3, #43	; 0x2b
 80063be:	4604      	mov	r4, r0
 80063c0:	bfb8      	it	lt
 80063c2:	4249      	neglt	r1, r1
 80063c4:	2909      	cmp	r1, #9
 80063c6:	f804 2b02 	strb.w	r2, [r4], #2
 80063ca:	7043      	strb	r3, [r0, #1]
 80063cc:	dd21      	ble.n	8006412 <__exponent+0x5e>
 80063ce:	f10d 0307 	add.w	r3, sp, #7
 80063d2:	461f      	mov	r7, r3
 80063d4:	260a      	movs	r6, #10
 80063d6:	fb91 f5f6 	sdiv	r5, r1, r6
 80063da:	fb06 1115 	mls	r1, r6, r5, r1
 80063de:	2d09      	cmp	r5, #9
 80063e0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80063e4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80063e8:	f103 32ff 	add.w	r2, r3, #4294967295
 80063ec:	4629      	mov	r1, r5
 80063ee:	dc09      	bgt.n	8006404 <__exponent+0x50>
 80063f0:	3130      	adds	r1, #48	; 0x30
 80063f2:	3b02      	subs	r3, #2
 80063f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80063f8:	42bb      	cmp	r3, r7
 80063fa:	4622      	mov	r2, r4
 80063fc:	d304      	bcc.n	8006408 <__exponent+0x54>
 80063fe:	1a10      	subs	r0, r2, r0
 8006400:	b003      	add	sp, #12
 8006402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006404:	4613      	mov	r3, r2
 8006406:	e7e6      	b.n	80063d6 <__exponent+0x22>
 8006408:	f813 2b01 	ldrb.w	r2, [r3], #1
 800640c:	f804 2b01 	strb.w	r2, [r4], #1
 8006410:	e7f2      	b.n	80063f8 <__exponent+0x44>
 8006412:	2330      	movs	r3, #48	; 0x30
 8006414:	4419      	add	r1, r3
 8006416:	7083      	strb	r3, [r0, #2]
 8006418:	1d02      	adds	r2, r0, #4
 800641a:	70c1      	strb	r1, [r0, #3]
 800641c:	e7ef      	b.n	80063fe <__exponent+0x4a>
	...

08006420 <_printf_float>:
 8006420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006424:	b091      	sub	sp, #68	; 0x44
 8006426:	460c      	mov	r4, r1
 8006428:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800642a:	4693      	mov	fp, r2
 800642c:	461e      	mov	r6, r3
 800642e:	4605      	mov	r5, r0
 8006430:	f001 f8e6 	bl	8007600 <_localeconv_r>
 8006434:	6803      	ldr	r3, [r0, #0]
 8006436:	4618      	mov	r0, r3
 8006438:	9309      	str	r3, [sp, #36]	; 0x24
 800643a:	f7f9 fe89 	bl	8000150 <strlen>
 800643e:	2300      	movs	r3, #0
 8006440:	930e      	str	r3, [sp, #56]	; 0x38
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	900a      	str	r0, [sp, #40]	; 0x28
 8006446:	3307      	adds	r3, #7
 8006448:	f023 0307 	bic.w	r3, r3, #7
 800644c:	f103 0208 	add.w	r2, r3, #8
 8006450:	f894 8018 	ldrb.w	r8, [r4, #24]
 8006454:	f8d4 a000 	ldr.w	sl, [r4]
 8006458:	603a      	str	r2, [r7, #0]
 800645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006462:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8006466:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800646a:	930b      	str	r3, [sp, #44]	; 0x2c
 800646c:	f04f 32ff 	mov.w	r2, #4294967295
 8006470:	4ba6      	ldr	r3, [pc, #664]	; (800670c <_printf_float+0x2ec>)
 8006472:	4638      	mov	r0, r7
 8006474:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006476:	f7fa fac9 	bl	8000a0c <__aeabi_dcmpun>
 800647a:	bb68      	cbnz	r0, 80064d8 <_printf_float+0xb8>
 800647c:	f04f 32ff 	mov.w	r2, #4294967295
 8006480:	4ba2      	ldr	r3, [pc, #648]	; (800670c <_printf_float+0x2ec>)
 8006482:	4638      	mov	r0, r7
 8006484:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006486:	f7fa faa3 	bl	80009d0 <__aeabi_dcmple>
 800648a:	bb28      	cbnz	r0, 80064d8 <_printf_float+0xb8>
 800648c:	2200      	movs	r2, #0
 800648e:	2300      	movs	r3, #0
 8006490:	4638      	mov	r0, r7
 8006492:	4649      	mov	r1, r9
 8006494:	f7fa fa92 	bl	80009bc <__aeabi_dcmplt>
 8006498:	b110      	cbz	r0, 80064a0 <_printf_float+0x80>
 800649a:	232d      	movs	r3, #45	; 0x2d
 800649c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064a0:	4f9b      	ldr	r7, [pc, #620]	; (8006710 <_printf_float+0x2f0>)
 80064a2:	4b9c      	ldr	r3, [pc, #624]	; (8006714 <_printf_float+0x2f4>)
 80064a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80064a8:	bf98      	it	ls
 80064aa:	461f      	movls	r7, r3
 80064ac:	2303      	movs	r3, #3
 80064ae:	f04f 0900 	mov.w	r9, #0
 80064b2:	6123      	str	r3, [r4, #16]
 80064b4:	f02a 0304 	bic.w	r3, sl, #4
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	9600      	str	r6, [sp, #0]
 80064bc:	465b      	mov	r3, fp
 80064be:	aa0f      	add	r2, sp, #60	; 0x3c
 80064c0:	4621      	mov	r1, r4
 80064c2:	4628      	mov	r0, r5
 80064c4:	f000 f9e2 	bl	800688c <_printf_common>
 80064c8:	3001      	adds	r0, #1
 80064ca:	f040 8090 	bne.w	80065ee <_printf_float+0x1ce>
 80064ce:	f04f 30ff 	mov.w	r0, #4294967295
 80064d2:	b011      	add	sp, #68	; 0x44
 80064d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d8:	463a      	mov	r2, r7
 80064da:	464b      	mov	r3, r9
 80064dc:	4638      	mov	r0, r7
 80064de:	4649      	mov	r1, r9
 80064e0:	f7fa fa94 	bl	8000a0c <__aeabi_dcmpun>
 80064e4:	b110      	cbz	r0, 80064ec <_printf_float+0xcc>
 80064e6:	4f8c      	ldr	r7, [pc, #560]	; (8006718 <_printf_float+0x2f8>)
 80064e8:	4b8c      	ldr	r3, [pc, #560]	; (800671c <_printf_float+0x2fc>)
 80064ea:	e7db      	b.n	80064a4 <_printf_float+0x84>
 80064ec:	6863      	ldr	r3, [r4, #4]
 80064ee:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80064f2:	1c59      	adds	r1, r3, #1
 80064f4:	a80d      	add	r0, sp, #52	; 0x34
 80064f6:	a90e      	add	r1, sp, #56	; 0x38
 80064f8:	d140      	bne.n	800657c <_printf_float+0x15c>
 80064fa:	2306      	movs	r3, #6
 80064fc:	6063      	str	r3, [r4, #4]
 80064fe:	f04f 0c00 	mov.w	ip, #0
 8006502:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8006506:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800650a:	6863      	ldr	r3, [r4, #4]
 800650c:	6022      	str	r2, [r4, #0]
 800650e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	463a      	mov	r2, r7
 8006516:	464b      	mov	r3, r9
 8006518:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800651c:	4628      	mov	r0, r5
 800651e:	f7ff feed 	bl	80062fc <__cvt>
 8006522:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8006526:	2b47      	cmp	r3, #71	; 0x47
 8006528:	4607      	mov	r7, r0
 800652a:	d109      	bne.n	8006540 <_printf_float+0x120>
 800652c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800652e:	1cd8      	adds	r0, r3, #3
 8006530:	db02      	blt.n	8006538 <_printf_float+0x118>
 8006532:	6862      	ldr	r2, [r4, #4]
 8006534:	4293      	cmp	r3, r2
 8006536:	dd47      	ble.n	80065c8 <_printf_float+0x1a8>
 8006538:	f1a8 0802 	sub.w	r8, r8, #2
 800653c:	fa5f f888 	uxtb.w	r8, r8
 8006540:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006544:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006546:	d824      	bhi.n	8006592 <_printf_float+0x172>
 8006548:	3901      	subs	r1, #1
 800654a:	4642      	mov	r2, r8
 800654c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006550:	910d      	str	r1, [sp, #52]	; 0x34
 8006552:	f7ff ff2f 	bl	80063b4 <__exponent>
 8006556:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006558:	4681      	mov	r9, r0
 800655a:	1813      	adds	r3, r2, r0
 800655c:	2a01      	cmp	r2, #1
 800655e:	6123      	str	r3, [r4, #16]
 8006560:	dc02      	bgt.n	8006568 <_printf_float+0x148>
 8006562:	6822      	ldr	r2, [r4, #0]
 8006564:	07d1      	lsls	r1, r2, #31
 8006566:	d501      	bpl.n	800656c <_printf_float+0x14c>
 8006568:	3301      	adds	r3, #1
 800656a:	6123      	str	r3, [r4, #16]
 800656c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006570:	2b00      	cmp	r3, #0
 8006572:	d0a2      	beq.n	80064ba <_printf_float+0x9a>
 8006574:	232d      	movs	r3, #45	; 0x2d
 8006576:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800657a:	e79e      	b.n	80064ba <_printf_float+0x9a>
 800657c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8006580:	f000 816e 	beq.w	8006860 <_printf_float+0x440>
 8006584:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006588:	d1b9      	bne.n	80064fe <_printf_float+0xde>
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1b7      	bne.n	80064fe <_printf_float+0xde>
 800658e:	2301      	movs	r3, #1
 8006590:	e7b4      	b.n	80064fc <_printf_float+0xdc>
 8006592:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8006596:	d119      	bne.n	80065cc <_printf_float+0x1ac>
 8006598:	2900      	cmp	r1, #0
 800659a:	6863      	ldr	r3, [r4, #4]
 800659c:	dd0c      	ble.n	80065b8 <_printf_float+0x198>
 800659e:	6121      	str	r1, [r4, #16]
 80065a0:	b913      	cbnz	r3, 80065a8 <_printf_float+0x188>
 80065a2:	6822      	ldr	r2, [r4, #0]
 80065a4:	07d2      	lsls	r2, r2, #31
 80065a6:	d502      	bpl.n	80065ae <_printf_float+0x18e>
 80065a8:	3301      	adds	r3, #1
 80065aa:	440b      	add	r3, r1
 80065ac:	6123      	str	r3, [r4, #16]
 80065ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065b0:	f04f 0900 	mov.w	r9, #0
 80065b4:	65a3      	str	r3, [r4, #88]	; 0x58
 80065b6:	e7d9      	b.n	800656c <_printf_float+0x14c>
 80065b8:	b913      	cbnz	r3, 80065c0 <_printf_float+0x1a0>
 80065ba:	6822      	ldr	r2, [r4, #0]
 80065bc:	07d0      	lsls	r0, r2, #31
 80065be:	d501      	bpl.n	80065c4 <_printf_float+0x1a4>
 80065c0:	3302      	adds	r3, #2
 80065c2:	e7f3      	b.n	80065ac <_printf_float+0x18c>
 80065c4:	2301      	movs	r3, #1
 80065c6:	e7f1      	b.n	80065ac <_printf_float+0x18c>
 80065c8:	f04f 0867 	mov.w	r8, #103	; 0x67
 80065cc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80065d0:	4293      	cmp	r3, r2
 80065d2:	db05      	blt.n	80065e0 <_printf_float+0x1c0>
 80065d4:	6822      	ldr	r2, [r4, #0]
 80065d6:	6123      	str	r3, [r4, #16]
 80065d8:	07d1      	lsls	r1, r2, #31
 80065da:	d5e8      	bpl.n	80065ae <_printf_float+0x18e>
 80065dc:	3301      	adds	r3, #1
 80065de:	e7e5      	b.n	80065ac <_printf_float+0x18c>
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	bfcc      	ite	gt
 80065e4:	2301      	movgt	r3, #1
 80065e6:	f1c3 0302 	rsble	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	e7de      	b.n	80065ac <_printf_float+0x18c>
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	055a      	lsls	r2, r3, #21
 80065f2:	d407      	bmi.n	8006604 <_printf_float+0x1e4>
 80065f4:	6923      	ldr	r3, [r4, #16]
 80065f6:	463a      	mov	r2, r7
 80065f8:	4659      	mov	r1, fp
 80065fa:	4628      	mov	r0, r5
 80065fc:	47b0      	blx	r6
 80065fe:	3001      	adds	r0, #1
 8006600:	d129      	bne.n	8006656 <_printf_float+0x236>
 8006602:	e764      	b.n	80064ce <_printf_float+0xae>
 8006604:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006608:	f240 80d7 	bls.w	80067ba <_printf_float+0x39a>
 800660c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006610:	2200      	movs	r2, #0
 8006612:	2300      	movs	r3, #0
 8006614:	f7fa f9c8 	bl	80009a8 <__aeabi_dcmpeq>
 8006618:	b388      	cbz	r0, 800667e <_printf_float+0x25e>
 800661a:	2301      	movs	r3, #1
 800661c:	4a40      	ldr	r2, [pc, #256]	; (8006720 <_printf_float+0x300>)
 800661e:	4659      	mov	r1, fp
 8006620:	4628      	mov	r0, r5
 8006622:	47b0      	blx	r6
 8006624:	3001      	adds	r0, #1
 8006626:	f43f af52 	beq.w	80064ce <_printf_float+0xae>
 800662a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800662e:	429a      	cmp	r2, r3
 8006630:	db02      	blt.n	8006638 <_printf_float+0x218>
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	07d8      	lsls	r0, r3, #31
 8006636:	d50e      	bpl.n	8006656 <_printf_float+0x236>
 8006638:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800663c:	4659      	mov	r1, fp
 800663e:	4628      	mov	r0, r5
 8006640:	47b0      	blx	r6
 8006642:	3001      	adds	r0, #1
 8006644:	f43f af43 	beq.w	80064ce <_printf_float+0xae>
 8006648:	2700      	movs	r7, #0
 800664a:	f104 081a 	add.w	r8, r4, #26
 800664e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006650:	3b01      	subs	r3, #1
 8006652:	42bb      	cmp	r3, r7
 8006654:	dc09      	bgt.n	800666a <_printf_float+0x24a>
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	079f      	lsls	r7, r3, #30
 800665a:	f100 80fd 	bmi.w	8006858 <_printf_float+0x438>
 800665e:	68e0      	ldr	r0, [r4, #12]
 8006660:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006662:	4298      	cmp	r0, r3
 8006664:	bfb8      	it	lt
 8006666:	4618      	movlt	r0, r3
 8006668:	e733      	b.n	80064d2 <_printf_float+0xb2>
 800666a:	2301      	movs	r3, #1
 800666c:	4642      	mov	r2, r8
 800666e:	4659      	mov	r1, fp
 8006670:	4628      	mov	r0, r5
 8006672:	47b0      	blx	r6
 8006674:	3001      	adds	r0, #1
 8006676:	f43f af2a 	beq.w	80064ce <_printf_float+0xae>
 800667a:	3701      	adds	r7, #1
 800667c:	e7e7      	b.n	800664e <_printf_float+0x22e>
 800667e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006680:	2b00      	cmp	r3, #0
 8006682:	dc2b      	bgt.n	80066dc <_printf_float+0x2bc>
 8006684:	2301      	movs	r3, #1
 8006686:	4a26      	ldr	r2, [pc, #152]	; (8006720 <_printf_float+0x300>)
 8006688:	4659      	mov	r1, fp
 800668a:	4628      	mov	r0, r5
 800668c:	47b0      	blx	r6
 800668e:	3001      	adds	r0, #1
 8006690:	f43f af1d 	beq.w	80064ce <_printf_float+0xae>
 8006694:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006696:	b923      	cbnz	r3, 80066a2 <_printf_float+0x282>
 8006698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800669a:	b913      	cbnz	r3, 80066a2 <_printf_float+0x282>
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	07d9      	lsls	r1, r3, #31
 80066a0:	d5d9      	bpl.n	8006656 <_printf_float+0x236>
 80066a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066a6:	4659      	mov	r1, fp
 80066a8:	4628      	mov	r0, r5
 80066aa:	47b0      	blx	r6
 80066ac:	3001      	adds	r0, #1
 80066ae:	f43f af0e 	beq.w	80064ce <_printf_float+0xae>
 80066b2:	f04f 0800 	mov.w	r8, #0
 80066b6:	f104 091a 	add.w	r9, r4, #26
 80066ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066bc:	425b      	negs	r3, r3
 80066be:	4543      	cmp	r3, r8
 80066c0:	dc01      	bgt.n	80066c6 <_printf_float+0x2a6>
 80066c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066c4:	e797      	b.n	80065f6 <_printf_float+0x1d6>
 80066c6:	2301      	movs	r3, #1
 80066c8:	464a      	mov	r2, r9
 80066ca:	4659      	mov	r1, fp
 80066cc:	4628      	mov	r0, r5
 80066ce:	47b0      	blx	r6
 80066d0:	3001      	adds	r0, #1
 80066d2:	f43f aefc 	beq.w	80064ce <_printf_float+0xae>
 80066d6:	f108 0801 	add.w	r8, r8, #1
 80066da:	e7ee      	b.n	80066ba <_printf_float+0x29a>
 80066dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066e0:	429a      	cmp	r2, r3
 80066e2:	bfa8      	it	ge
 80066e4:	461a      	movge	r2, r3
 80066e6:	2a00      	cmp	r2, #0
 80066e8:	4690      	mov	r8, r2
 80066ea:	dd07      	ble.n	80066fc <_printf_float+0x2dc>
 80066ec:	4613      	mov	r3, r2
 80066ee:	4659      	mov	r1, fp
 80066f0:	463a      	mov	r2, r7
 80066f2:	4628      	mov	r0, r5
 80066f4:	47b0      	blx	r6
 80066f6:	3001      	adds	r0, #1
 80066f8:	f43f aee9 	beq.w	80064ce <_printf_float+0xae>
 80066fc:	f104 031a 	add.w	r3, r4, #26
 8006700:	f04f 0a00 	mov.w	sl, #0
 8006704:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8006708:	930b      	str	r3, [sp, #44]	; 0x2c
 800670a:	e015      	b.n	8006738 <_printf_float+0x318>
 800670c:	7fefffff 	.word	0x7fefffff
 8006710:	08009210 	.word	0x08009210
 8006714:	0800920c 	.word	0x0800920c
 8006718:	08009218 	.word	0x08009218
 800671c:	08009214 	.word	0x08009214
 8006720:	0800921c 	.word	0x0800921c
 8006724:	2301      	movs	r3, #1
 8006726:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006728:	4659      	mov	r1, fp
 800672a:	4628      	mov	r0, r5
 800672c:	47b0      	blx	r6
 800672e:	3001      	adds	r0, #1
 8006730:	f43f aecd 	beq.w	80064ce <_printf_float+0xae>
 8006734:	f10a 0a01 	add.w	sl, sl, #1
 8006738:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800673c:	eba9 0308 	sub.w	r3, r9, r8
 8006740:	4553      	cmp	r3, sl
 8006742:	dcef      	bgt.n	8006724 <_printf_float+0x304>
 8006744:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006748:	429a      	cmp	r2, r3
 800674a:	444f      	add	r7, r9
 800674c:	db14      	blt.n	8006778 <_printf_float+0x358>
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	07da      	lsls	r2, r3, #31
 8006752:	d411      	bmi.n	8006778 <_printf_float+0x358>
 8006754:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006756:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006758:	eba3 0209 	sub.w	r2, r3, r9
 800675c:	eba3 0901 	sub.w	r9, r3, r1
 8006760:	4591      	cmp	r9, r2
 8006762:	bfa8      	it	ge
 8006764:	4691      	movge	r9, r2
 8006766:	f1b9 0f00 	cmp.w	r9, #0
 800676a:	dc0d      	bgt.n	8006788 <_printf_float+0x368>
 800676c:	2700      	movs	r7, #0
 800676e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006772:	f104 081a 	add.w	r8, r4, #26
 8006776:	e018      	b.n	80067aa <_printf_float+0x38a>
 8006778:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800677c:	4659      	mov	r1, fp
 800677e:	4628      	mov	r0, r5
 8006780:	47b0      	blx	r6
 8006782:	3001      	adds	r0, #1
 8006784:	d1e6      	bne.n	8006754 <_printf_float+0x334>
 8006786:	e6a2      	b.n	80064ce <_printf_float+0xae>
 8006788:	464b      	mov	r3, r9
 800678a:	463a      	mov	r2, r7
 800678c:	4659      	mov	r1, fp
 800678e:	4628      	mov	r0, r5
 8006790:	47b0      	blx	r6
 8006792:	3001      	adds	r0, #1
 8006794:	d1ea      	bne.n	800676c <_printf_float+0x34c>
 8006796:	e69a      	b.n	80064ce <_printf_float+0xae>
 8006798:	2301      	movs	r3, #1
 800679a:	4642      	mov	r2, r8
 800679c:	4659      	mov	r1, fp
 800679e:	4628      	mov	r0, r5
 80067a0:	47b0      	blx	r6
 80067a2:	3001      	adds	r0, #1
 80067a4:	f43f ae93 	beq.w	80064ce <_printf_float+0xae>
 80067a8:	3701      	adds	r7, #1
 80067aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80067ae:	1a9b      	subs	r3, r3, r2
 80067b0:	eba3 0309 	sub.w	r3, r3, r9
 80067b4:	42bb      	cmp	r3, r7
 80067b6:	dcef      	bgt.n	8006798 <_printf_float+0x378>
 80067b8:	e74d      	b.n	8006656 <_printf_float+0x236>
 80067ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067bc:	2a01      	cmp	r2, #1
 80067be:	dc01      	bgt.n	80067c4 <_printf_float+0x3a4>
 80067c0:	07db      	lsls	r3, r3, #31
 80067c2:	d538      	bpl.n	8006836 <_printf_float+0x416>
 80067c4:	2301      	movs	r3, #1
 80067c6:	463a      	mov	r2, r7
 80067c8:	4659      	mov	r1, fp
 80067ca:	4628      	mov	r0, r5
 80067cc:	47b0      	blx	r6
 80067ce:	3001      	adds	r0, #1
 80067d0:	f43f ae7d 	beq.w	80064ce <_printf_float+0xae>
 80067d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067d8:	4659      	mov	r1, fp
 80067da:	4628      	mov	r0, r5
 80067dc:	47b0      	blx	r6
 80067de:	3001      	adds	r0, #1
 80067e0:	f107 0701 	add.w	r7, r7, #1
 80067e4:	f43f ae73 	beq.w	80064ce <_printf_float+0xae>
 80067e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067ee:	2200      	movs	r2, #0
 80067f0:	f103 38ff 	add.w	r8, r3, #4294967295
 80067f4:	2300      	movs	r3, #0
 80067f6:	f7fa f8d7 	bl	80009a8 <__aeabi_dcmpeq>
 80067fa:	b9c0      	cbnz	r0, 800682e <_printf_float+0x40e>
 80067fc:	4643      	mov	r3, r8
 80067fe:	463a      	mov	r2, r7
 8006800:	4659      	mov	r1, fp
 8006802:	4628      	mov	r0, r5
 8006804:	47b0      	blx	r6
 8006806:	3001      	adds	r0, #1
 8006808:	d10d      	bne.n	8006826 <_printf_float+0x406>
 800680a:	e660      	b.n	80064ce <_printf_float+0xae>
 800680c:	2301      	movs	r3, #1
 800680e:	4642      	mov	r2, r8
 8006810:	4659      	mov	r1, fp
 8006812:	4628      	mov	r0, r5
 8006814:	47b0      	blx	r6
 8006816:	3001      	adds	r0, #1
 8006818:	f43f ae59 	beq.w	80064ce <_printf_float+0xae>
 800681c:	3701      	adds	r7, #1
 800681e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006820:	3b01      	subs	r3, #1
 8006822:	42bb      	cmp	r3, r7
 8006824:	dcf2      	bgt.n	800680c <_printf_float+0x3ec>
 8006826:	464b      	mov	r3, r9
 8006828:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800682c:	e6e4      	b.n	80065f8 <_printf_float+0x1d8>
 800682e:	2700      	movs	r7, #0
 8006830:	f104 081a 	add.w	r8, r4, #26
 8006834:	e7f3      	b.n	800681e <_printf_float+0x3fe>
 8006836:	2301      	movs	r3, #1
 8006838:	e7e1      	b.n	80067fe <_printf_float+0x3de>
 800683a:	2301      	movs	r3, #1
 800683c:	4642      	mov	r2, r8
 800683e:	4659      	mov	r1, fp
 8006840:	4628      	mov	r0, r5
 8006842:	47b0      	blx	r6
 8006844:	3001      	adds	r0, #1
 8006846:	f43f ae42 	beq.w	80064ce <_printf_float+0xae>
 800684a:	3701      	adds	r7, #1
 800684c:	68e3      	ldr	r3, [r4, #12]
 800684e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006850:	1a9b      	subs	r3, r3, r2
 8006852:	42bb      	cmp	r3, r7
 8006854:	dcf1      	bgt.n	800683a <_printf_float+0x41a>
 8006856:	e702      	b.n	800665e <_printf_float+0x23e>
 8006858:	2700      	movs	r7, #0
 800685a:	f104 0819 	add.w	r8, r4, #25
 800685e:	e7f5      	b.n	800684c <_printf_float+0x42c>
 8006860:	2b00      	cmp	r3, #0
 8006862:	f43f ae94 	beq.w	800658e <_printf_float+0x16e>
 8006866:	f04f 0c00 	mov.w	ip, #0
 800686a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800686e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8006872:	6022      	str	r2, [r4, #0]
 8006874:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8006878:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	463a      	mov	r2, r7
 8006880:	464b      	mov	r3, r9
 8006882:	4628      	mov	r0, r5
 8006884:	f7ff fd3a 	bl	80062fc <__cvt>
 8006888:	4607      	mov	r7, r0
 800688a:	e64f      	b.n	800652c <_printf_float+0x10c>

0800688c <_printf_common>:
 800688c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006890:	4691      	mov	r9, r2
 8006892:	461f      	mov	r7, r3
 8006894:	688a      	ldr	r2, [r1, #8]
 8006896:	690b      	ldr	r3, [r1, #16]
 8006898:	4606      	mov	r6, r0
 800689a:	4293      	cmp	r3, r2
 800689c:	bfb8      	it	lt
 800689e:	4613      	movlt	r3, r2
 80068a0:	f8c9 3000 	str.w	r3, [r9]
 80068a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068a8:	460c      	mov	r4, r1
 80068aa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068ae:	b112      	cbz	r2, 80068b6 <_printf_common+0x2a>
 80068b0:	3301      	adds	r3, #1
 80068b2:	f8c9 3000 	str.w	r3, [r9]
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	0699      	lsls	r1, r3, #26
 80068ba:	bf42      	ittt	mi
 80068bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80068c0:	3302      	addmi	r3, #2
 80068c2:	f8c9 3000 	strmi.w	r3, [r9]
 80068c6:	6825      	ldr	r5, [r4, #0]
 80068c8:	f015 0506 	ands.w	r5, r5, #6
 80068cc:	d107      	bne.n	80068de <_printf_common+0x52>
 80068ce:	f104 0a19 	add.w	sl, r4, #25
 80068d2:	68e3      	ldr	r3, [r4, #12]
 80068d4:	f8d9 2000 	ldr.w	r2, [r9]
 80068d8:	1a9b      	subs	r3, r3, r2
 80068da:	42ab      	cmp	r3, r5
 80068dc:	dc29      	bgt.n	8006932 <_printf_common+0xa6>
 80068de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80068e2:	6822      	ldr	r2, [r4, #0]
 80068e4:	3300      	adds	r3, #0
 80068e6:	bf18      	it	ne
 80068e8:	2301      	movne	r3, #1
 80068ea:	0692      	lsls	r2, r2, #26
 80068ec:	d42e      	bmi.n	800694c <_printf_common+0xc0>
 80068ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068f2:	4639      	mov	r1, r7
 80068f4:	4630      	mov	r0, r6
 80068f6:	47c0      	blx	r8
 80068f8:	3001      	adds	r0, #1
 80068fa:	d021      	beq.n	8006940 <_printf_common+0xb4>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	68e5      	ldr	r5, [r4, #12]
 8006900:	f003 0306 	and.w	r3, r3, #6
 8006904:	2b04      	cmp	r3, #4
 8006906:	bf18      	it	ne
 8006908:	2500      	movne	r5, #0
 800690a:	f8d9 2000 	ldr.w	r2, [r9]
 800690e:	f04f 0900 	mov.w	r9, #0
 8006912:	bf08      	it	eq
 8006914:	1aad      	subeq	r5, r5, r2
 8006916:	68a3      	ldr	r3, [r4, #8]
 8006918:	6922      	ldr	r2, [r4, #16]
 800691a:	bf08      	it	eq
 800691c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006920:	4293      	cmp	r3, r2
 8006922:	bfc4      	itt	gt
 8006924:	1a9b      	subgt	r3, r3, r2
 8006926:	18ed      	addgt	r5, r5, r3
 8006928:	341a      	adds	r4, #26
 800692a:	454d      	cmp	r5, r9
 800692c:	d11a      	bne.n	8006964 <_printf_common+0xd8>
 800692e:	2000      	movs	r0, #0
 8006930:	e008      	b.n	8006944 <_printf_common+0xb8>
 8006932:	2301      	movs	r3, #1
 8006934:	4652      	mov	r2, sl
 8006936:	4639      	mov	r1, r7
 8006938:	4630      	mov	r0, r6
 800693a:	47c0      	blx	r8
 800693c:	3001      	adds	r0, #1
 800693e:	d103      	bne.n	8006948 <_printf_common+0xbc>
 8006940:	f04f 30ff 	mov.w	r0, #4294967295
 8006944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006948:	3501      	adds	r5, #1
 800694a:	e7c2      	b.n	80068d2 <_printf_common+0x46>
 800694c:	2030      	movs	r0, #48	; 0x30
 800694e:	18e1      	adds	r1, r4, r3
 8006950:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006954:	1c5a      	adds	r2, r3, #1
 8006956:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800695a:	4422      	add	r2, r4
 800695c:	3302      	adds	r3, #2
 800695e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006962:	e7c4      	b.n	80068ee <_printf_common+0x62>
 8006964:	2301      	movs	r3, #1
 8006966:	4622      	mov	r2, r4
 8006968:	4639      	mov	r1, r7
 800696a:	4630      	mov	r0, r6
 800696c:	47c0      	blx	r8
 800696e:	3001      	adds	r0, #1
 8006970:	d0e6      	beq.n	8006940 <_printf_common+0xb4>
 8006972:	f109 0901 	add.w	r9, r9, #1
 8006976:	e7d8      	b.n	800692a <_printf_common+0x9e>

08006978 <quorem>:
 8006978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697c:	6903      	ldr	r3, [r0, #16]
 800697e:	690c      	ldr	r4, [r1, #16]
 8006980:	4680      	mov	r8, r0
 8006982:	42a3      	cmp	r3, r4
 8006984:	f2c0 8084 	blt.w	8006a90 <quorem+0x118>
 8006988:	3c01      	subs	r4, #1
 800698a:	f101 0714 	add.w	r7, r1, #20
 800698e:	f100 0614 	add.w	r6, r0, #20
 8006992:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006996:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800699a:	3501      	adds	r5, #1
 800699c:	fbb0 f5f5 	udiv	r5, r0, r5
 80069a0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80069a4:	eb06 030c 	add.w	r3, r6, ip
 80069a8:	eb07 090c 	add.w	r9, r7, ip
 80069ac:	9301      	str	r3, [sp, #4]
 80069ae:	b39d      	cbz	r5, 8006a18 <quorem+0xa0>
 80069b0:	f04f 0a00 	mov.w	sl, #0
 80069b4:	4638      	mov	r0, r7
 80069b6:	46b6      	mov	lr, r6
 80069b8:	46d3      	mov	fp, sl
 80069ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80069be:	b293      	uxth	r3, r2
 80069c0:	fb05 a303 	mla	r3, r5, r3, sl
 80069c4:	0c12      	lsrs	r2, r2, #16
 80069c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80069ca:	fb05 a202 	mla	r2, r5, r2, sl
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	ebab 0303 	sub.w	r3, fp, r3
 80069d4:	f8de b000 	ldr.w	fp, [lr]
 80069d8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80069dc:	fa1f fb8b 	uxth.w	fp, fp
 80069e0:	445b      	add	r3, fp
 80069e2:	fa1f fb82 	uxth.w	fp, r2
 80069e6:	f8de 2000 	ldr.w	r2, [lr]
 80069ea:	4581      	cmp	r9, r0
 80069ec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80069f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069fa:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80069fe:	f84e 3b04 	str.w	r3, [lr], #4
 8006a02:	d2da      	bcs.n	80069ba <quorem+0x42>
 8006a04:	f856 300c 	ldr.w	r3, [r6, ip]
 8006a08:	b933      	cbnz	r3, 8006a18 <quorem+0xa0>
 8006a0a:	9b01      	ldr	r3, [sp, #4]
 8006a0c:	3b04      	subs	r3, #4
 8006a0e:	429e      	cmp	r6, r3
 8006a10:	461a      	mov	r2, r3
 8006a12:	d331      	bcc.n	8006a78 <quorem+0x100>
 8006a14:	f8c8 4010 	str.w	r4, [r8, #16]
 8006a18:	4640      	mov	r0, r8
 8006a1a:	f001 f827 	bl	8007a6c <__mcmp>
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	db26      	blt.n	8006a70 <quorem+0xf8>
 8006a22:	4630      	mov	r0, r6
 8006a24:	f04f 0c00 	mov.w	ip, #0
 8006a28:	3501      	adds	r5, #1
 8006a2a:	f857 1b04 	ldr.w	r1, [r7], #4
 8006a2e:	f8d0 e000 	ldr.w	lr, [r0]
 8006a32:	b28b      	uxth	r3, r1
 8006a34:	ebac 0303 	sub.w	r3, ip, r3
 8006a38:	fa1f f28e 	uxth.w	r2, lr
 8006a3c:	4413      	add	r3, r2
 8006a3e:	0c0a      	lsrs	r2, r1, #16
 8006a40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006a44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a4e:	45b9      	cmp	r9, r7
 8006a50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006a54:	f840 3b04 	str.w	r3, [r0], #4
 8006a58:	d2e7      	bcs.n	8006a2a <quorem+0xb2>
 8006a5a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006a5e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006a62:	b92a      	cbnz	r2, 8006a70 <quorem+0xf8>
 8006a64:	3b04      	subs	r3, #4
 8006a66:	429e      	cmp	r6, r3
 8006a68:	461a      	mov	r2, r3
 8006a6a:	d30b      	bcc.n	8006a84 <quorem+0x10c>
 8006a6c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006a70:	4628      	mov	r0, r5
 8006a72:	b003      	add	sp, #12
 8006a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a78:	6812      	ldr	r2, [r2, #0]
 8006a7a:	3b04      	subs	r3, #4
 8006a7c:	2a00      	cmp	r2, #0
 8006a7e:	d1c9      	bne.n	8006a14 <quorem+0x9c>
 8006a80:	3c01      	subs	r4, #1
 8006a82:	e7c4      	b.n	8006a0e <quorem+0x96>
 8006a84:	6812      	ldr	r2, [r2, #0]
 8006a86:	3b04      	subs	r3, #4
 8006a88:	2a00      	cmp	r2, #0
 8006a8a:	d1ef      	bne.n	8006a6c <quorem+0xf4>
 8006a8c:	3c01      	subs	r4, #1
 8006a8e:	e7ea      	b.n	8006a66 <quorem+0xee>
 8006a90:	2000      	movs	r0, #0
 8006a92:	e7ee      	b.n	8006a72 <quorem+0xfa>
 8006a94:	0000      	movs	r0, r0
	...

08006a98 <_dtoa_r>:
 8006a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9c:	4616      	mov	r6, r2
 8006a9e:	461f      	mov	r7, r3
 8006aa0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006aa2:	b095      	sub	sp, #84	; 0x54
 8006aa4:	4604      	mov	r4, r0
 8006aa6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8006aaa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006aae:	b93d      	cbnz	r5, 8006ac0 <_dtoa_r+0x28>
 8006ab0:	2010      	movs	r0, #16
 8006ab2:	f000 fdb3 	bl	800761c <malloc>
 8006ab6:	6260      	str	r0, [r4, #36]	; 0x24
 8006ab8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006abc:	6005      	str	r5, [r0, #0]
 8006abe:	60c5      	str	r5, [r0, #12]
 8006ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ac2:	6819      	ldr	r1, [r3, #0]
 8006ac4:	b151      	cbz	r1, 8006adc <_dtoa_r+0x44>
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	2301      	movs	r3, #1
 8006aca:	4093      	lsls	r3, r2
 8006acc:	604a      	str	r2, [r1, #4]
 8006ace:	608b      	str	r3, [r1, #8]
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f000 fdea 	bl	80076aa <_Bfree>
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	1e3b      	subs	r3, r7, #0
 8006ade:	bfaf      	iteee	ge
 8006ae0:	2300      	movge	r3, #0
 8006ae2:	2201      	movlt	r2, #1
 8006ae4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ae8:	9303      	strlt	r3, [sp, #12]
 8006aea:	bfac      	ite	ge
 8006aec:	f8c8 3000 	strge.w	r3, [r8]
 8006af0:	f8c8 2000 	strlt.w	r2, [r8]
 8006af4:	4bae      	ldr	r3, [pc, #696]	; (8006db0 <_dtoa_r+0x318>)
 8006af6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006afa:	ea33 0308 	bics.w	r3, r3, r8
 8006afe:	d11b      	bne.n	8006b38 <_dtoa_r+0xa0>
 8006b00:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006b06:	6013      	str	r3, [r2, #0]
 8006b08:	9b02      	ldr	r3, [sp, #8]
 8006b0a:	b923      	cbnz	r3, 8006b16 <_dtoa_r+0x7e>
 8006b0c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006b10:	2800      	cmp	r0, #0
 8006b12:	f000 8545 	beq.w	80075a0 <_dtoa_r+0xb08>
 8006b16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b18:	b953      	cbnz	r3, 8006b30 <_dtoa_r+0x98>
 8006b1a:	4ba6      	ldr	r3, [pc, #664]	; (8006db4 <_dtoa_r+0x31c>)
 8006b1c:	e021      	b.n	8006b62 <_dtoa_r+0xca>
 8006b1e:	4ba6      	ldr	r3, [pc, #664]	; (8006db8 <_dtoa_r+0x320>)
 8006b20:	9306      	str	r3, [sp, #24]
 8006b22:	3308      	adds	r3, #8
 8006b24:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	9806      	ldr	r0, [sp, #24]
 8006b2a:	b015      	add	sp, #84	; 0x54
 8006b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b30:	4ba0      	ldr	r3, [pc, #640]	; (8006db4 <_dtoa_r+0x31c>)
 8006b32:	9306      	str	r3, [sp, #24]
 8006b34:	3303      	adds	r3, #3
 8006b36:	e7f5      	b.n	8006b24 <_dtoa_r+0x8c>
 8006b38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	2300      	movs	r3, #0
 8006b40:	4630      	mov	r0, r6
 8006b42:	4639      	mov	r1, r7
 8006b44:	f7f9 ff30 	bl	80009a8 <__aeabi_dcmpeq>
 8006b48:	4682      	mov	sl, r0
 8006b4a:	b160      	cbz	r0, 8006b66 <_dtoa_r+0xce>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006b50:	6013      	str	r3, [r2, #0]
 8006b52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 8520 	beq.w	800759a <_dtoa_r+0xb02>
 8006b5a:	4b98      	ldr	r3, [pc, #608]	; (8006dbc <_dtoa_r+0x324>)
 8006b5c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006b5e:	6013      	str	r3, [r2, #0]
 8006b60:	3b01      	subs	r3, #1
 8006b62:	9306      	str	r3, [sp, #24]
 8006b64:	e7e0      	b.n	8006b28 <_dtoa_r+0x90>
 8006b66:	ab12      	add	r3, sp, #72	; 0x48
 8006b68:	9301      	str	r3, [sp, #4]
 8006b6a:	ab13      	add	r3, sp, #76	; 0x4c
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	4632      	mov	r2, r6
 8006b70:	463b      	mov	r3, r7
 8006b72:	4620      	mov	r0, r4
 8006b74:	f000 fff2 	bl	8007b5c <__d2b>
 8006b78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006b7c:	4683      	mov	fp, r0
 8006b7e:	2d00      	cmp	r5, #0
 8006b80:	d07d      	beq.n	8006c7e <_dtoa_r+0x1e6>
 8006b82:	46b0      	mov	r8, r6
 8006b84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b88:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8006b8c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006b90:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b94:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006b98:	2200      	movs	r2, #0
 8006b9a:	4b89      	ldr	r3, [pc, #548]	; (8006dc0 <_dtoa_r+0x328>)
 8006b9c:	4640      	mov	r0, r8
 8006b9e:	4649      	mov	r1, r9
 8006ba0:	f7f9 fae2 	bl	8000168 <__aeabi_dsub>
 8006ba4:	a37c      	add	r3, pc, #496	; (adr r3, 8006d98 <_dtoa_r+0x300>)
 8006ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006baa:	f7f9 fc95 	bl	80004d8 <__aeabi_dmul>
 8006bae:	a37c      	add	r3, pc, #496	; (adr r3, 8006da0 <_dtoa_r+0x308>)
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	f7f9 fada 	bl	800016c <__adddf3>
 8006bb8:	4606      	mov	r6, r0
 8006bba:	4628      	mov	r0, r5
 8006bbc:	460f      	mov	r7, r1
 8006bbe:	f7f9 fc21 	bl	8000404 <__aeabi_i2d>
 8006bc2:	a379      	add	r3, pc, #484	; (adr r3, 8006da8 <_dtoa_r+0x310>)
 8006bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc8:	f7f9 fc86 	bl	80004d8 <__aeabi_dmul>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	460b      	mov	r3, r1
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	4639      	mov	r1, r7
 8006bd4:	f7f9 faca 	bl	800016c <__adddf3>
 8006bd8:	4606      	mov	r6, r0
 8006bda:	460f      	mov	r7, r1
 8006bdc:	f7f9 ff2c 	bl	8000a38 <__aeabi_d2iz>
 8006be0:	2200      	movs	r2, #0
 8006be2:	4682      	mov	sl, r0
 8006be4:	2300      	movs	r3, #0
 8006be6:	4630      	mov	r0, r6
 8006be8:	4639      	mov	r1, r7
 8006bea:	f7f9 fee7 	bl	80009bc <__aeabi_dcmplt>
 8006bee:	b148      	cbz	r0, 8006c04 <_dtoa_r+0x16c>
 8006bf0:	4650      	mov	r0, sl
 8006bf2:	f7f9 fc07 	bl	8000404 <__aeabi_i2d>
 8006bf6:	4632      	mov	r2, r6
 8006bf8:	463b      	mov	r3, r7
 8006bfa:	f7f9 fed5 	bl	80009a8 <__aeabi_dcmpeq>
 8006bfe:	b908      	cbnz	r0, 8006c04 <_dtoa_r+0x16c>
 8006c00:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c04:	f1ba 0f16 	cmp.w	sl, #22
 8006c08:	d85a      	bhi.n	8006cc0 <_dtoa_r+0x228>
 8006c0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c0e:	496d      	ldr	r1, [pc, #436]	; (8006dc4 <_dtoa_r+0x32c>)
 8006c10:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006c14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c18:	f7f9 feee 	bl	80009f8 <__aeabi_dcmpgt>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d051      	beq.n	8006cc4 <_dtoa_r+0x22c>
 8006c20:	2300      	movs	r3, #0
 8006c22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c26:	930d      	str	r3, [sp, #52]	; 0x34
 8006c28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c2a:	1b5d      	subs	r5, r3, r5
 8006c2c:	1e6b      	subs	r3, r5, #1
 8006c2e:	9307      	str	r3, [sp, #28]
 8006c30:	bf43      	ittte	mi
 8006c32:	2300      	movmi	r3, #0
 8006c34:	f1c5 0901 	rsbmi	r9, r5, #1
 8006c38:	9307      	strmi	r3, [sp, #28]
 8006c3a:	f04f 0900 	movpl.w	r9, #0
 8006c3e:	f1ba 0f00 	cmp.w	sl, #0
 8006c42:	db41      	blt.n	8006cc8 <_dtoa_r+0x230>
 8006c44:	9b07      	ldr	r3, [sp, #28]
 8006c46:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006c4a:	4453      	add	r3, sl
 8006c4c:	9307      	str	r3, [sp, #28]
 8006c4e:	2300      	movs	r3, #0
 8006c50:	9308      	str	r3, [sp, #32]
 8006c52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006c54:	2b09      	cmp	r3, #9
 8006c56:	f200 808f 	bhi.w	8006d78 <_dtoa_r+0x2e0>
 8006c5a:	2b05      	cmp	r3, #5
 8006c5c:	bfc4      	itt	gt
 8006c5e:	3b04      	subgt	r3, #4
 8006c60:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006c62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006c64:	bfc8      	it	gt
 8006c66:	2500      	movgt	r5, #0
 8006c68:	f1a3 0302 	sub.w	r3, r3, #2
 8006c6c:	bfd8      	it	le
 8006c6e:	2501      	movle	r5, #1
 8006c70:	2b03      	cmp	r3, #3
 8006c72:	f200 808d 	bhi.w	8006d90 <_dtoa_r+0x2f8>
 8006c76:	e8df f003 	tbb	[pc, r3]
 8006c7a:	7d7b      	.short	0x7d7b
 8006c7c:	6f2f      	.short	0x6f2f
 8006c7e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006c82:	441d      	add	r5, r3
 8006c84:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006c88:	2820      	cmp	r0, #32
 8006c8a:	dd13      	ble.n	8006cb4 <_dtoa_r+0x21c>
 8006c8c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006c90:	9b02      	ldr	r3, [sp, #8]
 8006c92:	fa08 f800 	lsl.w	r8, r8, r0
 8006c96:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006c9a:	fa23 f000 	lsr.w	r0, r3, r0
 8006c9e:	ea48 0000 	orr.w	r0, r8, r0
 8006ca2:	f7f9 fb9f 	bl	80003e4 <__aeabi_ui2d>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	4680      	mov	r8, r0
 8006caa:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006cae:	3d01      	subs	r5, #1
 8006cb0:	9310      	str	r3, [sp, #64]	; 0x40
 8006cb2:	e771      	b.n	8006b98 <_dtoa_r+0x100>
 8006cb4:	9b02      	ldr	r3, [sp, #8]
 8006cb6:	f1c0 0020 	rsb	r0, r0, #32
 8006cba:	fa03 f000 	lsl.w	r0, r3, r0
 8006cbe:	e7f0      	b.n	8006ca2 <_dtoa_r+0x20a>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e7b0      	b.n	8006c26 <_dtoa_r+0x18e>
 8006cc4:	900d      	str	r0, [sp, #52]	; 0x34
 8006cc6:	e7af      	b.n	8006c28 <_dtoa_r+0x190>
 8006cc8:	f1ca 0300 	rsb	r3, sl, #0
 8006ccc:	9308      	str	r3, [sp, #32]
 8006cce:	2300      	movs	r3, #0
 8006cd0:	eba9 090a 	sub.w	r9, r9, sl
 8006cd4:	930c      	str	r3, [sp, #48]	; 0x30
 8006cd6:	e7bc      	b.n	8006c52 <_dtoa_r+0x1ba>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	9309      	str	r3, [sp, #36]	; 0x24
 8006cdc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	dd74      	ble.n	8006dcc <_dtoa_r+0x334>
 8006ce2:	4698      	mov	r8, r3
 8006ce4:	9304      	str	r3, [sp, #16]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006cea:	6072      	str	r2, [r6, #4]
 8006cec:	2204      	movs	r2, #4
 8006cee:	f102 0014 	add.w	r0, r2, #20
 8006cf2:	4298      	cmp	r0, r3
 8006cf4:	6871      	ldr	r1, [r6, #4]
 8006cf6:	d96e      	bls.n	8006dd6 <_dtoa_r+0x33e>
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f000 fca2 	bl	8007642 <_Balloc>
 8006cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d00:	6030      	str	r0, [r6, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f1b8 0f0e 	cmp.w	r8, #14
 8006d08:	9306      	str	r3, [sp, #24]
 8006d0a:	f200 80ed 	bhi.w	8006ee8 <_dtoa_r+0x450>
 8006d0e:	2d00      	cmp	r5, #0
 8006d10:	f000 80ea 	beq.w	8006ee8 <_dtoa_r+0x450>
 8006d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d18:	f1ba 0f00 	cmp.w	sl, #0
 8006d1c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006d20:	dd77      	ble.n	8006e12 <_dtoa_r+0x37a>
 8006d22:	4a28      	ldr	r2, [pc, #160]	; (8006dc4 <_dtoa_r+0x32c>)
 8006d24:	f00a 030f 	and.w	r3, sl, #15
 8006d28:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006d2c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006d30:	06f0      	lsls	r0, r6, #27
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006d3a:	d568      	bpl.n	8006e0e <_dtoa_r+0x376>
 8006d3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006d40:	4b21      	ldr	r3, [pc, #132]	; (8006dc8 <_dtoa_r+0x330>)
 8006d42:	2503      	movs	r5, #3
 8006d44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d48:	f7f9 fcf0 	bl	800072c <__aeabi_ddiv>
 8006d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d50:	f006 060f 	and.w	r6, r6, #15
 8006d54:	4f1c      	ldr	r7, [pc, #112]	; (8006dc8 <_dtoa_r+0x330>)
 8006d56:	e04f      	b.n	8006df8 <_dtoa_r+0x360>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d5e:	4453      	add	r3, sl
 8006d60:	f103 0801 	add.w	r8, r3, #1
 8006d64:	9304      	str	r3, [sp, #16]
 8006d66:	4643      	mov	r3, r8
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	bfb8      	it	lt
 8006d6c:	2301      	movlt	r3, #1
 8006d6e:	e7ba      	b.n	8006ce6 <_dtoa_r+0x24e>
 8006d70:	2300      	movs	r3, #0
 8006d72:	e7b2      	b.n	8006cda <_dtoa_r+0x242>
 8006d74:	2300      	movs	r3, #0
 8006d76:	e7f0      	b.n	8006d5a <_dtoa_r+0x2c2>
 8006d78:	2501      	movs	r5, #1
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	9509      	str	r5, [sp, #36]	; 0x24
 8006d7e:	931e      	str	r3, [sp, #120]	; 0x78
 8006d80:	f04f 33ff 	mov.w	r3, #4294967295
 8006d84:	2200      	movs	r2, #0
 8006d86:	9304      	str	r3, [sp, #16]
 8006d88:	4698      	mov	r8, r3
 8006d8a:	2312      	movs	r3, #18
 8006d8c:	921f      	str	r2, [sp, #124]	; 0x7c
 8006d8e:	e7aa      	b.n	8006ce6 <_dtoa_r+0x24e>
 8006d90:	2301      	movs	r3, #1
 8006d92:	9309      	str	r3, [sp, #36]	; 0x24
 8006d94:	e7f4      	b.n	8006d80 <_dtoa_r+0x2e8>
 8006d96:	bf00      	nop
 8006d98:	636f4361 	.word	0x636f4361
 8006d9c:	3fd287a7 	.word	0x3fd287a7
 8006da0:	8b60c8b3 	.word	0x8b60c8b3
 8006da4:	3fc68a28 	.word	0x3fc68a28
 8006da8:	509f79fb 	.word	0x509f79fb
 8006dac:	3fd34413 	.word	0x3fd34413
 8006db0:	7ff00000 	.word	0x7ff00000
 8006db4:	08009227 	.word	0x08009227
 8006db8:	0800921e 	.word	0x0800921e
 8006dbc:	0800921d 	.word	0x0800921d
 8006dc0:	3ff80000 	.word	0x3ff80000
 8006dc4:	08009258 	.word	0x08009258
 8006dc8:	08009230 	.word	0x08009230
 8006dcc:	2301      	movs	r3, #1
 8006dce:	9304      	str	r3, [sp, #16]
 8006dd0:	4698      	mov	r8, r3
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	e7da      	b.n	8006d8c <_dtoa_r+0x2f4>
 8006dd6:	3101      	adds	r1, #1
 8006dd8:	6071      	str	r1, [r6, #4]
 8006dda:	0052      	lsls	r2, r2, #1
 8006ddc:	e787      	b.n	8006cee <_dtoa_r+0x256>
 8006dde:	07f1      	lsls	r1, r6, #31
 8006de0:	d508      	bpl.n	8006df4 <_dtoa_r+0x35c>
 8006de2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006de6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dea:	f7f9 fb75 	bl	80004d8 <__aeabi_dmul>
 8006dee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006df2:	3501      	adds	r5, #1
 8006df4:	1076      	asrs	r6, r6, #1
 8006df6:	3708      	adds	r7, #8
 8006df8:	2e00      	cmp	r6, #0
 8006dfa:	d1f0      	bne.n	8006dde <_dtoa_r+0x346>
 8006dfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006e00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e04:	f7f9 fc92 	bl	800072c <__aeabi_ddiv>
 8006e08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e0c:	e01b      	b.n	8006e46 <_dtoa_r+0x3ae>
 8006e0e:	2502      	movs	r5, #2
 8006e10:	e7a0      	b.n	8006d54 <_dtoa_r+0x2bc>
 8006e12:	f000 80a4 	beq.w	8006f5e <_dtoa_r+0x4c6>
 8006e16:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006e1a:	f1ca 0600 	rsb	r6, sl, #0
 8006e1e:	4ba0      	ldr	r3, [pc, #640]	; (80070a0 <_dtoa_r+0x608>)
 8006e20:	f006 020f 	and.w	r2, r6, #15
 8006e24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2c:	f7f9 fb54 	bl	80004d8 <__aeabi_dmul>
 8006e30:	2502      	movs	r5, #2
 8006e32:	2300      	movs	r3, #0
 8006e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e38:	4f9a      	ldr	r7, [pc, #616]	; (80070a4 <_dtoa_r+0x60c>)
 8006e3a:	1136      	asrs	r6, r6, #4
 8006e3c:	2e00      	cmp	r6, #0
 8006e3e:	f040 8083 	bne.w	8006f48 <_dtoa_r+0x4b0>
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e0      	bne.n	8006e08 <_dtoa_r+0x370>
 8006e46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 808a 	beq.w	8006f62 <_dtoa_r+0x4ca>
 8006e4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e52:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006e56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	4b92      	ldr	r3, [pc, #584]	; (80070a8 <_dtoa_r+0x610>)
 8006e5e:	f7f9 fdad 	bl	80009bc <__aeabi_dcmplt>
 8006e62:	2800      	cmp	r0, #0
 8006e64:	d07d      	beq.n	8006f62 <_dtoa_r+0x4ca>
 8006e66:	f1b8 0f00 	cmp.w	r8, #0
 8006e6a:	d07a      	beq.n	8006f62 <_dtoa_r+0x4ca>
 8006e6c:	9b04      	ldr	r3, [sp, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	dd36      	ble.n	8006ee0 <_dtoa_r+0x448>
 8006e72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e76:	2200      	movs	r2, #0
 8006e78:	4b8c      	ldr	r3, [pc, #560]	; (80070ac <_dtoa_r+0x614>)
 8006e7a:	f7f9 fb2d 	bl	80004d8 <__aeabi_dmul>
 8006e7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e82:	9e04      	ldr	r6, [sp, #16]
 8006e84:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006e88:	3501      	adds	r5, #1
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	f7f9 faba 	bl	8000404 <__aeabi_i2d>
 8006e90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e94:	f7f9 fb20 	bl	80004d8 <__aeabi_dmul>
 8006e98:	2200      	movs	r2, #0
 8006e9a:	4b85      	ldr	r3, [pc, #532]	; (80070b0 <_dtoa_r+0x618>)
 8006e9c:	f7f9 f966 	bl	800016c <__adddf3>
 8006ea0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006ea4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006ea8:	950b      	str	r5, [sp, #44]	; 0x2c
 8006eaa:	2e00      	cmp	r6, #0
 8006eac:	d15c      	bne.n	8006f68 <_dtoa_r+0x4d0>
 8006eae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	4b7f      	ldr	r3, [pc, #508]	; (80070b4 <_dtoa_r+0x61c>)
 8006eb6:	f7f9 f957 	bl	8000168 <__aeabi_dsub>
 8006eba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ebc:	462b      	mov	r3, r5
 8006ebe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ec2:	f7f9 fd99 	bl	80009f8 <__aeabi_dcmpgt>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	f040 8281 	bne.w	80073ce <_dtoa_r+0x936>
 8006ecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ed2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006ed6:	f7f9 fd71 	bl	80009bc <__aeabi_dcmplt>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	f040 8275 	bne.w	80073ca <_dtoa_r+0x932>
 8006ee0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006ee4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ee8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f2c0 814b 	blt.w	8007186 <_dtoa_r+0x6ee>
 8006ef0:	f1ba 0f0e 	cmp.w	sl, #14
 8006ef4:	f300 8147 	bgt.w	8007186 <_dtoa_r+0x6ee>
 8006ef8:	4b69      	ldr	r3, [pc, #420]	; (80070a0 <_dtoa_r+0x608>)
 8006efa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f06:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f280 80d7 	bge.w	80070bc <_dtoa_r+0x624>
 8006f0e:	f1b8 0f00 	cmp.w	r8, #0
 8006f12:	f300 80d3 	bgt.w	80070bc <_dtoa_r+0x624>
 8006f16:	f040 8257 	bne.w	80073c8 <_dtoa_r+0x930>
 8006f1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	4b64      	ldr	r3, [pc, #400]	; (80070b4 <_dtoa_r+0x61c>)
 8006f22:	f7f9 fad9 	bl	80004d8 <__aeabi_dmul>
 8006f26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f2a:	f7f9 fd5b 	bl	80009e4 <__aeabi_dcmpge>
 8006f2e:	4646      	mov	r6, r8
 8006f30:	4647      	mov	r7, r8
 8006f32:	2800      	cmp	r0, #0
 8006f34:	f040 822d 	bne.w	8007392 <_dtoa_r+0x8fa>
 8006f38:	9b06      	ldr	r3, [sp, #24]
 8006f3a:	9a06      	ldr	r2, [sp, #24]
 8006f3c:	1c5d      	adds	r5, r3, #1
 8006f3e:	2331      	movs	r3, #49	; 0x31
 8006f40:	f10a 0a01 	add.w	sl, sl, #1
 8006f44:	7013      	strb	r3, [r2, #0]
 8006f46:	e228      	b.n	800739a <_dtoa_r+0x902>
 8006f48:	07f2      	lsls	r2, r6, #31
 8006f4a:	d505      	bpl.n	8006f58 <_dtoa_r+0x4c0>
 8006f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f50:	f7f9 fac2 	bl	80004d8 <__aeabi_dmul>
 8006f54:	2301      	movs	r3, #1
 8006f56:	3501      	adds	r5, #1
 8006f58:	1076      	asrs	r6, r6, #1
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	e76e      	b.n	8006e3c <_dtoa_r+0x3a4>
 8006f5e:	2502      	movs	r5, #2
 8006f60:	e771      	b.n	8006e46 <_dtoa_r+0x3ae>
 8006f62:	4657      	mov	r7, sl
 8006f64:	4646      	mov	r6, r8
 8006f66:	e790      	b.n	8006e8a <_dtoa_r+0x3f2>
 8006f68:	4b4d      	ldr	r3, [pc, #308]	; (80070a0 <_dtoa_r+0x608>)
 8006f6a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f6e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d048      	beq.n	800700a <_dtoa_r+0x572>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	494e      	ldr	r1, [pc, #312]	; (80070b8 <_dtoa_r+0x620>)
 8006f80:	f7f9 fbd4 	bl	800072c <__aeabi_ddiv>
 8006f84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006f88:	f7f9 f8ee 	bl	8000168 <__aeabi_dsub>
 8006f8c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006f90:	9d06      	ldr	r5, [sp, #24]
 8006f92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f96:	f7f9 fd4f 	bl	8000a38 <__aeabi_d2iz>
 8006f9a:	9011      	str	r0, [sp, #68]	; 0x44
 8006f9c:	f7f9 fa32 	bl	8000404 <__aeabi_i2d>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fa8:	f7f9 f8de 	bl	8000168 <__aeabi_dsub>
 8006fac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fb2:	3330      	adds	r3, #48	; 0x30
 8006fb4:	f805 3b01 	strb.w	r3, [r5], #1
 8006fb8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006fbc:	f7f9 fcfe 	bl	80009bc <__aeabi_dcmplt>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d163      	bne.n	800708c <_dtoa_r+0x5f4>
 8006fc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fc8:	2000      	movs	r0, #0
 8006fca:	4937      	ldr	r1, [pc, #220]	; (80070a8 <_dtoa_r+0x610>)
 8006fcc:	f7f9 f8cc 	bl	8000168 <__aeabi_dsub>
 8006fd0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006fd4:	f7f9 fcf2 	bl	80009bc <__aeabi_dcmplt>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	f040 80b5 	bne.w	8007148 <_dtoa_r+0x6b0>
 8006fde:	9b06      	ldr	r3, [sp, #24]
 8006fe0:	1aeb      	subs	r3, r5, r3
 8006fe2:	429e      	cmp	r6, r3
 8006fe4:	f77f af7c 	ble.w	8006ee0 <_dtoa_r+0x448>
 8006fe8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006fec:	2200      	movs	r2, #0
 8006fee:	4b2f      	ldr	r3, [pc, #188]	; (80070ac <_dtoa_r+0x614>)
 8006ff0:	f7f9 fa72 	bl	80004d8 <__aeabi_dmul>
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006ffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ffe:	4b2b      	ldr	r3, [pc, #172]	; (80070ac <_dtoa_r+0x614>)
 8007000:	f7f9 fa6a 	bl	80004d8 <__aeabi_dmul>
 8007004:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007008:	e7c3      	b.n	8006f92 <_dtoa_r+0x4fa>
 800700a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800700e:	f7f9 fa63 	bl	80004d8 <__aeabi_dmul>
 8007012:	9b06      	ldr	r3, [sp, #24]
 8007014:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007018:	199d      	adds	r5, r3, r6
 800701a:	461e      	mov	r6, r3
 800701c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007020:	f7f9 fd0a 	bl	8000a38 <__aeabi_d2iz>
 8007024:	9011      	str	r0, [sp, #68]	; 0x44
 8007026:	f7f9 f9ed 	bl	8000404 <__aeabi_i2d>
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
 800702e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007032:	f7f9 f899 	bl	8000168 <__aeabi_dsub>
 8007036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007038:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800703c:	3330      	adds	r3, #48	; 0x30
 800703e:	f806 3b01 	strb.w	r3, [r6], #1
 8007042:	42ae      	cmp	r6, r5
 8007044:	f04f 0200 	mov.w	r2, #0
 8007048:	d124      	bne.n	8007094 <_dtoa_r+0x5fc>
 800704a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800704e:	4b1a      	ldr	r3, [pc, #104]	; (80070b8 <_dtoa_r+0x620>)
 8007050:	f7f9 f88c 	bl	800016c <__adddf3>
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800705c:	f7f9 fccc 	bl	80009f8 <__aeabi_dcmpgt>
 8007060:	2800      	cmp	r0, #0
 8007062:	d171      	bne.n	8007148 <_dtoa_r+0x6b0>
 8007064:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007068:	2000      	movs	r0, #0
 800706a:	4913      	ldr	r1, [pc, #76]	; (80070b8 <_dtoa_r+0x620>)
 800706c:	f7f9 f87c 	bl	8000168 <__aeabi_dsub>
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007078:	f7f9 fca0 	bl	80009bc <__aeabi_dcmplt>
 800707c:	2800      	cmp	r0, #0
 800707e:	f43f af2f 	beq.w	8006ee0 <_dtoa_r+0x448>
 8007082:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007086:	1e6a      	subs	r2, r5, #1
 8007088:	2b30      	cmp	r3, #48	; 0x30
 800708a:	d001      	beq.n	8007090 <_dtoa_r+0x5f8>
 800708c:	46ba      	mov	sl, r7
 800708e:	e04a      	b.n	8007126 <_dtoa_r+0x68e>
 8007090:	4615      	mov	r5, r2
 8007092:	e7f6      	b.n	8007082 <_dtoa_r+0x5ea>
 8007094:	4b05      	ldr	r3, [pc, #20]	; (80070ac <_dtoa_r+0x614>)
 8007096:	f7f9 fa1f 	bl	80004d8 <__aeabi_dmul>
 800709a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800709e:	e7bd      	b.n	800701c <_dtoa_r+0x584>
 80070a0:	08009258 	.word	0x08009258
 80070a4:	08009230 	.word	0x08009230
 80070a8:	3ff00000 	.word	0x3ff00000
 80070ac:	40240000 	.word	0x40240000
 80070b0:	401c0000 	.word	0x401c0000
 80070b4:	40140000 	.word	0x40140000
 80070b8:	3fe00000 	.word	0x3fe00000
 80070bc:	9d06      	ldr	r5, [sp, #24]
 80070be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80070c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070c6:	4630      	mov	r0, r6
 80070c8:	4639      	mov	r1, r7
 80070ca:	f7f9 fb2f 	bl	800072c <__aeabi_ddiv>
 80070ce:	f7f9 fcb3 	bl	8000a38 <__aeabi_d2iz>
 80070d2:	4681      	mov	r9, r0
 80070d4:	f7f9 f996 	bl	8000404 <__aeabi_i2d>
 80070d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070dc:	f7f9 f9fc 	bl	80004d8 <__aeabi_dmul>
 80070e0:	4602      	mov	r2, r0
 80070e2:	460b      	mov	r3, r1
 80070e4:	4630      	mov	r0, r6
 80070e6:	4639      	mov	r1, r7
 80070e8:	f7f9 f83e 	bl	8000168 <__aeabi_dsub>
 80070ec:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80070f0:	f805 6b01 	strb.w	r6, [r5], #1
 80070f4:	9e06      	ldr	r6, [sp, #24]
 80070f6:	4602      	mov	r2, r0
 80070f8:	1bae      	subs	r6, r5, r6
 80070fa:	45b0      	cmp	r8, r6
 80070fc:	460b      	mov	r3, r1
 80070fe:	d135      	bne.n	800716c <_dtoa_r+0x6d4>
 8007100:	f7f9 f834 	bl	800016c <__adddf3>
 8007104:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007108:	4606      	mov	r6, r0
 800710a:	460f      	mov	r7, r1
 800710c:	f7f9 fc74 	bl	80009f8 <__aeabi_dcmpgt>
 8007110:	b9c8      	cbnz	r0, 8007146 <_dtoa_r+0x6ae>
 8007112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007116:	4630      	mov	r0, r6
 8007118:	4639      	mov	r1, r7
 800711a:	f7f9 fc45 	bl	80009a8 <__aeabi_dcmpeq>
 800711e:	b110      	cbz	r0, 8007126 <_dtoa_r+0x68e>
 8007120:	f019 0f01 	tst.w	r9, #1
 8007124:	d10f      	bne.n	8007146 <_dtoa_r+0x6ae>
 8007126:	4659      	mov	r1, fp
 8007128:	4620      	mov	r0, r4
 800712a:	f000 fabe 	bl	80076aa <_Bfree>
 800712e:	2300      	movs	r3, #0
 8007130:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007132:	702b      	strb	r3, [r5, #0]
 8007134:	f10a 0301 	add.w	r3, sl, #1
 8007138:	6013      	str	r3, [r2, #0]
 800713a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800713c:	2b00      	cmp	r3, #0
 800713e:	f43f acf3 	beq.w	8006b28 <_dtoa_r+0x90>
 8007142:	601d      	str	r5, [r3, #0]
 8007144:	e4f0      	b.n	8006b28 <_dtoa_r+0x90>
 8007146:	4657      	mov	r7, sl
 8007148:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800714c:	1e6b      	subs	r3, r5, #1
 800714e:	2a39      	cmp	r2, #57	; 0x39
 8007150:	d106      	bne.n	8007160 <_dtoa_r+0x6c8>
 8007152:	9a06      	ldr	r2, [sp, #24]
 8007154:	429a      	cmp	r2, r3
 8007156:	d107      	bne.n	8007168 <_dtoa_r+0x6d0>
 8007158:	2330      	movs	r3, #48	; 0x30
 800715a:	7013      	strb	r3, [r2, #0]
 800715c:	4613      	mov	r3, r2
 800715e:	3701      	adds	r7, #1
 8007160:	781a      	ldrb	r2, [r3, #0]
 8007162:	3201      	adds	r2, #1
 8007164:	701a      	strb	r2, [r3, #0]
 8007166:	e791      	b.n	800708c <_dtoa_r+0x5f4>
 8007168:	461d      	mov	r5, r3
 800716a:	e7ed      	b.n	8007148 <_dtoa_r+0x6b0>
 800716c:	2200      	movs	r2, #0
 800716e:	4b99      	ldr	r3, [pc, #612]	; (80073d4 <_dtoa_r+0x93c>)
 8007170:	f7f9 f9b2 	bl	80004d8 <__aeabi_dmul>
 8007174:	2200      	movs	r2, #0
 8007176:	2300      	movs	r3, #0
 8007178:	4606      	mov	r6, r0
 800717a:	460f      	mov	r7, r1
 800717c:	f7f9 fc14 	bl	80009a8 <__aeabi_dcmpeq>
 8007180:	2800      	cmp	r0, #0
 8007182:	d09e      	beq.n	80070c2 <_dtoa_r+0x62a>
 8007184:	e7cf      	b.n	8007126 <_dtoa_r+0x68e>
 8007186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007188:	2a00      	cmp	r2, #0
 800718a:	f000 8088 	beq.w	800729e <_dtoa_r+0x806>
 800718e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007190:	2a01      	cmp	r2, #1
 8007192:	dc6d      	bgt.n	8007270 <_dtoa_r+0x7d8>
 8007194:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007196:	2a00      	cmp	r2, #0
 8007198:	d066      	beq.n	8007268 <_dtoa_r+0x7d0>
 800719a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800719e:	464d      	mov	r5, r9
 80071a0:	9e08      	ldr	r6, [sp, #32]
 80071a2:	9a07      	ldr	r2, [sp, #28]
 80071a4:	2101      	movs	r1, #1
 80071a6:	441a      	add	r2, r3
 80071a8:	4620      	mov	r0, r4
 80071aa:	4499      	add	r9, r3
 80071ac:	9207      	str	r2, [sp, #28]
 80071ae:	f000 fb1c 	bl	80077ea <__i2b>
 80071b2:	4607      	mov	r7, r0
 80071b4:	2d00      	cmp	r5, #0
 80071b6:	dd0b      	ble.n	80071d0 <_dtoa_r+0x738>
 80071b8:	9b07      	ldr	r3, [sp, #28]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	dd08      	ble.n	80071d0 <_dtoa_r+0x738>
 80071be:	42ab      	cmp	r3, r5
 80071c0:	bfa8      	it	ge
 80071c2:	462b      	movge	r3, r5
 80071c4:	9a07      	ldr	r2, [sp, #28]
 80071c6:	eba9 0903 	sub.w	r9, r9, r3
 80071ca:	1aed      	subs	r5, r5, r3
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	9307      	str	r3, [sp, #28]
 80071d0:	9b08      	ldr	r3, [sp, #32]
 80071d2:	b1eb      	cbz	r3, 8007210 <_dtoa_r+0x778>
 80071d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d065      	beq.n	80072a6 <_dtoa_r+0x80e>
 80071da:	b18e      	cbz	r6, 8007200 <_dtoa_r+0x768>
 80071dc:	4639      	mov	r1, r7
 80071de:	4632      	mov	r2, r6
 80071e0:	4620      	mov	r0, r4
 80071e2:	f000 fba1 	bl	8007928 <__pow5mult>
 80071e6:	465a      	mov	r2, fp
 80071e8:	4601      	mov	r1, r0
 80071ea:	4607      	mov	r7, r0
 80071ec:	4620      	mov	r0, r4
 80071ee:	f000 fb05 	bl	80077fc <__multiply>
 80071f2:	4659      	mov	r1, fp
 80071f4:	900a      	str	r0, [sp, #40]	; 0x28
 80071f6:	4620      	mov	r0, r4
 80071f8:	f000 fa57 	bl	80076aa <_Bfree>
 80071fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071fe:	469b      	mov	fp, r3
 8007200:	9b08      	ldr	r3, [sp, #32]
 8007202:	1b9a      	subs	r2, r3, r6
 8007204:	d004      	beq.n	8007210 <_dtoa_r+0x778>
 8007206:	4659      	mov	r1, fp
 8007208:	4620      	mov	r0, r4
 800720a:	f000 fb8d 	bl	8007928 <__pow5mult>
 800720e:	4683      	mov	fp, r0
 8007210:	2101      	movs	r1, #1
 8007212:	4620      	mov	r0, r4
 8007214:	f000 fae9 	bl	80077ea <__i2b>
 8007218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800721a:	4606      	mov	r6, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 81c6 	beq.w	80075ae <_dtoa_r+0xb16>
 8007222:	461a      	mov	r2, r3
 8007224:	4601      	mov	r1, r0
 8007226:	4620      	mov	r0, r4
 8007228:	f000 fb7e 	bl	8007928 <__pow5mult>
 800722c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800722e:	4606      	mov	r6, r0
 8007230:	2b01      	cmp	r3, #1
 8007232:	dc3e      	bgt.n	80072b2 <_dtoa_r+0x81a>
 8007234:	9b02      	ldr	r3, [sp, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d137      	bne.n	80072aa <_dtoa_r+0x812>
 800723a:	9b03      	ldr	r3, [sp, #12]
 800723c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007240:	2b00      	cmp	r3, #0
 8007242:	d134      	bne.n	80072ae <_dtoa_r+0x816>
 8007244:	9b03      	ldr	r3, [sp, #12]
 8007246:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800724a:	0d1b      	lsrs	r3, r3, #20
 800724c:	051b      	lsls	r3, r3, #20
 800724e:	b12b      	cbz	r3, 800725c <_dtoa_r+0x7c4>
 8007250:	9b07      	ldr	r3, [sp, #28]
 8007252:	f109 0901 	add.w	r9, r9, #1
 8007256:	3301      	adds	r3, #1
 8007258:	9307      	str	r3, [sp, #28]
 800725a:	2301      	movs	r3, #1
 800725c:	9308      	str	r3, [sp, #32]
 800725e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007260:	2b00      	cmp	r3, #0
 8007262:	d128      	bne.n	80072b6 <_dtoa_r+0x81e>
 8007264:	2001      	movs	r0, #1
 8007266:	e02e      	b.n	80072c6 <_dtoa_r+0x82e>
 8007268:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800726a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800726e:	e796      	b.n	800719e <_dtoa_r+0x706>
 8007270:	9b08      	ldr	r3, [sp, #32]
 8007272:	f108 36ff 	add.w	r6, r8, #4294967295
 8007276:	42b3      	cmp	r3, r6
 8007278:	bfb7      	itett	lt
 800727a:	9b08      	ldrlt	r3, [sp, #32]
 800727c:	1b9e      	subge	r6, r3, r6
 800727e:	1af2      	sublt	r2, r6, r3
 8007280:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8007282:	bfbf      	itttt	lt
 8007284:	9608      	strlt	r6, [sp, #32]
 8007286:	189b      	addlt	r3, r3, r2
 8007288:	930c      	strlt	r3, [sp, #48]	; 0x30
 800728a:	2600      	movlt	r6, #0
 800728c:	f1b8 0f00 	cmp.w	r8, #0
 8007290:	bfb9      	ittee	lt
 8007292:	eba9 0508 	sublt.w	r5, r9, r8
 8007296:	2300      	movlt	r3, #0
 8007298:	464d      	movge	r5, r9
 800729a:	4643      	movge	r3, r8
 800729c:	e781      	b.n	80071a2 <_dtoa_r+0x70a>
 800729e:	9e08      	ldr	r6, [sp, #32]
 80072a0:	464d      	mov	r5, r9
 80072a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80072a4:	e786      	b.n	80071b4 <_dtoa_r+0x71c>
 80072a6:	9a08      	ldr	r2, [sp, #32]
 80072a8:	e7ad      	b.n	8007206 <_dtoa_r+0x76e>
 80072aa:	2300      	movs	r3, #0
 80072ac:	e7d6      	b.n	800725c <_dtoa_r+0x7c4>
 80072ae:	9b02      	ldr	r3, [sp, #8]
 80072b0:	e7d4      	b.n	800725c <_dtoa_r+0x7c4>
 80072b2:	2300      	movs	r3, #0
 80072b4:	9308      	str	r3, [sp, #32]
 80072b6:	6933      	ldr	r3, [r6, #16]
 80072b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80072bc:	6918      	ldr	r0, [r3, #16]
 80072be:	f000 fa46 	bl	800774e <__hi0bits>
 80072c2:	f1c0 0020 	rsb	r0, r0, #32
 80072c6:	9b07      	ldr	r3, [sp, #28]
 80072c8:	4418      	add	r0, r3
 80072ca:	f010 001f 	ands.w	r0, r0, #31
 80072ce:	d047      	beq.n	8007360 <_dtoa_r+0x8c8>
 80072d0:	f1c0 0320 	rsb	r3, r0, #32
 80072d4:	2b04      	cmp	r3, #4
 80072d6:	dd3b      	ble.n	8007350 <_dtoa_r+0x8b8>
 80072d8:	9b07      	ldr	r3, [sp, #28]
 80072da:	f1c0 001c 	rsb	r0, r0, #28
 80072de:	4481      	add	r9, r0
 80072e0:	4405      	add	r5, r0
 80072e2:	4403      	add	r3, r0
 80072e4:	9307      	str	r3, [sp, #28]
 80072e6:	f1b9 0f00 	cmp.w	r9, #0
 80072ea:	dd05      	ble.n	80072f8 <_dtoa_r+0x860>
 80072ec:	4659      	mov	r1, fp
 80072ee:	464a      	mov	r2, r9
 80072f0:	4620      	mov	r0, r4
 80072f2:	f000 fb67 	bl	80079c4 <__lshift>
 80072f6:	4683      	mov	fp, r0
 80072f8:	9b07      	ldr	r3, [sp, #28]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	dd05      	ble.n	800730a <_dtoa_r+0x872>
 80072fe:	4631      	mov	r1, r6
 8007300:	461a      	mov	r2, r3
 8007302:	4620      	mov	r0, r4
 8007304:	f000 fb5e 	bl	80079c4 <__lshift>
 8007308:	4606      	mov	r6, r0
 800730a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800730c:	b353      	cbz	r3, 8007364 <_dtoa_r+0x8cc>
 800730e:	4631      	mov	r1, r6
 8007310:	4658      	mov	r0, fp
 8007312:	f000 fbab 	bl	8007a6c <__mcmp>
 8007316:	2800      	cmp	r0, #0
 8007318:	da24      	bge.n	8007364 <_dtoa_r+0x8cc>
 800731a:	2300      	movs	r3, #0
 800731c:	4659      	mov	r1, fp
 800731e:	220a      	movs	r2, #10
 8007320:	4620      	mov	r0, r4
 8007322:	f000 f9d9 	bl	80076d8 <__multadd>
 8007326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007328:	f10a 3aff 	add.w	sl, sl, #4294967295
 800732c:	4683      	mov	fp, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 8144 	beq.w	80075bc <_dtoa_r+0xb24>
 8007334:	2300      	movs	r3, #0
 8007336:	4639      	mov	r1, r7
 8007338:	220a      	movs	r2, #10
 800733a:	4620      	mov	r0, r4
 800733c:	f000 f9cc 	bl	80076d8 <__multadd>
 8007340:	9b04      	ldr	r3, [sp, #16]
 8007342:	4607      	mov	r7, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	dc4d      	bgt.n	80073e4 <_dtoa_r+0x94c>
 8007348:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800734a:	2b02      	cmp	r3, #2
 800734c:	dd4a      	ble.n	80073e4 <_dtoa_r+0x94c>
 800734e:	e011      	b.n	8007374 <_dtoa_r+0x8dc>
 8007350:	d0c9      	beq.n	80072e6 <_dtoa_r+0x84e>
 8007352:	9a07      	ldr	r2, [sp, #28]
 8007354:	331c      	adds	r3, #28
 8007356:	441a      	add	r2, r3
 8007358:	4499      	add	r9, r3
 800735a:	441d      	add	r5, r3
 800735c:	4613      	mov	r3, r2
 800735e:	e7c1      	b.n	80072e4 <_dtoa_r+0x84c>
 8007360:	4603      	mov	r3, r0
 8007362:	e7f6      	b.n	8007352 <_dtoa_r+0x8ba>
 8007364:	f1b8 0f00 	cmp.w	r8, #0
 8007368:	dc36      	bgt.n	80073d8 <_dtoa_r+0x940>
 800736a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800736c:	2b02      	cmp	r3, #2
 800736e:	dd33      	ble.n	80073d8 <_dtoa_r+0x940>
 8007370:	f8cd 8010 	str.w	r8, [sp, #16]
 8007374:	9b04      	ldr	r3, [sp, #16]
 8007376:	b963      	cbnz	r3, 8007392 <_dtoa_r+0x8fa>
 8007378:	4631      	mov	r1, r6
 800737a:	2205      	movs	r2, #5
 800737c:	4620      	mov	r0, r4
 800737e:	f000 f9ab 	bl	80076d8 <__multadd>
 8007382:	4601      	mov	r1, r0
 8007384:	4606      	mov	r6, r0
 8007386:	4658      	mov	r0, fp
 8007388:	f000 fb70 	bl	8007a6c <__mcmp>
 800738c:	2800      	cmp	r0, #0
 800738e:	f73f add3 	bgt.w	8006f38 <_dtoa_r+0x4a0>
 8007392:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007394:	9d06      	ldr	r5, [sp, #24]
 8007396:	ea6f 0a03 	mvn.w	sl, r3
 800739a:	f04f 0900 	mov.w	r9, #0
 800739e:	4631      	mov	r1, r6
 80073a0:	4620      	mov	r0, r4
 80073a2:	f000 f982 	bl	80076aa <_Bfree>
 80073a6:	2f00      	cmp	r7, #0
 80073a8:	f43f aebd 	beq.w	8007126 <_dtoa_r+0x68e>
 80073ac:	f1b9 0f00 	cmp.w	r9, #0
 80073b0:	d005      	beq.n	80073be <_dtoa_r+0x926>
 80073b2:	45b9      	cmp	r9, r7
 80073b4:	d003      	beq.n	80073be <_dtoa_r+0x926>
 80073b6:	4649      	mov	r1, r9
 80073b8:	4620      	mov	r0, r4
 80073ba:	f000 f976 	bl	80076aa <_Bfree>
 80073be:	4639      	mov	r1, r7
 80073c0:	4620      	mov	r0, r4
 80073c2:	f000 f972 	bl	80076aa <_Bfree>
 80073c6:	e6ae      	b.n	8007126 <_dtoa_r+0x68e>
 80073c8:	2600      	movs	r6, #0
 80073ca:	4637      	mov	r7, r6
 80073cc:	e7e1      	b.n	8007392 <_dtoa_r+0x8fa>
 80073ce:	46ba      	mov	sl, r7
 80073d0:	4637      	mov	r7, r6
 80073d2:	e5b1      	b.n	8006f38 <_dtoa_r+0x4a0>
 80073d4:	40240000 	.word	0x40240000
 80073d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073da:	f8cd 8010 	str.w	r8, [sp, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f000 80f3 	beq.w	80075ca <_dtoa_r+0xb32>
 80073e4:	2d00      	cmp	r5, #0
 80073e6:	dd05      	ble.n	80073f4 <_dtoa_r+0x95c>
 80073e8:	4639      	mov	r1, r7
 80073ea:	462a      	mov	r2, r5
 80073ec:	4620      	mov	r0, r4
 80073ee:	f000 fae9 	bl	80079c4 <__lshift>
 80073f2:	4607      	mov	r7, r0
 80073f4:	9b08      	ldr	r3, [sp, #32]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d04c      	beq.n	8007494 <_dtoa_r+0x9fc>
 80073fa:	6879      	ldr	r1, [r7, #4]
 80073fc:	4620      	mov	r0, r4
 80073fe:	f000 f920 	bl	8007642 <_Balloc>
 8007402:	4605      	mov	r5, r0
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	f107 010c 	add.w	r1, r7, #12
 800740a:	3202      	adds	r2, #2
 800740c:	0092      	lsls	r2, r2, #2
 800740e:	300c      	adds	r0, #12
 8007410:	f000 f90c 	bl	800762c <memcpy>
 8007414:	2201      	movs	r2, #1
 8007416:	4629      	mov	r1, r5
 8007418:	4620      	mov	r0, r4
 800741a:	f000 fad3 	bl	80079c4 <__lshift>
 800741e:	46b9      	mov	r9, r7
 8007420:	4607      	mov	r7, r0
 8007422:	9b06      	ldr	r3, [sp, #24]
 8007424:	9307      	str	r3, [sp, #28]
 8007426:	9b02      	ldr	r3, [sp, #8]
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	9308      	str	r3, [sp, #32]
 800742e:	4631      	mov	r1, r6
 8007430:	4658      	mov	r0, fp
 8007432:	f7ff faa1 	bl	8006978 <quorem>
 8007436:	4649      	mov	r1, r9
 8007438:	4605      	mov	r5, r0
 800743a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800743e:	4658      	mov	r0, fp
 8007440:	f000 fb14 	bl	8007a6c <__mcmp>
 8007444:	463a      	mov	r2, r7
 8007446:	9002      	str	r0, [sp, #8]
 8007448:	4631      	mov	r1, r6
 800744a:	4620      	mov	r0, r4
 800744c:	f000 fb28 	bl	8007aa0 <__mdiff>
 8007450:	68c3      	ldr	r3, [r0, #12]
 8007452:	4602      	mov	r2, r0
 8007454:	bb03      	cbnz	r3, 8007498 <_dtoa_r+0xa00>
 8007456:	4601      	mov	r1, r0
 8007458:	9009      	str	r0, [sp, #36]	; 0x24
 800745a:	4658      	mov	r0, fp
 800745c:	f000 fb06 	bl	8007a6c <__mcmp>
 8007460:	4603      	mov	r3, r0
 8007462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007464:	4611      	mov	r1, r2
 8007466:	4620      	mov	r0, r4
 8007468:	9309      	str	r3, [sp, #36]	; 0x24
 800746a:	f000 f91e 	bl	80076aa <_Bfree>
 800746e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007470:	b9a3      	cbnz	r3, 800749c <_dtoa_r+0xa04>
 8007472:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007474:	b992      	cbnz	r2, 800749c <_dtoa_r+0xa04>
 8007476:	9a08      	ldr	r2, [sp, #32]
 8007478:	b982      	cbnz	r2, 800749c <_dtoa_r+0xa04>
 800747a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800747e:	d029      	beq.n	80074d4 <_dtoa_r+0xa3c>
 8007480:	9b02      	ldr	r3, [sp, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	dd01      	ble.n	800748a <_dtoa_r+0x9f2>
 8007486:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800748a:	9b07      	ldr	r3, [sp, #28]
 800748c:	1c5d      	adds	r5, r3, #1
 800748e:	f883 8000 	strb.w	r8, [r3]
 8007492:	e784      	b.n	800739e <_dtoa_r+0x906>
 8007494:	4638      	mov	r0, r7
 8007496:	e7c2      	b.n	800741e <_dtoa_r+0x986>
 8007498:	2301      	movs	r3, #1
 800749a:	e7e3      	b.n	8007464 <_dtoa_r+0x9cc>
 800749c:	9a02      	ldr	r2, [sp, #8]
 800749e:	2a00      	cmp	r2, #0
 80074a0:	db04      	blt.n	80074ac <_dtoa_r+0xa14>
 80074a2:	d123      	bne.n	80074ec <_dtoa_r+0xa54>
 80074a4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80074a6:	bb0a      	cbnz	r2, 80074ec <_dtoa_r+0xa54>
 80074a8:	9a08      	ldr	r2, [sp, #32]
 80074aa:	b9fa      	cbnz	r2, 80074ec <_dtoa_r+0xa54>
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	ddec      	ble.n	800748a <_dtoa_r+0x9f2>
 80074b0:	4659      	mov	r1, fp
 80074b2:	2201      	movs	r2, #1
 80074b4:	4620      	mov	r0, r4
 80074b6:	f000 fa85 	bl	80079c4 <__lshift>
 80074ba:	4631      	mov	r1, r6
 80074bc:	4683      	mov	fp, r0
 80074be:	f000 fad5 	bl	8007a6c <__mcmp>
 80074c2:	2800      	cmp	r0, #0
 80074c4:	dc03      	bgt.n	80074ce <_dtoa_r+0xa36>
 80074c6:	d1e0      	bne.n	800748a <_dtoa_r+0x9f2>
 80074c8:	f018 0f01 	tst.w	r8, #1
 80074cc:	d0dd      	beq.n	800748a <_dtoa_r+0x9f2>
 80074ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80074d2:	d1d8      	bne.n	8007486 <_dtoa_r+0x9ee>
 80074d4:	9b07      	ldr	r3, [sp, #28]
 80074d6:	9a07      	ldr	r2, [sp, #28]
 80074d8:	1c5d      	adds	r5, r3, #1
 80074da:	2339      	movs	r3, #57	; 0x39
 80074dc:	7013      	strb	r3, [r2, #0]
 80074de:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80074e2:	1e6a      	subs	r2, r5, #1
 80074e4:	2b39      	cmp	r3, #57	; 0x39
 80074e6:	d04d      	beq.n	8007584 <_dtoa_r+0xaec>
 80074e8:	3301      	adds	r3, #1
 80074ea:	e052      	b.n	8007592 <_dtoa_r+0xafa>
 80074ec:	9a07      	ldr	r2, [sp, #28]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f102 0501 	add.w	r5, r2, #1
 80074f4:	dd06      	ble.n	8007504 <_dtoa_r+0xa6c>
 80074f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80074fa:	d0eb      	beq.n	80074d4 <_dtoa_r+0xa3c>
 80074fc:	f108 0801 	add.w	r8, r8, #1
 8007500:	9b07      	ldr	r3, [sp, #28]
 8007502:	e7c4      	b.n	800748e <_dtoa_r+0x9f6>
 8007504:	9b06      	ldr	r3, [sp, #24]
 8007506:	9a04      	ldr	r2, [sp, #16]
 8007508:	1aeb      	subs	r3, r5, r3
 800750a:	4293      	cmp	r3, r2
 800750c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007510:	d021      	beq.n	8007556 <_dtoa_r+0xabe>
 8007512:	4659      	mov	r1, fp
 8007514:	2300      	movs	r3, #0
 8007516:	220a      	movs	r2, #10
 8007518:	4620      	mov	r0, r4
 800751a:	f000 f8dd 	bl	80076d8 <__multadd>
 800751e:	45b9      	cmp	r9, r7
 8007520:	4683      	mov	fp, r0
 8007522:	f04f 0300 	mov.w	r3, #0
 8007526:	f04f 020a 	mov.w	r2, #10
 800752a:	4649      	mov	r1, r9
 800752c:	4620      	mov	r0, r4
 800752e:	d105      	bne.n	800753c <_dtoa_r+0xaa4>
 8007530:	f000 f8d2 	bl	80076d8 <__multadd>
 8007534:	4681      	mov	r9, r0
 8007536:	4607      	mov	r7, r0
 8007538:	9507      	str	r5, [sp, #28]
 800753a:	e778      	b.n	800742e <_dtoa_r+0x996>
 800753c:	f000 f8cc 	bl	80076d8 <__multadd>
 8007540:	4639      	mov	r1, r7
 8007542:	4681      	mov	r9, r0
 8007544:	2300      	movs	r3, #0
 8007546:	220a      	movs	r2, #10
 8007548:	4620      	mov	r0, r4
 800754a:	f000 f8c5 	bl	80076d8 <__multadd>
 800754e:	4607      	mov	r7, r0
 8007550:	e7f2      	b.n	8007538 <_dtoa_r+0xaa0>
 8007552:	f04f 0900 	mov.w	r9, #0
 8007556:	4659      	mov	r1, fp
 8007558:	2201      	movs	r2, #1
 800755a:	4620      	mov	r0, r4
 800755c:	f000 fa32 	bl	80079c4 <__lshift>
 8007560:	4631      	mov	r1, r6
 8007562:	4683      	mov	fp, r0
 8007564:	f000 fa82 	bl	8007a6c <__mcmp>
 8007568:	2800      	cmp	r0, #0
 800756a:	dcb8      	bgt.n	80074de <_dtoa_r+0xa46>
 800756c:	d102      	bne.n	8007574 <_dtoa_r+0xadc>
 800756e:	f018 0f01 	tst.w	r8, #1
 8007572:	d1b4      	bne.n	80074de <_dtoa_r+0xa46>
 8007574:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007578:	1e6a      	subs	r2, r5, #1
 800757a:	2b30      	cmp	r3, #48	; 0x30
 800757c:	f47f af0f 	bne.w	800739e <_dtoa_r+0x906>
 8007580:	4615      	mov	r5, r2
 8007582:	e7f7      	b.n	8007574 <_dtoa_r+0xadc>
 8007584:	9b06      	ldr	r3, [sp, #24]
 8007586:	4293      	cmp	r3, r2
 8007588:	d105      	bne.n	8007596 <_dtoa_r+0xafe>
 800758a:	2331      	movs	r3, #49	; 0x31
 800758c:	9a06      	ldr	r2, [sp, #24]
 800758e:	f10a 0a01 	add.w	sl, sl, #1
 8007592:	7013      	strb	r3, [r2, #0]
 8007594:	e703      	b.n	800739e <_dtoa_r+0x906>
 8007596:	4615      	mov	r5, r2
 8007598:	e7a1      	b.n	80074de <_dtoa_r+0xa46>
 800759a:	4b17      	ldr	r3, [pc, #92]	; (80075f8 <_dtoa_r+0xb60>)
 800759c:	f7ff bae1 	b.w	8006b62 <_dtoa_r+0xca>
 80075a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f47f aabb 	bne.w	8006b1e <_dtoa_r+0x86>
 80075a8:	4b14      	ldr	r3, [pc, #80]	; (80075fc <_dtoa_r+0xb64>)
 80075aa:	f7ff bada 	b.w	8006b62 <_dtoa_r+0xca>
 80075ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	f77f ae3f 	ble.w	8007234 <_dtoa_r+0x79c>
 80075b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075b8:	9308      	str	r3, [sp, #32]
 80075ba:	e653      	b.n	8007264 <_dtoa_r+0x7cc>
 80075bc:	9b04      	ldr	r3, [sp, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	dc03      	bgt.n	80075ca <_dtoa_r+0xb32>
 80075c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	f73f aed5 	bgt.w	8007374 <_dtoa_r+0x8dc>
 80075ca:	9d06      	ldr	r5, [sp, #24]
 80075cc:	4631      	mov	r1, r6
 80075ce:	4658      	mov	r0, fp
 80075d0:	f7ff f9d2 	bl	8006978 <quorem>
 80075d4:	9b06      	ldr	r3, [sp, #24]
 80075d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80075da:	f805 8b01 	strb.w	r8, [r5], #1
 80075de:	9a04      	ldr	r2, [sp, #16]
 80075e0:	1aeb      	subs	r3, r5, r3
 80075e2:	429a      	cmp	r2, r3
 80075e4:	ddb5      	ble.n	8007552 <_dtoa_r+0xaba>
 80075e6:	4659      	mov	r1, fp
 80075e8:	2300      	movs	r3, #0
 80075ea:	220a      	movs	r2, #10
 80075ec:	4620      	mov	r0, r4
 80075ee:	f000 f873 	bl	80076d8 <__multadd>
 80075f2:	4683      	mov	fp, r0
 80075f4:	e7ea      	b.n	80075cc <_dtoa_r+0xb34>
 80075f6:	bf00      	nop
 80075f8:	0800921c 	.word	0x0800921c
 80075fc:	0800921e 	.word	0x0800921e

08007600 <_localeconv_r>:
 8007600:	4b04      	ldr	r3, [pc, #16]	; (8007614 <_localeconv_r+0x14>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6a18      	ldr	r0, [r3, #32]
 8007606:	4b04      	ldr	r3, [pc, #16]	; (8007618 <_localeconv_r+0x18>)
 8007608:	2800      	cmp	r0, #0
 800760a:	bf08      	it	eq
 800760c:	4618      	moveq	r0, r3
 800760e:	30f0      	adds	r0, #240	; 0xf0
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	2000000c 	.word	0x2000000c
 8007618:	20000070 	.word	0x20000070

0800761c <malloc>:
 800761c:	4b02      	ldr	r3, [pc, #8]	; (8007628 <malloc+0xc>)
 800761e:	4601      	mov	r1, r0
 8007620:	6818      	ldr	r0, [r3, #0]
 8007622:	f000 baf9 	b.w	8007c18 <_malloc_r>
 8007626:	bf00      	nop
 8007628:	2000000c 	.word	0x2000000c

0800762c <memcpy>:
 800762c:	b510      	push	{r4, lr}
 800762e:	1e43      	subs	r3, r0, #1
 8007630:	440a      	add	r2, r1
 8007632:	4291      	cmp	r1, r2
 8007634:	d100      	bne.n	8007638 <memcpy+0xc>
 8007636:	bd10      	pop	{r4, pc}
 8007638:	f811 4b01 	ldrb.w	r4, [r1], #1
 800763c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007640:	e7f7      	b.n	8007632 <memcpy+0x6>

08007642 <_Balloc>:
 8007642:	b570      	push	{r4, r5, r6, lr}
 8007644:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007646:	4604      	mov	r4, r0
 8007648:	460e      	mov	r6, r1
 800764a:	b93d      	cbnz	r5, 800765c <_Balloc+0x1a>
 800764c:	2010      	movs	r0, #16
 800764e:	f7ff ffe5 	bl	800761c <malloc>
 8007652:	6260      	str	r0, [r4, #36]	; 0x24
 8007654:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007658:	6005      	str	r5, [r0, #0]
 800765a:	60c5      	str	r5, [r0, #12]
 800765c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800765e:	68eb      	ldr	r3, [r5, #12]
 8007660:	b183      	cbz	r3, 8007684 <_Balloc+0x42>
 8007662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800766a:	b9b8      	cbnz	r0, 800769c <_Balloc+0x5a>
 800766c:	2101      	movs	r1, #1
 800766e:	fa01 f506 	lsl.w	r5, r1, r6
 8007672:	1d6a      	adds	r2, r5, #5
 8007674:	0092      	lsls	r2, r2, #2
 8007676:	4620      	mov	r0, r4
 8007678:	f000 fabf 	bl	8007bfa <_calloc_r>
 800767c:	b160      	cbz	r0, 8007698 <_Balloc+0x56>
 800767e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007682:	e00e      	b.n	80076a2 <_Balloc+0x60>
 8007684:	2221      	movs	r2, #33	; 0x21
 8007686:	2104      	movs	r1, #4
 8007688:	4620      	mov	r0, r4
 800768a:	f000 fab6 	bl	8007bfa <_calloc_r>
 800768e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007690:	60e8      	str	r0, [r5, #12]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1e4      	bne.n	8007662 <_Balloc+0x20>
 8007698:	2000      	movs	r0, #0
 800769a:	bd70      	pop	{r4, r5, r6, pc}
 800769c:	6802      	ldr	r2, [r0, #0]
 800769e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80076a2:	2300      	movs	r3, #0
 80076a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80076a8:	e7f7      	b.n	800769a <_Balloc+0x58>

080076aa <_Bfree>:
 80076aa:	b570      	push	{r4, r5, r6, lr}
 80076ac:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80076ae:	4606      	mov	r6, r0
 80076b0:	460d      	mov	r5, r1
 80076b2:	b93c      	cbnz	r4, 80076c4 <_Bfree+0x1a>
 80076b4:	2010      	movs	r0, #16
 80076b6:	f7ff ffb1 	bl	800761c <malloc>
 80076ba:	6270      	str	r0, [r6, #36]	; 0x24
 80076bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076c0:	6004      	str	r4, [r0, #0]
 80076c2:	60c4      	str	r4, [r0, #12]
 80076c4:	b13d      	cbz	r5, 80076d6 <_Bfree+0x2c>
 80076c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80076c8:	686a      	ldr	r2, [r5, #4]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076d0:	6029      	str	r1, [r5, #0]
 80076d2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80076d6:	bd70      	pop	{r4, r5, r6, pc}

080076d8 <__multadd>:
 80076d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076dc:	461f      	mov	r7, r3
 80076de:	4606      	mov	r6, r0
 80076e0:	460c      	mov	r4, r1
 80076e2:	2300      	movs	r3, #0
 80076e4:	690d      	ldr	r5, [r1, #16]
 80076e6:	f101 0c14 	add.w	ip, r1, #20
 80076ea:	f8dc 0000 	ldr.w	r0, [ip]
 80076ee:	3301      	adds	r3, #1
 80076f0:	b281      	uxth	r1, r0
 80076f2:	fb02 7101 	mla	r1, r2, r1, r7
 80076f6:	0c00      	lsrs	r0, r0, #16
 80076f8:	0c0f      	lsrs	r7, r1, #16
 80076fa:	fb02 7000 	mla	r0, r2, r0, r7
 80076fe:	b289      	uxth	r1, r1
 8007700:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007704:	429d      	cmp	r5, r3
 8007706:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800770a:	f84c 1b04 	str.w	r1, [ip], #4
 800770e:	dcec      	bgt.n	80076ea <__multadd+0x12>
 8007710:	b1d7      	cbz	r7, 8007748 <__multadd+0x70>
 8007712:	68a3      	ldr	r3, [r4, #8]
 8007714:	42ab      	cmp	r3, r5
 8007716:	dc12      	bgt.n	800773e <__multadd+0x66>
 8007718:	6861      	ldr	r1, [r4, #4]
 800771a:	4630      	mov	r0, r6
 800771c:	3101      	adds	r1, #1
 800771e:	f7ff ff90 	bl	8007642 <_Balloc>
 8007722:	4680      	mov	r8, r0
 8007724:	6922      	ldr	r2, [r4, #16]
 8007726:	f104 010c 	add.w	r1, r4, #12
 800772a:	3202      	adds	r2, #2
 800772c:	0092      	lsls	r2, r2, #2
 800772e:	300c      	adds	r0, #12
 8007730:	f7ff ff7c 	bl	800762c <memcpy>
 8007734:	4621      	mov	r1, r4
 8007736:	4630      	mov	r0, r6
 8007738:	f7ff ffb7 	bl	80076aa <_Bfree>
 800773c:	4644      	mov	r4, r8
 800773e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007742:	3501      	adds	r5, #1
 8007744:	615f      	str	r7, [r3, #20]
 8007746:	6125      	str	r5, [r4, #16]
 8007748:	4620      	mov	r0, r4
 800774a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800774e <__hi0bits>:
 800774e:	0c02      	lsrs	r2, r0, #16
 8007750:	0412      	lsls	r2, r2, #16
 8007752:	4603      	mov	r3, r0
 8007754:	b9b2      	cbnz	r2, 8007784 <__hi0bits+0x36>
 8007756:	0403      	lsls	r3, r0, #16
 8007758:	2010      	movs	r0, #16
 800775a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800775e:	bf04      	itt	eq
 8007760:	021b      	lsleq	r3, r3, #8
 8007762:	3008      	addeq	r0, #8
 8007764:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007768:	bf04      	itt	eq
 800776a:	011b      	lsleq	r3, r3, #4
 800776c:	3004      	addeq	r0, #4
 800776e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007772:	bf04      	itt	eq
 8007774:	009b      	lsleq	r3, r3, #2
 8007776:	3002      	addeq	r0, #2
 8007778:	2b00      	cmp	r3, #0
 800777a:	db06      	blt.n	800778a <__hi0bits+0x3c>
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	d503      	bpl.n	8007788 <__hi0bits+0x3a>
 8007780:	3001      	adds	r0, #1
 8007782:	4770      	bx	lr
 8007784:	2000      	movs	r0, #0
 8007786:	e7e8      	b.n	800775a <__hi0bits+0xc>
 8007788:	2020      	movs	r0, #32
 800778a:	4770      	bx	lr

0800778c <__lo0bits>:
 800778c:	6803      	ldr	r3, [r0, #0]
 800778e:	4601      	mov	r1, r0
 8007790:	f013 0207 	ands.w	r2, r3, #7
 8007794:	d00b      	beq.n	80077ae <__lo0bits+0x22>
 8007796:	07da      	lsls	r2, r3, #31
 8007798:	d423      	bmi.n	80077e2 <__lo0bits+0x56>
 800779a:	0798      	lsls	r0, r3, #30
 800779c:	bf49      	itett	mi
 800779e:	085b      	lsrmi	r3, r3, #1
 80077a0:	089b      	lsrpl	r3, r3, #2
 80077a2:	2001      	movmi	r0, #1
 80077a4:	600b      	strmi	r3, [r1, #0]
 80077a6:	bf5c      	itt	pl
 80077a8:	600b      	strpl	r3, [r1, #0]
 80077aa:	2002      	movpl	r0, #2
 80077ac:	4770      	bx	lr
 80077ae:	b298      	uxth	r0, r3
 80077b0:	b9a8      	cbnz	r0, 80077de <__lo0bits+0x52>
 80077b2:	2010      	movs	r0, #16
 80077b4:	0c1b      	lsrs	r3, r3, #16
 80077b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80077ba:	bf04      	itt	eq
 80077bc:	0a1b      	lsreq	r3, r3, #8
 80077be:	3008      	addeq	r0, #8
 80077c0:	071a      	lsls	r2, r3, #28
 80077c2:	bf04      	itt	eq
 80077c4:	091b      	lsreq	r3, r3, #4
 80077c6:	3004      	addeq	r0, #4
 80077c8:	079a      	lsls	r2, r3, #30
 80077ca:	bf04      	itt	eq
 80077cc:	089b      	lsreq	r3, r3, #2
 80077ce:	3002      	addeq	r0, #2
 80077d0:	07da      	lsls	r2, r3, #31
 80077d2:	d402      	bmi.n	80077da <__lo0bits+0x4e>
 80077d4:	085b      	lsrs	r3, r3, #1
 80077d6:	d006      	beq.n	80077e6 <__lo0bits+0x5a>
 80077d8:	3001      	adds	r0, #1
 80077da:	600b      	str	r3, [r1, #0]
 80077dc:	4770      	bx	lr
 80077de:	4610      	mov	r0, r2
 80077e0:	e7e9      	b.n	80077b6 <__lo0bits+0x2a>
 80077e2:	2000      	movs	r0, #0
 80077e4:	4770      	bx	lr
 80077e6:	2020      	movs	r0, #32
 80077e8:	4770      	bx	lr

080077ea <__i2b>:
 80077ea:	b510      	push	{r4, lr}
 80077ec:	460c      	mov	r4, r1
 80077ee:	2101      	movs	r1, #1
 80077f0:	f7ff ff27 	bl	8007642 <_Balloc>
 80077f4:	2201      	movs	r2, #1
 80077f6:	6144      	str	r4, [r0, #20]
 80077f8:	6102      	str	r2, [r0, #16]
 80077fa:	bd10      	pop	{r4, pc}

080077fc <__multiply>:
 80077fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007800:	4614      	mov	r4, r2
 8007802:	690a      	ldr	r2, [r1, #16]
 8007804:	6923      	ldr	r3, [r4, #16]
 8007806:	4688      	mov	r8, r1
 8007808:	429a      	cmp	r2, r3
 800780a:	bfbe      	ittt	lt
 800780c:	460b      	movlt	r3, r1
 800780e:	46a0      	movlt	r8, r4
 8007810:	461c      	movlt	r4, r3
 8007812:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007816:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800781a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800781e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007822:	eb07 0609 	add.w	r6, r7, r9
 8007826:	42b3      	cmp	r3, r6
 8007828:	bfb8      	it	lt
 800782a:	3101      	addlt	r1, #1
 800782c:	f7ff ff09 	bl	8007642 <_Balloc>
 8007830:	f100 0514 	add.w	r5, r0, #20
 8007834:	462b      	mov	r3, r5
 8007836:	2200      	movs	r2, #0
 8007838:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800783c:	4573      	cmp	r3, lr
 800783e:	d316      	bcc.n	800786e <__multiply+0x72>
 8007840:	f104 0214 	add.w	r2, r4, #20
 8007844:	f108 0114 	add.w	r1, r8, #20
 8007848:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800784c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	9b00      	ldr	r3, [sp, #0]
 8007854:	9201      	str	r2, [sp, #4]
 8007856:	4293      	cmp	r3, r2
 8007858:	d80c      	bhi.n	8007874 <__multiply+0x78>
 800785a:	2e00      	cmp	r6, #0
 800785c:	dd03      	ble.n	8007866 <__multiply+0x6a>
 800785e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007862:	2b00      	cmp	r3, #0
 8007864:	d05d      	beq.n	8007922 <__multiply+0x126>
 8007866:	6106      	str	r6, [r0, #16]
 8007868:	b003      	add	sp, #12
 800786a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800786e:	f843 2b04 	str.w	r2, [r3], #4
 8007872:	e7e3      	b.n	800783c <__multiply+0x40>
 8007874:	f8b2 b000 	ldrh.w	fp, [r2]
 8007878:	f1bb 0f00 	cmp.w	fp, #0
 800787c:	d023      	beq.n	80078c6 <__multiply+0xca>
 800787e:	4689      	mov	r9, r1
 8007880:	46ac      	mov	ip, r5
 8007882:	f04f 0800 	mov.w	r8, #0
 8007886:	f859 4b04 	ldr.w	r4, [r9], #4
 800788a:	f8dc a000 	ldr.w	sl, [ip]
 800788e:	b2a3      	uxth	r3, r4
 8007890:	fa1f fa8a 	uxth.w	sl, sl
 8007894:	fb0b a303 	mla	r3, fp, r3, sl
 8007898:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800789c:	f8dc 4000 	ldr.w	r4, [ip]
 80078a0:	4443      	add	r3, r8
 80078a2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80078a6:	fb0b 840a 	mla	r4, fp, sl, r8
 80078aa:	46e2      	mov	sl, ip
 80078ac:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80078b6:	454f      	cmp	r7, r9
 80078b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80078bc:	f84a 3b04 	str.w	r3, [sl], #4
 80078c0:	d82b      	bhi.n	800791a <__multiply+0x11e>
 80078c2:	f8cc 8004 	str.w	r8, [ip, #4]
 80078c6:	9b01      	ldr	r3, [sp, #4]
 80078c8:	3204      	adds	r2, #4
 80078ca:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80078ce:	f1ba 0f00 	cmp.w	sl, #0
 80078d2:	d020      	beq.n	8007916 <__multiply+0x11a>
 80078d4:	4689      	mov	r9, r1
 80078d6:	46a8      	mov	r8, r5
 80078d8:	f04f 0b00 	mov.w	fp, #0
 80078dc:	682b      	ldr	r3, [r5, #0]
 80078de:	f8b9 c000 	ldrh.w	ip, [r9]
 80078e2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	fb0a 440c 	mla	r4, sl, ip, r4
 80078ec:	46c4      	mov	ip, r8
 80078ee:	445c      	add	r4, fp
 80078f0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80078f4:	f84c 3b04 	str.w	r3, [ip], #4
 80078f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80078fc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007900:	0c1b      	lsrs	r3, r3, #16
 8007902:	fb0a b303 	mla	r3, sl, r3, fp
 8007906:	454f      	cmp	r7, r9
 8007908:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800790c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007910:	d805      	bhi.n	800791e <__multiply+0x122>
 8007912:	f8c8 3004 	str.w	r3, [r8, #4]
 8007916:	3504      	adds	r5, #4
 8007918:	e79b      	b.n	8007852 <__multiply+0x56>
 800791a:	46d4      	mov	ip, sl
 800791c:	e7b3      	b.n	8007886 <__multiply+0x8a>
 800791e:	46e0      	mov	r8, ip
 8007920:	e7dd      	b.n	80078de <__multiply+0xe2>
 8007922:	3e01      	subs	r6, #1
 8007924:	e799      	b.n	800785a <__multiply+0x5e>
	...

08007928 <__pow5mult>:
 8007928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800792c:	4615      	mov	r5, r2
 800792e:	f012 0203 	ands.w	r2, r2, #3
 8007932:	4606      	mov	r6, r0
 8007934:	460f      	mov	r7, r1
 8007936:	d007      	beq.n	8007948 <__pow5mult+0x20>
 8007938:	4c21      	ldr	r4, [pc, #132]	; (80079c0 <__pow5mult+0x98>)
 800793a:	3a01      	subs	r2, #1
 800793c:	2300      	movs	r3, #0
 800793e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007942:	f7ff fec9 	bl	80076d8 <__multadd>
 8007946:	4607      	mov	r7, r0
 8007948:	10ad      	asrs	r5, r5, #2
 800794a:	d035      	beq.n	80079b8 <__pow5mult+0x90>
 800794c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800794e:	b93c      	cbnz	r4, 8007960 <__pow5mult+0x38>
 8007950:	2010      	movs	r0, #16
 8007952:	f7ff fe63 	bl	800761c <malloc>
 8007956:	6270      	str	r0, [r6, #36]	; 0x24
 8007958:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800795c:	6004      	str	r4, [r0, #0]
 800795e:	60c4      	str	r4, [r0, #12]
 8007960:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007964:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007968:	b94c      	cbnz	r4, 800797e <__pow5mult+0x56>
 800796a:	f240 2171 	movw	r1, #625	; 0x271
 800796e:	4630      	mov	r0, r6
 8007970:	f7ff ff3b 	bl	80077ea <__i2b>
 8007974:	2300      	movs	r3, #0
 8007976:	4604      	mov	r4, r0
 8007978:	f8c8 0008 	str.w	r0, [r8, #8]
 800797c:	6003      	str	r3, [r0, #0]
 800797e:	f04f 0800 	mov.w	r8, #0
 8007982:	07eb      	lsls	r3, r5, #31
 8007984:	d50a      	bpl.n	800799c <__pow5mult+0x74>
 8007986:	4639      	mov	r1, r7
 8007988:	4622      	mov	r2, r4
 800798a:	4630      	mov	r0, r6
 800798c:	f7ff ff36 	bl	80077fc <__multiply>
 8007990:	4681      	mov	r9, r0
 8007992:	4639      	mov	r1, r7
 8007994:	4630      	mov	r0, r6
 8007996:	f7ff fe88 	bl	80076aa <_Bfree>
 800799a:	464f      	mov	r7, r9
 800799c:	106d      	asrs	r5, r5, #1
 800799e:	d00b      	beq.n	80079b8 <__pow5mult+0x90>
 80079a0:	6820      	ldr	r0, [r4, #0]
 80079a2:	b938      	cbnz	r0, 80079b4 <__pow5mult+0x8c>
 80079a4:	4622      	mov	r2, r4
 80079a6:	4621      	mov	r1, r4
 80079a8:	4630      	mov	r0, r6
 80079aa:	f7ff ff27 	bl	80077fc <__multiply>
 80079ae:	6020      	str	r0, [r4, #0]
 80079b0:	f8c0 8000 	str.w	r8, [r0]
 80079b4:	4604      	mov	r4, r0
 80079b6:	e7e4      	b.n	8007982 <__pow5mult+0x5a>
 80079b8:	4638      	mov	r0, r7
 80079ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079be:	bf00      	nop
 80079c0:	08009320 	.word	0x08009320

080079c4 <__lshift>:
 80079c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079c8:	460c      	mov	r4, r1
 80079ca:	4607      	mov	r7, r0
 80079cc:	4616      	mov	r6, r2
 80079ce:	6923      	ldr	r3, [r4, #16]
 80079d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079d4:	eb0a 0903 	add.w	r9, sl, r3
 80079d8:	6849      	ldr	r1, [r1, #4]
 80079da:	68a3      	ldr	r3, [r4, #8]
 80079dc:	f109 0501 	add.w	r5, r9, #1
 80079e0:	42ab      	cmp	r3, r5
 80079e2:	db32      	blt.n	8007a4a <__lshift+0x86>
 80079e4:	4638      	mov	r0, r7
 80079e6:	f7ff fe2c 	bl	8007642 <_Balloc>
 80079ea:	2300      	movs	r3, #0
 80079ec:	4680      	mov	r8, r0
 80079ee:	461a      	mov	r2, r3
 80079f0:	f100 0114 	add.w	r1, r0, #20
 80079f4:	4553      	cmp	r3, sl
 80079f6:	db2b      	blt.n	8007a50 <__lshift+0x8c>
 80079f8:	6920      	ldr	r0, [r4, #16]
 80079fa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079fe:	f104 0314 	add.w	r3, r4, #20
 8007a02:	f016 021f 	ands.w	r2, r6, #31
 8007a06:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a0a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a0e:	d025      	beq.n	8007a5c <__lshift+0x98>
 8007a10:	2000      	movs	r0, #0
 8007a12:	f1c2 0e20 	rsb	lr, r2, #32
 8007a16:	468a      	mov	sl, r1
 8007a18:	681e      	ldr	r6, [r3, #0]
 8007a1a:	4096      	lsls	r6, r2
 8007a1c:	4330      	orrs	r0, r6
 8007a1e:	f84a 0b04 	str.w	r0, [sl], #4
 8007a22:	f853 0b04 	ldr.w	r0, [r3], #4
 8007a26:	459c      	cmp	ip, r3
 8007a28:	fa20 f00e 	lsr.w	r0, r0, lr
 8007a2c:	d814      	bhi.n	8007a58 <__lshift+0x94>
 8007a2e:	6048      	str	r0, [r1, #4]
 8007a30:	b108      	cbz	r0, 8007a36 <__lshift+0x72>
 8007a32:	f109 0502 	add.w	r5, r9, #2
 8007a36:	3d01      	subs	r5, #1
 8007a38:	4638      	mov	r0, r7
 8007a3a:	f8c8 5010 	str.w	r5, [r8, #16]
 8007a3e:	4621      	mov	r1, r4
 8007a40:	f7ff fe33 	bl	80076aa <_Bfree>
 8007a44:	4640      	mov	r0, r8
 8007a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a4a:	3101      	adds	r1, #1
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	e7c7      	b.n	80079e0 <__lshift+0x1c>
 8007a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007a54:	3301      	adds	r3, #1
 8007a56:	e7cd      	b.n	80079f4 <__lshift+0x30>
 8007a58:	4651      	mov	r1, sl
 8007a5a:	e7dc      	b.n	8007a16 <__lshift+0x52>
 8007a5c:	3904      	subs	r1, #4
 8007a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a62:	459c      	cmp	ip, r3
 8007a64:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a68:	d8f9      	bhi.n	8007a5e <__lshift+0x9a>
 8007a6a:	e7e4      	b.n	8007a36 <__lshift+0x72>

08007a6c <__mcmp>:
 8007a6c:	6903      	ldr	r3, [r0, #16]
 8007a6e:	690a      	ldr	r2, [r1, #16]
 8007a70:	b530      	push	{r4, r5, lr}
 8007a72:	1a9b      	subs	r3, r3, r2
 8007a74:	d10c      	bne.n	8007a90 <__mcmp+0x24>
 8007a76:	0092      	lsls	r2, r2, #2
 8007a78:	3014      	adds	r0, #20
 8007a7a:	3114      	adds	r1, #20
 8007a7c:	1884      	adds	r4, r0, r2
 8007a7e:	4411      	add	r1, r2
 8007a80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a88:	4295      	cmp	r5, r2
 8007a8a:	d003      	beq.n	8007a94 <__mcmp+0x28>
 8007a8c:	d305      	bcc.n	8007a9a <__mcmp+0x2e>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	4618      	mov	r0, r3
 8007a92:	bd30      	pop	{r4, r5, pc}
 8007a94:	42a0      	cmp	r0, r4
 8007a96:	d3f3      	bcc.n	8007a80 <__mcmp+0x14>
 8007a98:	e7fa      	b.n	8007a90 <__mcmp+0x24>
 8007a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a9e:	e7f7      	b.n	8007a90 <__mcmp+0x24>

08007aa0 <__mdiff>:
 8007aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa4:	460d      	mov	r5, r1
 8007aa6:	4607      	mov	r7, r0
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	4628      	mov	r0, r5
 8007aac:	4614      	mov	r4, r2
 8007aae:	f7ff ffdd 	bl	8007a6c <__mcmp>
 8007ab2:	1e06      	subs	r6, r0, #0
 8007ab4:	d108      	bne.n	8007ac8 <__mdiff+0x28>
 8007ab6:	4631      	mov	r1, r6
 8007ab8:	4638      	mov	r0, r7
 8007aba:	f7ff fdc2 	bl	8007642 <_Balloc>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ac8:	bfa4      	itt	ge
 8007aca:	4623      	movge	r3, r4
 8007acc:	462c      	movge	r4, r5
 8007ace:	4638      	mov	r0, r7
 8007ad0:	6861      	ldr	r1, [r4, #4]
 8007ad2:	bfa6      	itte	ge
 8007ad4:	461d      	movge	r5, r3
 8007ad6:	2600      	movge	r6, #0
 8007ad8:	2601      	movlt	r6, #1
 8007ada:	f7ff fdb2 	bl	8007642 <_Balloc>
 8007ade:	f04f 0e00 	mov.w	lr, #0
 8007ae2:	60c6      	str	r6, [r0, #12]
 8007ae4:	692b      	ldr	r3, [r5, #16]
 8007ae6:	6926      	ldr	r6, [r4, #16]
 8007ae8:	f104 0214 	add.w	r2, r4, #20
 8007aec:	f105 0914 	add.w	r9, r5, #20
 8007af0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007af4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007af8:	f100 0114 	add.w	r1, r0, #20
 8007afc:	f852 ab04 	ldr.w	sl, [r2], #4
 8007b00:	f859 5b04 	ldr.w	r5, [r9], #4
 8007b04:	fa1f f38a 	uxth.w	r3, sl
 8007b08:	4473      	add	r3, lr
 8007b0a:	b2ac      	uxth	r4, r5
 8007b0c:	1b1b      	subs	r3, r3, r4
 8007b0e:	0c2c      	lsrs	r4, r5, #16
 8007b10:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007b14:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007b1e:	45c8      	cmp	r8, r9
 8007b20:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007b24:	4694      	mov	ip, r2
 8007b26:	f841 4b04 	str.w	r4, [r1], #4
 8007b2a:	d8e7      	bhi.n	8007afc <__mdiff+0x5c>
 8007b2c:	45bc      	cmp	ip, r7
 8007b2e:	d304      	bcc.n	8007b3a <__mdiff+0x9a>
 8007b30:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007b34:	b183      	cbz	r3, 8007b58 <__mdiff+0xb8>
 8007b36:	6106      	str	r6, [r0, #16]
 8007b38:	e7c4      	b.n	8007ac4 <__mdiff+0x24>
 8007b3a:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007b3e:	b2a2      	uxth	r2, r4
 8007b40:	4472      	add	r2, lr
 8007b42:	1413      	asrs	r3, r2, #16
 8007b44:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007b48:	b292      	uxth	r2, r2
 8007b4a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007b4e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007b52:	f841 2b04 	str.w	r2, [r1], #4
 8007b56:	e7e9      	b.n	8007b2c <__mdiff+0x8c>
 8007b58:	3e01      	subs	r6, #1
 8007b5a:	e7e9      	b.n	8007b30 <__mdiff+0x90>

08007b5c <__d2b>:
 8007b5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007b60:	461c      	mov	r4, r3
 8007b62:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8007b66:	2101      	movs	r1, #1
 8007b68:	4690      	mov	r8, r2
 8007b6a:	f7ff fd6a 	bl	8007642 <_Balloc>
 8007b6e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007b72:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007b76:	4607      	mov	r7, r0
 8007b78:	bb34      	cbnz	r4, 8007bc8 <__d2b+0x6c>
 8007b7a:	9201      	str	r2, [sp, #4]
 8007b7c:	f1b8 0200 	subs.w	r2, r8, #0
 8007b80:	d027      	beq.n	8007bd2 <__d2b+0x76>
 8007b82:	a802      	add	r0, sp, #8
 8007b84:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007b88:	f7ff fe00 	bl	800778c <__lo0bits>
 8007b8c:	9900      	ldr	r1, [sp, #0]
 8007b8e:	b1f0      	cbz	r0, 8007bce <__d2b+0x72>
 8007b90:	9a01      	ldr	r2, [sp, #4]
 8007b92:	f1c0 0320 	rsb	r3, r0, #32
 8007b96:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9a:	430b      	orrs	r3, r1
 8007b9c:	40c2      	lsrs	r2, r0
 8007b9e:	617b      	str	r3, [r7, #20]
 8007ba0:	9201      	str	r2, [sp, #4]
 8007ba2:	9b01      	ldr	r3, [sp, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	bf14      	ite	ne
 8007ba8:	2102      	movne	r1, #2
 8007baa:	2101      	moveq	r1, #1
 8007bac:	61bb      	str	r3, [r7, #24]
 8007bae:	6139      	str	r1, [r7, #16]
 8007bb0:	b1c4      	cbz	r4, 8007be4 <__d2b+0x88>
 8007bb2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007bb6:	4404      	add	r4, r0
 8007bb8:	6034      	str	r4, [r6, #0]
 8007bba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007bbe:	6028      	str	r0, [r5, #0]
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	b002      	add	sp, #8
 8007bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bc8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007bcc:	e7d5      	b.n	8007b7a <__d2b+0x1e>
 8007bce:	6179      	str	r1, [r7, #20]
 8007bd0:	e7e7      	b.n	8007ba2 <__d2b+0x46>
 8007bd2:	a801      	add	r0, sp, #4
 8007bd4:	f7ff fdda 	bl	800778c <__lo0bits>
 8007bd8:	2101      	movs	r1, #1
 8007bda:	9b01      	ldr	r3, [sp, #4]
 8007bdc:	6139      	str	r1, [r7, #16]
 8007bde:	617b      	str	r3, [r7, #20]
 8007be0:	3020      	adds	r0, #32
 8007be2:	e7e5      	b.n	8007bb0 <__d2b+0x54>
 8007be4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007be8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007bec:	6030      	str	r0, [r6, #0]
 8007bee:	6918      	ldr	r0, [r3, #16]
 8007bf0:	f7ff fdad 	bl	800774e <__hi0bits>
 8007bf4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007bf8:	e7e1      	b.n	8007bbe <__d2b+0x62>

08007bfa <_calloc_r>:
 8007bfa:	b538      	push	{r3, r4, r5, lr}
 8007bfc:	fb02 f401 	mul.w	r4, r2, r1
 8007c00:	4621      	mov	r1, r4
 8007c02:	f000 f809 	bl	8007c18 <_malloc_r>
 8007c06:	4605      	mov	r5, r0
 8007c08:	b118      	cbz	r0, 8007c12 <_calloc_r+0x18>
 8007c0a:	4622      	mov	r2, r4
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	f7fe fb6d 	bl	80062ec <memset>
 8007c12:	4628      	mov	r0, r5
 8007c14:	bd38      	pop	{r3, r4, r5, pc}
	...

08007c18 <_malloc_r>:
 8007c18:	b570      	push	{r4, r5, r6, lr}
 8007c1a:	1ccd      	adds	r5, r1, #3
 8007c1c:	f025 0503 	bic.w	r5, r5, #3
 8007c20:	3508      	adds	r5, #8
 8007c22:	2d0c      	cmp	r5, #12
 8007c24:	bf38      	it	cc
 8007c26:	250c      	movcc	r5, #12
 8007c28:	2d00      	cmp	r5, #0
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	db01      	blt.n	8007c32 <_malloc_r+0x1a>
 8007c2e:	42a9      	cmp	r1, r5
 8007c30:	d903      	bls.n	8007c3a <_malloc_r+0x22>
 8007c32:	230c      	movs	r3, #12
 8007c34:	6033      	str	r3, [r6, #0]
 8007c36:	2000      	movs	r0, #0
 8007c38:	bd70      	pop	{r4, r5, r6, pc}
 8007c3a:	f000 f869 	bl	8007d10 <__malloc_lock>
 8007c3e:	4a21      	ldr	r2, [pc, #132]	; (8007cc4 <_malloc_r+0xac>)
 8007c40:	6814      	ldr	r4, [r2, #0]
 8007c42:	4621      	mov	r1, r4
 8007c44:	b991      	cbnz	r1, 8007c6c <_malloc_r+0x54>
 8007c46:	4c20      	ldr	r4, [pc, #128]	; (8007cc8 <_malloc_r+0xb0>)
 8007c48:	6823      	ldr	r3, [r4, #0]
 8007c4a:	b91b      	cbnz	r3, 8007c54 <_malloc_r+0x3c>
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	f000 f83d 	bl	8007ccc <_sbrk_r>
 8007c52:	6020      	str	r0, [r4, #0]
 8007c54:	4629      	mov	r1, r5
 8007c56:	4630      	mov	r0, r6
 8007c58:	f000 f838 	bl	8007ccc <_sbrk_r>
 8007c5c:	1c43      	adds	r3, r0, #1
 8007c5e:	d124      	bne.n	8007caa <_malloc_r+0x92>
 8007c60:	230c      	movs	r3, #12
 8007c62:	4630      	mov	r0, r6
 8007c64:	6033      	str	r3, [r6, #0]
 8007c66:	f000 f854 	bl	8007d12 <__malloc_unlock>
 8007c6a:	e7e4      	b.n	8007c36 <_malloc_r+0x1e>
 8007c6c:	680b      	ldr	r3, [r1, #0]
 8007c6e:	1b5b      	subs	r3, r3, r5
 8007c70:	d418      	bmi.n	8007ca4 <_malloc_r+0x8c>
 8007c72:	2b0b      	cmp	r3, #11
 8007c74:	d90f      	bls.n	8007c96 <_malloc_r+0x7e>
 8007c76:	600b      	str	r3, [r1, #0]
 8007c78:	18cc      	adds	r4, r1, r3
 8007c7a:	50cd      	str	r5, [r1, r3]
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	f000 f848 	bl	8007d12 <__malloc_unlock>
 8007c82:	f104 000b 	add.w	r0, r4, #11
 8007c86:	1d23      	adds	r3, r4, #4
 8007c88:	f020 0007 	bic.w	r0, r0, #7
 8007c8c:	1ac3      	subs	r3, r0, r3
 8007c8e:	d0d3      	beq.n	8007c38 <_malloc_r+0x20>
 8007c90:	425a      	negs	r2, r3
 8007c92:	50e2      	str	r2, [r4, r3]
 8007c94:	e7d0      	b.n	8007c38 <_malloc_r+0x20>
 8007c96:	684b      	ldr	r3, [r1, #4]
 8007c98:	428c      	cmp	r4, r1
 8007c9a:	bf16      	itet	ne
 8007c9c:	6063      	strne	r3, [r4, #4]
 8007c9e:	6013      	streq	r3, [r2, #0]
 8007ca0:	460c      	movne	r4, r1
 8007ca2:	e7eb      	b.n	8007c7c <_malloc_r+0x64>
 8007ca4:	460c      	mov	r4, r1
 8007ca6:	6849      	ldr	r1, [r1, #4]
 8007ca8:	e7cc      	b.n	8007c44 <_malloc_r+0x2c>
 8007caa:	1cc4      	adds	r4, r0, #3
 8007cac:	f024 0403 	bic.w	r4, r4, #3
 8007cb0:	42a0      	cmp	r0, r4
 8007cb2:	d005      	beq.n	8007cc0 <_malloc_r+0xa8>
 8007cb4:	1a21      	subs	r1, r4, r0
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	f000 f808 	bl	8007ccc <_sbrk_r>
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	d0cf      	beq.n	8007c60 <_malloc_r+0x48>
 8007cc0:	6025      	str	r5, [r4, #0]
 8007cc2:	e7db      	b.n	8007c7c <_malloc_r+0x64>
 8007cc4:	20000260 	.word	0x20000260
 8007cc8:	20000264 	.word	0x20000264

08007ccc <_sbrk_r>:
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	2300      	movs	r3, #0
 8007cd0:	4c05      	ldr	r4, [pc, #20]	; (8007ce8 <_sbrk_r+0x1c>)
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	4608      	mov	r0, r1
 8007cd6:	6023      	str	r3, [r4, #0]
 8007cd8:	f7fe f8a4 	bl	8005e24 <_sbrk>
 8007cdc:	1c43      	adds	r3, r0, #1
 8007cde:	d102      	bne.n	8007ce6 <_sbrk_r+0x1a>
 8007ce0:	6823      	ldr	r3, [r4, #0]
 8007ce2:	b103      	cbz	r3, 8007ce6 <_sbrk_r+0x1a>
 8007ce4:	602b      	str	r3, [r5, #0]
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
 8007ce8:	200004f0 	.word	0x200004f0

08007cec <__ascii_mbtowc>:
 8007cec:	b082      	sub	sp, #8
 8007cee:	b901      	cbnz	r1, 8007cf2 <__ascii_mbtowc+0x6>
 8007cf0:	a901      	add	r1, sp, #4
 8007cf2:	b142      	cbz	r2, 8007d06 <__ascii_mbtowc+0x1a>
 8007cf4:	b14b      	cbz	r3, 8007d0a <__ascii_mbtowc+0x1e>
 8007cf6:	7813      	ldrb	r3, [r2, #0]
 8007cf8:	600b      	str	r3, [r1, #0]
 8007cfa:	7812      	ldrb	r2, [r2, #0]
 8007cfc:	1c10      	adds	r0, r2, #0
 8007cfe:	bf18      	it	ne
 8007d00:	2001      	movne	r0, #1
 8007d02:	b002      	add	sp, #8
 8007d04:	4770      	bx	lr
 8007d06:	4610      	mov	r0, r2
 8007d08:	e7fb      	b.n	8007d02 <__ascii_mbtowc+0x16>
 8007d0a:	f06f 0001 	mvn.w	r0, #1
 8007d0e:	e7f8      	b.n	8007d02 <__ascii_mbtowc+0x16>

08007d10 <__malloc_lock>:
 8007d10:	4770      	bx	lr

08007d12 <__malloc_unlock>:
 8007d12:	4770      	bx	lr

08007d14 <__ascii_wctomb>:
 8007d14:	b149      	cbz	r1, 8007d2a <__ascii_wctomb+0x16>
 8007d16:	2aff      	cmp	r2, #255	; 0xff
 8007d18:	bf8b      	itete	hi
 8007d1a:	238a      	movhi	r3, #138	; 0x8a
 8007d1c:	700a      	strbls	r2, [r1, #0]
 8007d1e:	6003      	strhi	r3, [r0, #0]
 8007d20:	2001      	movls	r0, #1
 8007d22:	bf88      	it	hi
 8007d24:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d28:	4770      	bx	lr
 8007d2a:	4608      	mov	r0, r1
 8007d2c:	4770      	bx	lr
	...

08007d30 <atan>:
 8007d30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d34:	4bb6      	ldr	r3, [pc, #728]	; (8008010 <atan+0x2e0>)
 8007d36:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007d3a:	429e      	cmp	r6, r3
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	460d      	mov	r5, r1
 8007d40:	468b      	mov	fp, r1
 8007d42:	dd17      	ble.n	8007d74 <atan+0x44>
 8007d44:	4bb3      	ldr	r3, [pc, #716]	; (8008014 <atan+0x2e4>)
 8007d46:	429e      	cmp	r6, r3
 8007d48:	dc01      	bgt.n	8007d4e <atan+0x1e>
 8007d4a:	d109      	bne.n	8007d60 <atan+0x30>
 8007d4c:	b140      	cbz	r0, 8007d60 <atan+0x30>
 8007d4e:	4622      	mov	r2, r4
 8007d50:	462b      	mov	r3, r5
 8007d52:	4620      	mov	r0, r4
 8007d54:	4629      	mov	r1, r5
 8007d56:	f7f8 fa09 	bl	800016c <__adddf3>
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	460d      	mov	r5, r1
 8007d5e:	e005      	b.n	8007d6c <atan+0x3c>
 8007d60:	f1bb 0f00 	cmp.w	fp, #0
 8007d64:	4cac      	ldr	r4, [pc, #688]	; (8008018 <atan+0x2e8>)
 8007d66:	f340 8121 	ble.w	8007fac <atan+0x27c>
 8007d6a:	4dac      	ldr	r5, [pc, #688]	; (800801c <atan+0x2ec>)
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	4629      	mov	r1, r5
 8007d70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d74:	4baa      	ldr	r3, [pc, #680]	; (8008020 <atan+0x2f0>)
 8007d76:	429e      	cmp	r6, r3
 8007d78:	dc11      	bgt.n	8007d9e <atan+0x6e>
 8007d7a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007d7e:	429e      	cmp	r6, r3
 8007d80:	dc0a      	bgt.n	8007d98 <atan+0x68>
 8007d82:	a38b      	add	r3, pc, #556	; (adr r3, 8007fb0 <atan+0x280>)
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	f7f8 f9f0 	bl	800016c <__adddf3>
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	4ba5      	ldr	r3, [pc, #660]	; (8008024 <atan+0x2f4>)
 8007d90:	f7f8 fe32 	bl	80009f8 <__aeabi_dcmpgt>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	d1e9      	bne.n	8007d6c <atan+0x3c>
 8007d98:	f04f 3aff 	mov.w	sl, #4294967295
 8007d9c:	e027      	b.n	8007dee <atan+0xbe>
 8007d9e:	f000 f951 	bl	8008044 <fabs>
 8007da2:	4ba1      	ldr	r3, [pc, #644]	; (8008028 <atan+0x2f8>)
 8007da4:	4604      	mov	r4, r0
 8007da6:	429e      	cmp	r6, r3
 8007da8:	460d      	mov	r5, r1
 8007daa:	f300 80b8 	bgt.w	8007f1e <atan+0x1ee>
 8007dae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007db2:	429e      	cmp	r6, r3
 8007db4:	f300 809c 	bgt.w	8007ef0 <atan+0x1c0>
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	f7f8 f9d6 	bl	800016c <__adddf3>
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	4b98      	ldr	r3, [pc, #608]	; (8008024 <atan+0x2f4>)
 8007dc4:	f7f8 f9d0 	bl	8000168 <__aeabi_dsub>
 8007dc8:	2200      	movs	r2, #0
 8007dca:	4606      	mov	r6, r0
 8007dcc:	460f      	mov	r7, r1
 8007dce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	f7f8 f9c9 	bl	800016c <__adddf3>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4630      	mov	r0, r6
 8007de0:	4639      	mov	r1, r7
 8007de2:	f7f8 fca3 	bl	800072c <__aeabi_ddiv>
 8007de6:	f04f 0a00 	mov.w	sl, #0
 8007dea:	4604      	mov	r4, r0
 8007dec:	460d      	mov	r5, r1
 8007dee:	4622      	mov	r2, r4
 8007df0:	462b      	mov	r3, r5
 8007df2:	4620      	mov	r0, r4
 8007df4:	4629      	mov	r1, r5
 8007df6:	f7f8 fb6f 	bl	80004d8 <__aeabi_dmul>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	4680      	mov	r8, r0
 8007e00:	4689      	mov	r9, r1
 8007e02:	f7f8 fb69 	bl	80004d8 <__aeabi_dmul>
 8007e06:	a36c      	add	r3, pc, #432	; (adr r3, 8007fb8 <atan+0x288>)
 8007e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0c:	4606      	mov	r6, r0
 8007e0e:	460f      	mov	r7, r1
 8007e10:	f7f8 fb62 	bl	80004d8 <__aeabi_dmul>
 8007e14:	a36a      	add	r3, pc, #424	; (adr r3, 8007fc0 <atan+0x290>)
 8007e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1a:	f7f8 f9a7 	bl	800016c <__adddf3>
 8007e1e:	4632      	mov	r2, r6
 8007e20:	463b      	mov	r3, r7
 8007e22:	f7f8 fb59 	bl	80004d8 <__aeabi_dmul>
 8007e26:	a368      	add	r3, pc, #416	; (adr r3, 8007fc8 <atan+0x298>)
 8007e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2c:	f7f8 f99e 	bl	800016c <__adddf3>
 8007e30:	4632      	mov	r2, r6
 8007e32:	463b      	mov	r3, r7
 8007e34:	f7f8 fb50 	bl	80004d8 <__aeabi_dmul>
 8007e38:	a365      	add	r3, pc, #404	; (adr r3, 8007fd0 <atan+0x2a0>)
 8007e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3e:	f7f8 f995 	bl	800016c <__adddf3>
 8007e42:	4632      	mov	r2, r6
 8007e44:	463b      	mov	r3, r7
 8007e46:	f7f8 fb47 	bl	80004d8 <__aeabi_dmul>
 8007e4a:	a363      	add	r3, pc, #396	; (adr r3, 8007fd8 <atan+0x2a8>)
 8007e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e50:	f7f8 f98c 	bl	800016c <__adddf3>
 8007e54:	4632      	mov	r2, r6
 8007e56:	463b      	mov	r3, r7
 8007e58:	f7f8 fb3e 	bl	80004d8 <__aeabi_dmul>
 8007e5c:	a360      	add	r3, pc, #384	; (adr r3, 8007fe0 <atan+0x2b0>)
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	f7f8 f983 	bl	800016c <__adddf3>
 8007e66:	4642      	mov	r2, r8
 8007e68:	464b      	mov	r3, r9
 8007e6a:	f7f8 fb35 	bl	80004d8 <__aeabi_dmul>
 8007e6e:	a35e      	add	r3, pc, #376	; (adr r3, 8007fe8 <atan+0x2b8>)
 8007e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e74:	4680      	mov	r8, r0
 8007e76:	4689      	mov	r9, r1
 8007e78:	4630      	mov	r0, r6
 8007e7a:	4639      	mov	r1, r7
 8007e7c:	f7f8 fb2c 	bl	80004d8 <__aeabi_dmul>
 8007e80:	a35b      	add	r3, pc, #364	; (adr r3, 8007ff0 <atan+0x2c0>)
 8007e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e86:	f7f8 f96f 	bl	8000168 <__aeabi_dsub>
 8007e8a:	4632      	mov	r2, r6
 8007e8c:	463b      	mov	r3, r7
 8007e8e:	f7f8 fb23 	bl	80004d8 <__aeabi_dmul>
 8007e92:	a359      	add	r3, pc, #356	; (adr r3, 8007ff8 <atan+0x2c8>)
 8007e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e98:	f7f8 f966 	bl	8000168 <__aeabi_dsub>
 8007e9c:	4632      	mov	r2, r6
 8007e9e:	463b      	mov	r3, r7
 8007ea0:	f7f8 fb1a 	bl	80004d8 <__aeabi_dmul>
 8007ea4:	a356      	add	r3, pc, #344	; (adr r3, 8008000 <atan+0x2d0>)
 8007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eaa:	f7f8 f95d 	bl	8000168 <__aeabi_dsub>
 8007eae:	4632      	mov	r2, r6
 8007eb0:	463b      	mov	r3, r7
 8007eb2:	f7f8 fb11 	bl	80004d8 <__aeabi_dmul>
 8007eb6:	a354      	add	r3, pc, #336	; (adr r3, 8008008 <atan+0x2d8>)
 8007eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebc:	f7f8 f954 	bl	8000168 <__aeabi_dsub>
 8007ec0:	4632      	mov	r2, r6
 8007ec2:	463b      	mov	r3, r7
 8007ec4:	f7f8 fb08 	bl	80004d8 <__aeabi_dmul>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	460b      	mov	r3, r1
 8007ecc:	4640      	mov	r0, r8
 8007ece:	4649      	mov	r1, r9
 8007ed0:	f7f8 f94c 	bl	800016c <__adddf3>
 8007ed4:	4622      	mov	r2, r4
 8007ed6:	462b      	mov	r3, r5
 8007ed8:	f7f8 fafe 	bl	80004d8 <__aeabi_dmul>
 8007edc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	d144      	bne.n	8007f70 <atan+0x240>
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	4629      	mov	r1, r5
 8007eea:	f7f8 f93d 	bl	8000168 <__aeabi_dsub>
 8007eee:	e734      	b.n	8007d5a <atan+0x2a>
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	4b4c      	ldr	r3, [pc, #304]	; (8008024 <atan+0x2f4>)
 8007ef4:	f7f8 f938 	bl	8000168 <__aeabi_dsub>
 8007ef8:	2200      	movs	r2, #0
 8007efa:	4606      	mov	r6, r0
 8007efc:	460f      	mov	r7, r1
 8007efe:	4b49      	ldr	r3, [pc, #292]	; (8008024 <atan+0x2f4>)
 8007f00:	4620      	mov	r0, r4
 8007f02:	4629      	mov	r1, r5
 8007f04:	f7f8 f932 	bl	800016c <__adddf3>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	4639      	mov	r1, r7
 8007f10:	f7f8 fc0c 	bl	800072c <__aeabi_ddiv>
 8007f14:	f04f 0a01 	mov.w	sl, #1
 8007f18:	4604      	mov	r4, r0
 8007f1a:	460d      	mov	r5, r1
 8007f1c:	e767      	b.n	8007dee <atan+0xbe>
 8007f1e:	4b43      	ldr	r3, [pc, #268]	; (800802c <atan+0x2fc>)
 8007f20:	429e      	cmp	r6, r3
 8007f22:	dc1a      	bgt.n	8007f5a <atan+0x22a>
 8007f24:	2200      	movs	r2, #0
 8007f26:	4b42      	ldr	r3, [pc, #264]	; (8008030 <atan+0x300>)
 8007f28:	f7f8 f91e 	bl	8000168 <__aeabi_dsub>
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	4606      	mov	r6, r0
 8007f30:	460f      	mov	r7, r1
 8007f32:	4b3f      	ldr	r3, [pc, #252]	; (8008030 <atan+0x300>)
 8007f34:	4620      	mov	r0, r4
 8007f36:	4629      	mov	r1, r5
 8007f38:	f7f8 face 	bl	80004d8 <__aeabi_dmul>
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	4b39      	ldr	r3, [pc, #228]	; (8008024 <atan+0x2f4>)
 8007f40:	f7f8 f914 	bl	800016c <__adddf3>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	4630      	mov	r0, r6
 8007f4a:	4639      	mov	r1, r7
 8007f4c:	f7f8 fbee 	bl	800072c <__aeabi_ddiv>
 8007f50:	f04f 0a02 	mov.w	sl, #2
 8007f54:	4604      	mov	r4, r0
 8007f56:	460d      	mov	r5, r1
 8007f58:	e749      	b.n	8007dee <atan+0xbe>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	2000      	movs	r0, #0
 8007f60:	4934      	ldr	r1, [pc, #208]	; (8008034 <atan+0x304>)
 8007f62:	f7f8 fbe3 	bl	800072c <__aeabi_ddiv>
 8007f66:	f04f 0a03 	mov.w	sl, #3
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	460d      	mov	r5, r1
 8007f6e:	e73e      	b.n	8007dee <atan+0xbe>
 8007f70:	4b31      	ldr	r3, [pc, #196]	; (8008038 <atan+0x308>)
 8007f72:	4e32      	ldr	r6, [pc, #200]	; (800803c <atan+0x30c>)
 8007f74:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8007f78:	4456      	add	r6, sl
 8007f7a:	449a      	add	sl, r3
 8007f7c:	e9da 2300 	ldrd	r2, r3, [sl]
 8007f80:	f7f8 f8f2 	bl	8000168 <__aeabi_dsub>
 8007f84:	4622      	mov	r2, r4
 8007f86:	462b      	mov	r3, r5
 8007f88:	f7f8 f8ee 	bl	8000168 <__aeabi_dsub>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007f94:	f7f8 f8e8 	bl	8000168 <__aeabi_dsub>
 8007f98:	f1bb 0f00 	cmp.w	fp, #0
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	460d      	mov	r5, r1
 8007fa0:	f6bf aee4 	bge.w	8007d6c <atan+0x3c>
 8007fa4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fa8:	461d      	mov	r5, r3
 8007faa:	e6df      	b.n	8007d6c <atan+0x3c>
 8007fac:	4d24      	ldr	r5, [pc, #144]	; (8008040 <atan+0x310>)
 8007fae:	e6dd      	b.n	8007d6c <atan+0x3c>
 8007fb0:	8800759c 	.word	0x8800759c
 8007fb4:	7e37e43c 	.word	0x7e37e43c
 8007fb8:	e322da11 	.word	0xe322da11
 8007fbc:	3f90ad3a 	.word	0x3f90ad3a
 8007fc0:	24760deb 	.word	0x24760deb
 8007fc4:	3fa97b4b 	.word	0x3fa97b4b
 8007fc8:	a0d03d51 	.word	0xa0d03d51
 8007fcc:	3fb10d66 	.word	0x3fb10d66
 8007fd0:	c54c206e 	.word	0xc54c206e
 8007fd4:	3fb745cd 	.word	0x3fb745cd
 8007fd8:	920083ff 	.word	0x920083ff
 8007fdc:	3fc24924 	.word	0x3fc24924
 8007fe0:	5555550d 	.word	0x5555550d
 8007fe4:	3fd55555 	.word	0x3fd55555
 8007fe8:	2c6a6c2f 	.word	0x2c6a6c2f
 8007fec:	bfa2b444 	.word	0xbfa2b444
 8007ff0:	52defd9a 	.word	0x52defd9a
 8007ff4:	3fadde2d 	.word	0x3fadde2d
 8007ff8:	af749a6d 	.word	0xaf749a6d
 8007ffc:	3fb3b0f2 	.word	0x3fb3b0f2
 8008000:	fe231671 	.word	0xfe231671
 8008004:	3fbc71c6 	.word	0x3fbc71c6
 8008008:	9998ebc4 	.word	0x9998ebc4
 800800c:	3fc99999 	.word	0x3fc99999
 8008010:	440fffff 	.word	0x440fffff
 8008014:	7ff00000 	.word	0x7ff00000
 8008018:	54442d18 	.word	0x54442d18
 800801c:	3ff921fb 	.word	0x3ff921fb
 8008020:	3fdbffff 	.word	0x3fdbffff
 8008024:	3ff00000 	.word	0x3ff00000
 8008028:	3ff2ffff 	.word	0x3ff2ffff
 800802c:	40037fff 	.word	0x40037fff
 8008030:	3ff80000 	.word	0x3ff80000
 8008034:	bff00000 	.word	0xbff00000
 8008038:	08009458 	.word	0x08009458
 800803c:	08009438 	.word	0x08009438
 8008040:	bff921fb 	.word	0xbff921fb

08008044 <fabs>:
 8008044:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008048:	4619      	mov	r1, r3
 800804a:	4770      	bx	lr

0800804c <round>:
 800804c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008052:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8008056:	2c13      	cmp	r4, #19
 8008058:	4606      	mov	r6, r0
 800805a:	460d      	mov	r5, r1
 800805c:	460b      	mov	r3, r1
 800805e:	468c      	mov	ip, r1
 8008060:	4602      	mov	r2, r0
 8008062:	dc17      	bgt.n	8008094 <round+0x48>
 8008064:	2c00      	cmp	r4, #0
 8008066:	da09      	bge.n	800807c <round+0x30>
 8008068:	3401      	adds	r4, #1
 800806a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800806e:	d103      	bne.n	8008078 <round+0x2c>
 8008070:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008074:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008078:	2200      	movs	r2, #0
 800807a:	e028      	b.n	80080ce <round+0x82>
 800807c:	4915      	ldr	r1, [pc, #84]	; (80080d4 <round+0x88>)
 800807e:	4121      	asrs	r1, r4
 8008080:	420d      	tst	r5, r1
 8008082:	d100      	bne.n	8008086 <round+0x3a>
 8008084:	b178      	cbz	r0, 80080a6 <round+0x5a>
 8008086:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800808a:	4123      	asrs	r3, r4
 800808c:	4463      	add	r3, ip
 800808e:	ea23 0301 	bic.w	r3, r3, r1
 8008092:	e7f1      	b.n	8008078 <round+0x2c>
 8008094:	2c33      	cmp	r4, #51	; 0x33
 8008096:	dd09      	ble.n	80080ac <round+0x60>
 8008098:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800809c:	d103      	bne.n	80080a6 <round+0x5a>
 800809e:	f7f8 f865 	bl	800016c <__adddf3>
 80080a2:	4606      	mov	r6, r0
 80080a4:	460d      	mov	r5, r1
 80080a6:	4630      	mov	r0, r6
 80080a8:	4629      	mov	r1, r5
 80080aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080ac:	f04f 30ff 	mov.w	r0, #4294967295
 80080b0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80080b4:	40f8      	lsrs	r0, r7
 80080b6:	4206      	tst	r6, r0
 80080b8:	d0f5      	beq.n	80080a6 <round+0x5a>
 80080ba:	2101      	movs	r1, #1
 80080bc:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80080c0:	fa01 f404 	lsl.w	r4, r1, r4
 80080c4:	1932      	adds	r2, r6, r4
 80080c6:	bf28      	it	cs
 80080c8:	185b      	addcs	r3, r3, r1
 80080ca:	ea22 0200 	bic.w	r2, r2, r0
 80080ce:	4619      	mov	r1, r3
 80080d0:	4610      	mov	r0, r2
 80080d2:	e7e6      	b.n	80080a2 <round+0x56>
 80080d4:	000fffff 	.word	0x000fffff

080080d8 <pow>:
 80080d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080dc:	b08f      	sub	sp, #60	; 0x3c
 80080de:	461d      	mov	r5, r3
 80080e0:	4680      	mov	r8, r0
 80080e2:	4689      	mov	r9, r1
 80080e4:	4614      	mov	r4, r2
 80080e6:	f000 f9a7 	bl	8008438 <__ieee754_pow>
 80080ea:	4fa1      	ldr	r7, [pc, #644]	; (8008370 <pow+0x298>)
 80080ec:	e9cd 0100 	strd	r0, r1, [sp]
 80080f0:	f997 3000 	ldrsb.w	r3, [r7]
 80080f4:	463e      	mov	r6, r7
 80080f6:	9302      	str	r3, [sp, #8]
 80080f8:	3301      	adds	r3, #1
 80080fa:	d05f      	beq.n	80081bc <pow+0xe4>
 80080fc:	4622      	mov	r2, r4
 80080fe:	462b      	mov	r3, r5
 8008100:	4620      	mov	r0, r4
 8008102:	4629      	mov	r1, r5
 8008104:	f7f8 fc82 	bl	8000a0c <__aeabi_dcmpun>
 8008108:	4682      	mov	sl, r0
 800810a:	2800      	cmp	r0, #0
 800810c:	d156      	bne.n	80081bc <pow+0xe4>
 800810e:	4642      	mov	r2, r8
 8008110:	464b      	mov	r3, r9
 8008112:	4640      	mov	r0, r8
 8008114:	4649      	mov	r1, r9
 8008116:	f7f8 fc79 	bl	8000a0c <__aeabi_dcmpun>
 800811a:	9003      	str	r0, [sp, #12]
 800811c:	b1e8      	cbz	r0, 800815a <pow+0x82>
 800811e:	2200      	movs	r2, #0
 8008120:	2300      	movs	r3, #0
 8008122:	4620      	mov	r0, r4
 8008124:	4629      	mov	r1, r5
 8008126:	f7f8 fc3f 	bl	80009a8 <__aeabi_dcmpeq>
 800812a:	2800      	cmp	r0, #0
 800812c:	d046      	beq.n	80081bc <pow+0xe4>
 800812e:	2301      	movs	r3, #1
 8008130:	2200      	movs	r2, #0
 8008132:	9304      	str	r3, [sp, #16]
 8008134:	4b8f      	ldr	r3, [pc, #572]	; (8008374 <pow+0x29c>)
 8008136:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800813a:	9305      	str	r3, [sp, #20]
 800813c:	4b8e      	ldr	r3, [pc, #568]	; (8008378 <pow+0x2a0>)
 800813e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008142:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008146:	9b02      	ldr	r3, [sp, #8]
 8008148:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800814c:	2b02      	cmp	r3, #2
 800814e:	d031      	beq.n	80081b4 <pow+0xdc>
 8008150:	a804      	add	r0, sp, #16
 8008152:	f000 ff2d 	bl	8008fb0 <matherr>
 8008156:	bb38      	cbnz	r0, 80081a8 <pow+0xd0>
 8008158:	e058      	b.n	800820c <pow+0x134>
 800815a:	f04f 0a00 	mov.w	sl, #0
 800815e:	f04f 0b00 	mov.w	fp, #0
 8008162:	4652      	mov	r2, sl
 8008164:	465b      	mov	r3, fp
 8008166:	4640      	mov	r0, r8
 8008168:	4649      	mov	r1, r9
 800816a:	f7f8 fc1d 	bl	80009a8 <__aeabi_dcmpeq>
 800816e:	2800      	cmp	r0, #0
 8008170:	d051      	beq.n	8008216 <pow+0x13e>
 8008172:	4652      	mov	r2, sl
 8008174:	465b      	mov	r3, fp
 8008176:	4620      	mov	r0, r4
 8008178:	4629      	mov	r1, r5
 800817a:	f7f8 fc15 	bl	80009a8 <__aeabi_dcmpeq>
 800817e:	4606      	mov	r6, r0
 8008180:	b308      	cbz	r0, 80081c6 <pow+0xee>
 8008182:	2301      	movs	r3, #1
 8008184:	9304      	str	r3, [sp, #16]
 8008186:	4b7b      	ldr	r3, [pc, #492]	; (8008374 <pow+0x29c>)
 8008188:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800818c:	9305      	str	r3, [sp, #20]
 800818e:	9b03      	ldr	r3, [sp, #12]
 8008190:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008194:	930c      	str	r3, [sp, #48]	; 0x30
 8008196:	9b02      	ldr	r3, [sp, #8]
 8008198:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800819c:	2b00      	cmp	r3, #0
 800819e:	d0d7      	beq.n	8008150 <pow+0x78>
 80081a0:	2200      	movs	r2, #0
 80081a2:	4b75      	ldr	r3, [pc, #468]	; (8008378 <pow+0x2a0>)
 80081a4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80081a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081aa:	b11b      	cbz	r3, 80081b4 <pow+0xdc>
 80081ac:	f7fe f874 	bl	8006298 <__errno>
 80081b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081b2:	6003      	str	r3, [r0, #0]
 80081b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80081b8:	e9cd 3400 	strd	r3, r4, [sp]
 80081bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081c0:	b00f      	add	sp, #60	; 0x3c
 80081c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c6:	4620      	mov	r0, r4
 80081c8:	4629      	mov	r1, r5
 80081ca:	f000 feeb 	bl	8008fa4 <finite>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	d0f4      	beq.n	80081bc <pow+0xe4>
 80081d2:	4652      	mov	r2, sl
 80081d4:	465b      	mov	r3, fp
 80081d6:	4620      	mov	r0, r4
 80081d8:	4629      	mov	r1, r5
 80081da:	f7f8 fbef 	bl	80009bc <__aeabi_dcmplt>
 80081de:	2800      	cmp	r0, #0
 80081e0:	d0ec      	beq.n	80081bc <pow+0xe4>
 80081e2:	2301      	movs	r3, #1
 80081e4:	9304      	str	r3, [sp, #16]
 80081e6:	4b63      	ldr	r3, [pc, #396]	; (8008374 <pow+0x29c>)
 80081e8:	960c      	str	r6, [sp, #48]	; 0x30
 80081ea:	9305      	str	r3, [sp, #20]
 80081ec:	f997 3000 	ldrsb.w	r3, [r7]
 80081f0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80081f4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80081f8:	b913      	cbnz	r3, 8008200 <pow+0x128>
 80081fa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80081fe:	e7a7      	b.n	8008150 <pow+0x78>
 8008200:	2000      	movs	r0, #0
 8008202:	495e      	ldr	r1, [pc, #376]	; (800837c <pow+0x2a4>)
 8008204:	2b02      	cmp	r3, #2
 8008206:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800820a:	d1a1      	bne.n	8008150 <pow+0x78>
 800820c:	f7fe f844 	bl	8006298 <__errno>
 8008210:	2321      	movs	r3, #33	; 0x21
 8008212:	6003      	str	r3, [r0, #0]
 8008214:	e7c8      	b.n	80081a8 <pow+0xd0>
 8008216:	e9dd 0100 	ldrd	r0, r1, [sp]
 800821a:	f000 fec3 	bl	8008fa4 <finite>
 800821e:	9002      	str	r0, [sp, #8]
 8008220:	2800      	cmp	r0, #0
 8008222:	d177      	bne.n	8008314 <pow+0x23c>
 8008224:	4640      	mov	r0, r8
 8008226:	4649      	mov	r1, r9
 8008228:	f000 febc 	bl	8008fa4 <finite>
 800822c:	2800      	cmp	r0, #0
 800822e:	d071      	beq.n	8008314 <pow+0x23c>
 8008230:	4620      	mov	r0, r4
 8008232:	4629      	mov	r1, r5
 8008234:	f000 feb6 	bl	8008fa4 <finite>
 8008238:	2800      	cmp	r0, #0
 800823a:	d06b      	beq.n	8008314 <pow+0x23c>
 800823c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008240:	4619      	mov	r1, r3
 8008242:	4610      	mov	r0, r2
 8008244:	f7f8 fbe2 	bl	8000a0c <__aeabi_dcmpun>
 8008248:	f997 7000 	ldrsb.w	r7, [r7]
 800824c:	4b49      	ldr	r3, [pc, #292]	; (8008374 <pow+0x29c>)
 800824e:	b1a0      	cbz	r0, 800827a <pow+0x1a2>
 8008250:	2201      	movs	r2, #1
 8008252:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008256:	9b02      	ldr	r3, [sp, #8]
 8008258:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800825c:	930c      	str	r3, [sp, #48]	; 0x30
 800825e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008262:	2f00      	cmp	r7, #0
 8008264:	d0c9      	beq.n	80081fa <pow+0x122>
 8008266:	4652      	mov	r2, sl
 8008268:	465b      	mov	r3, fp
 800826a:	4650      	mov	r0, sl
 800826c:	4659      	mov	r1, fp
 800826e:	f7f8 fa5d 	bl	800072c <__aeabi_ddiv>
 8008272:	2f02      	cmp	r7, #2
 8008274:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008278:	e7c7      	b.n	800820a <pow+0x132>
 800827a:	2203      	movs	r2, #3
 800827c:	900c      	str	r0, [sp, #48]	; 0x30
 800827e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008282:	4620      	mov	r0, r4
 8008284:	4629      	mov	r1, r5
 8008286:	2200      	movs	r2, #0
 8008288:	4b3d      	ldr	r3, [pc, #244]	; (8008380 <pow+0x2a8>)
 800828a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800828e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008292:	f7f8 f921 	bl	80004d8 <__aeabi_dmul>
 8008296:	4604      	mov	r4, r0
 8008298:	460d      	mov	r5, r1
 800829a:	bb17      	cbnz	r7, 80082e2 <pow+0x20a>
 800829c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80082a0:	4b38      	ldr	r3, [pc, #224]	; (8008384 <pow+0x2ac>)
 80082a2:	4640      	mov	r0, r8
 80082a4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80082a8:	4649      	mov	r1, r9
 80082aa:	4652      	mov	r2, sl
 80082ac:	465b      	mov	r3, fp
 80082ae:	f7f8 fb85 	bl	80009bc <__aeabi_dcmplt>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d054      	beq.n	8008360 <pow+0x288>
 80082b6:	4620      	mov	r0, r4
 80082b8:	4629      	mov	r1, r5
 80082ba:	f000 fe81 	bl	8008fc0 <rint>
 80082be:	4622      	mov	r2, r4
 80082c0:	462b      	mov	r3, r5
 80082c2:	f7f8 fb71 	bl	80009a8 <__aeabi_dcmpeq>
 80082c6:	b920      	cbnz	r0, 80082d2 <pow+0x1fa>
 80082c8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80082cc:	4b2e      	ldr	r3, [pc, #184]	; (8008388 <pow+0x2b0>)
 80082ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80082d2:	f996 3000 	ldrsb.w	r3, [r6]
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d142      	bne.n	8008360 <pow+0x288>
 80082da:	f7fd ffdd 	bl	8006298 <__errno>
 80082de:	2322      	movs	r3, #34	; 0x22
 80082e0:	e797      	b.n	8008212 <pow+0x13a>
 80082e2:	2200      	movs	r2, #0
 80082e4:	4b29      	ldr	r3, [pc, #164]	; (800838c <pow+0x2b4>)
 80082e6:	4640      	mov	r0, r8
 80082e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80082ec:	4649      	mov	r1, r9
 80082ee:	4652      	mov	r2, sl
 80082f0:	465b      	mov	r3, fp
 80082f2:	f7f8 fb63 	bl	80009bc <__aeabi_dcmplt>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d0eb      	beq.n	80082d2 <pow+0x1fa>
 80082fa:	4620      	mov	r0, r4
 80082fc:	4629      	mov	r1, r5
 80082fe:	f000 fe5f 	bl	8008fc0 <rint>
 8008302:	4622      	mov	r2, r4
 8008304:	462b      	mov	r3, r5
 8008306:	f7f8 fb4f 	bl	80009a8 <__aeabi_dcmpeq>
 800830a:	2800      	cmp	r0, #0
 800830c:	d1e1      	bne.n	80082d2 <pow+0x1fa>
 800830e:	2200      	movs	r2, #0
 8008310:	4b1a      	ldr	r3, [pc, #104]	; (800837c <pow+0x2a4>)
 8008312:	e7dc      	b.n	80082ce <pow+0x1f6>
 8008314:	2200      	movs	r2, #0
 8008316:	e9dd 0100 	ldrd	r0, r1, [sp]
 800831a:	2300      	movs	r3, #0
 800831c:	f7f8 fb44 	bl	80009a8 <__aeabi_dcmpeq>
 8008320:	2800      	cmp	r0, #0
 8008322:	f43f af4b 	beq.w	80081bc <pow+0xe4>
 8008326:	4640      	mov	r0, r8
 8008328:	4649      	mov	r1, r9
 800832a:	f000 fe3b 	bl	8008fa4 <finite>
 800832e:	2800      	cmp	r0, #0
 8008330:	f43f af44 	beq.w	80081bc <pow+0xe4>
 8008334:	4620      	mov	r0, r4
 8008336:	4629      	mov	r1, r5
 8008338:	f000 fe34 	bl	8008fa4 <finite>
 800833c:	2800      	cmp	r0, #0
 800833e:	f43f af3d 	beq.w	80081bc <pow+0xe4>
 8008342:	2304      	movs	r3, #4
 8008344:	9304      	str	r3, [sp, #16]
 8008346:	4b0b      	ldr	r3, [pc, #44]	; (8008374 <pow+0x29c>)
 8008348:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800834c:	9305      	str	r3, [sp, #20]
 800834e:	2300      	movs	r3, #0
 8008350:	2400      	movs	r4, #0
 8008352:	930c      	str	r3, [sp, #48]	; 0x30
 8008354:	2300      	movs	r3, #0
 8008356:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800835a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800835e:	e7b8      	b.n	80082d2 <pow+0x1fa>
 8008360:	a804      	add	r0, sp, #16
 8008362:	f000 fe25 	bl	8008fb0 <matherr>
 8008366:	2800      	cmp	r0, #0
 8008368:	f47f af1e 	bne.w	80081a8 <pow+0xd0>
 800836c:	e7b5      	b.n	80082da <pow+0x202>
 800836e:	bf00      	nop
 8008370:	200001dc 	.word	0x200001dc
 8008374:	08009478 	.word	0x08009478
 8008378:	3ff00000 	.word	0x3ff00000
 800837c:	fff00000 	.word	0xfff00000
 8008380:	3fe00000 	.word	0x3fe00000
 8008384:	47efffff 	.word	0x47efffff
 8008388:	c7efffff 	.word	0xc7efffff
 800838c:	7ff00000 	.word	0x7ff00000

08008390 <sqrt>:
 8008390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008394:	b08b      	sub	sp, #44	; 0x2c
 8008396:	4604      	mov	r4, r0
 8008398:	460d      	mov	r5, r1
 800839a:	f000 fd57 	bl	8008e4c <__ieee754_sqrt>
 800839e:	4b24      	ldr	r3, [pc, #144]	; (8008430 <sqrt+0xa0>)
 80083a0:	4680      	mov	r8, r0
 80083a2:	f993 a000 	ldrsb.w	sl, [r3]
 80083a6:	4689      	mov	r9, r1
 80083a8:	f1ba 3fff 	cmp.w	sl, #4294967295
 80083ac:	d02b      	beq.n	8008406 <sqrt+0x76>
 80083ae:	4622      	mov	r2, r4
 80083b0:	462b      	mov	r3, r5
 80083b2:	4620      	mov	r0, r4
 80083b4:	4629      	mov	r1, r5
 80083b6:	f7f8 fb29 	bl	8000a0c <__aeabi_dcmpun>
 80083ba:	4683      	mov	fp, r0
 80083bc:	bb18      	cbnz	r0, 8008406 <sqrt+0x76>
 80083be:	2600      	movs	r6, #0
 80083c0:	2700      	movs	r7, #0
 80083c2:	4632      	mov	r2, r6
 80083c4:	463b      	mov	r3, r7
 80083c6:	4620      	mov	r0, r4
 80083c8:	4629      	mov	r1, r5
 80083ca:	f7f8 faf7 	bl	80009bc <__aeabi_dcmplt>
 80083ce:	b1d0      	cbz	r0, 8008406 <sqrt+0x76>
 80083d0:	2301      	movs	r3, #1
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	4b17      	ldr	r3, [pc, #92]	; (8008434 <sqrt+0xa4>)
 80083d6:	f8cd b020 	str.w	fp, [sp, #32]
 80083da:	9301      	str	r3, [sp, #4]
 80083dc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80083e0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80083e4:	f1ba 0f00 	cmp.w	sl, #0
 80083e8:	d112      	bne.n	8008410 <sqrt+0x80>
 80083ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80083ee:	4668      	mov	r0, sp
 80083f0:	f000 fdde 	bl	8008fb0 <matherr>
 80083f4:	b1b8      	cbz	r0, 8008426 <sqrt+0x96>
 80083f6:	9b08      	ldr	r3, [sp, #32]
 80083f8:	b11b      	cbz	r3, 8008402 <sqrt+0x72>
 80083fa:	f7fd ff4d 	bl	8006298 <__errno>
 80083fe:	9b08      	ldr	r3, [sp, #32]
 8008400:	6003      	str	r3, [r0, #0]
 8008402:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8008406:	4640      	mov	r0, r8
 8008408:	4649      	mov	r1, r9
 800840a:	b00b      	add	sp, #44	; 0x2c
 800840c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008410:	4632      	mov	r2, r6
 8008412:	463b      	mov	r3, r7
 8008414:	4630      	mov	r0, r6
 8008416:	4639      	mov	r1, r7
 8008418:	f7f8 f988 	bl	800072c <__aeabi_ddiv>
 800841c:	f1ba 0f02 	cmp.w	sl, #2
 8008420:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008424:	d1e3      	bne.n	80083ee <sqrt+0x5e>
 8008426:	f7fd ff37 	bl	8006298 <__errno>
 800842a:	2321      	movs	r3, #33	; 0x21
 800842c:	6003      	str	r3, [r0, #0]
 800842e:	e7e2      	b.n	80083f6 <sqrt+0x66>
 8008430:	200001dc 	.word	0x200001dc
 8008434:	0800947c 	.word	0x0800947c

08008438 <__ieee754_pow>:
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	b091      	sub	sp, #68	; 0x44
 800843e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008442:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8008446:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800844a:	ea55 0302 	orrs.w	r3, r5, r2
 800844e:	4607      	mov	r7, r0
 8008450:	4688      	mov	r8, r1
 8008452:	f000 84b7 	beq.w	8008dc4 <__ieee754_pow+0x98c>
 8008456:	4b80      	ldr	r3, [pc, #512]	; (8008658 <__ieee754_pow+0x220>)
 8008458:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800845c:	429c      	cmp	r4, r3
 800845e:	4689      	mov	r9, r1
 8008460:	4682      	mov	sl, r0
 8008462:	dc09      	bgt.n	8008478 <__ieee754_pow+0x40>
 8008464:	d103      	bne.n	800846e <__ieee754_pow+0x36>
 8008466:	b938      	cbnz	r0, 8008478 <__ieee754_pow+0x40>
 8008468:	42a5      	cmp	r5, r4
 800846a:	dc0d      	bgt.n	8008488 <__ieee754_pow+0x50>
 800846c:	e001      	b.n	8008472 <__ieee754_pow+0x3a>
 800846e:	429d      	cmp	r5, r3
 8008470:	dc02      	bgt.n	8008478 <__ieee754_pow+0x40>
 8008472:	429d      	cmp	r5, r3
 8008474:	d10e      	bne.n	8008494 <__ieee754_pow+0x5c>
 8008476:	b16a      	cbz	r2, 8008494 <__ieee754_pow+0x5c>
 8008478:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800847c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008480:	ea54 030a 	orrs.w	r3, r4, sl
 8008484:	f000 849e 	beq.w	8008dc4 <__ieee754_pow+0x98c>
 8008488:	4874      	ldr	r0, [pc, #464]	; (800865c <__ieee754_pow+0x224>)
 800848a:	b011      	add	sp, #68	; 0x44
 800848c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008490:	f000 bd90 	b.w	8008fb4 <nan>
 8008494:	f1b9 0f00 	cmp.w	r9, #0
 8008498:	da53      	bge.n	8008542 <__ieee754_pow+0x10a>
 800849a:	4b71      	ldr	r3, [pc, #452]	; (8008660 <__ieee754_pow+0x228>)
 800849c:	429d      	cmp	r5, r3
 800849e:	dc4e      	bgt.n	800853e <__ieee754_pow+0x106>
 80084a0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80084a4:	429d      	cmp	r5, r3
 80084a6:	dd4c      	ble.n	8008542 <__ieee754_pow+0x10a>
 80084a8:	152b      	asrs	r3, r5, #20
 80084aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80084ae:	2b14      	cmp	r3, #20
 80084b0:	dd28      	ble.n	8008504 <__ieee754_pow+0xcc>
 80084b2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80084b6:	fa22 f103 	lsr.w	r1, r2, r3
 80084ba:	fa01 f303 	lsl.w	r3, r1, r3
 80084be:	4293      	cmp	r3, r2
 80084c0:	d13f      	bne.n	8008542 <__ieee754_pow+0x10a>
 80084c2:	f001 0101 	and.w	r1, r1, #1
 80084c6:	f1c1 0302 	rsb	r3, r1, #2
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	2a00      	cmp	r2, #0
 80084ce:	d15c      	bne.n	800858a <__ieee754_pow+0x152>
 80084d0:	4b61      	ldr	r3, [pc, #388]	; (8008658 <__ieee754_pow+0x220>)
 80084d2:	429d      	cmp	r5, r3
 80084d4:	d126      	bne.n	8008524 <__ieee754_pow+0xec>
 80084d6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80084da:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80084de:	ea53 030a 	orrs.w	r3, r3, sl
 80084e2:	f000 846f 	beq.w	8008dc4 <__ieee754_pow+0x98c>
 80084e6:	4b5f      	ldr	r3, [pc, #380]	; (8008664 <__ieee754_pow+0x22c>)
 80084e8:	429c      	cmp	r4, r3
 80084ea:	dd2c      	ble.n	8008546 <__ieee754_pow+0x10e>
 80084ec:	2e00      	cmp	r6, #0
 80084ee:	f280 846f 	bge.w	8008dd0 <__ieee754_pow+0x998>
 80084f2:	f04f 0b00 	mov.w	fp, #0
 80084f6:	f04f 0c00 	mov.w	ip, #0
 80084fa:	4658      	mov	r0, fp
 80084fc:	4661      	mov	r1, ip
 80084fe:	b011      	add	sp, #68	; 0x44
 8008500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008504:	2a00      	cmp	r2, #0
 8008506:	d13e      	bne.n	8008586 <__ieee754_pow+0x14e>
 8008508:	f1c3 0314 	rsb	r3, r3, #20
 800850c:	fa45 f103 	asr.w	r1, r5, r3
 8008510:	fa01 f303 	lsl.w	r3, r1, r3
 8008514:	42ab      	cmp	r3, r5
 8008516:	f040 8463 	bne.w	8008de0 <__ieee754_pow+0x9a8>
 800851a:	f001 0101 	and.w	r1, r1, #1
 800851e:	f1c1 0302 	rsb	r3, r1, #2
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	4b50      	ldr	r3, [pc, #320]	; (8008668 <__ieee754_pow+0x230>)
 8008526:	429d      	cmp	r5, r3
 8008528:	d114      	bne.n	8008554 <__ieee754_pow+0x11c>
 800852a:	2e00      	cmp	r6, #0
 800852c:	f280 8454 	bge.w	8008dd8 <__ieee754_pow+0x9a0>
 8008530:	463a      	mov	r2, r7
 8008532:	4643      	mov	r3, r8
 8008534:	2000      	movs	r0, #0
 8008536:	494c      	ldr	r1, [pc, #304]	; (8008668 <__ieee754_pow+0x230>)
 8008538:	f7f8 f8f8 	bl	800072c <__aeabi_ddiv>
 800853c:	e013      	b.n	8008566 <__ieee754_pow+0x12e>
 800853e:	2302      	movs	r3, #2
 8008540:	e7c3      	b.n	80084ca <__ieee754_pow+0x92>
 8008542:	2300      	movs	r3, #0
 8008544:	e7c1      	b.n	80084ca <__ieee754_pow+0x92>
 8008546:	2e00      	cmp	r6, #0
 8008548:	dad3      	bge.n	80084f2 <__ieee754_pow+0xba>
 800854a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800854e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8008552:	e7d2      	b.n	80084fa <__ieee754_pow+0xc2>
 8008554:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8008558:	d108      	bne.n	800856c <__ieee754_pow+0x134>
 800855a:	463a      	mov	r2, r7
 800855c:	4643      	mov	r3, r8
 800855e:	4638      	mov	r0, r7
 8008560:	4641      	mov	r1, r8
 8008562:	f7f7 ffb9 	bl	80004d8 <__aeabi_dmul>
 8008566:	4683      	mov	fp, r0
 8008568:	468c      	mov	ip, r1
 800856a:	e7c6      	b.n	80084fa <__ieee754_pow+0xc2>
 800856c:	4b3f      	ldr	r3, [pc, #252]	; (800866c <__ieee754_pow+0x234>)
 800856e:	429e      	cmp	r6, r3
 8008570:	d10b      	bne.n	800858a <__ieee754_pow+0x152>
 8008572:	f1b9 0f00 	cmp.w	r9, #0
 8008576:	db08      	blt.n	800858a <__ieee754_pow+0x152>
 8008578:	4638      	mov	r0, r7
 800857a:	4641      	mov	r1, r8
 800857c:	b011      	add	sp, #68	; 0x44
 800857e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008582:	f000 bc63 	b.w	8008e4c <__ieee754_sqrt>
 8008586:	2300      	movs	r3, #0
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	4638      	mov	r0, r7
 800858c:	4641      	mov	r1, r8
 800858e:	f7ff fd59 	bl	8008044 <fabs>
 8008592:	4683      	mov	fp, r0
 8008594:	468c      	mov	ip, r1
 8008596:	f1ba 0f00 	cmp.w	sl, #0
 800859a:	d12b      	bne.n	80085f4 <__ieee754_pow+0x1bc>
 800859c:	b124      	cbz	r4, 80085a8 <__ieee754_pow+0x170>
 800859e:	4b32      	ldr	r3, [pc, #200]	; (8008668 <__ieee754_pow+0x230>)
 80085a0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d125      	bne.n	80085f4 <__ieee754_pow+0x1bc>
 80085a8:	2e00      	cmp	r6, #0
 80085aa:	da07      	bge.n	80085bc <__ieee754_pow+0x184>
 80085ac:	465a      	mov	r2, fp
 80085ae:	4663      	mov	r3, ip
 80085b0:	2000      	movs	r0, #0
 80085b2:	492d      	ldr	r1, [pc, #180]	; (8008668 <__ieee754_pow+0x230>)
 80085b4:	f7f8 f8ba 	bl	800072c <__aeabi_ddiv>
 80085b8:	4683      	mov	fp, r0
 80085ba:	468c      	mov	ip, r1
 80085bc:	f1b9 0f00 	cmp.w	r9, #0
 80085c0:	da9b      	bge.n	80084fa <__ieee754_pow+0xc2>
 80085c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80085c6:	9b00      	ldr	r3, [sp, #0]
 80085c8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80085cc:	4323      	orrs	r3, r4
 80085ce:	d108      	bne.n	80085e2 <__ieee754_pow+0x1aa>
 80085d0:	465a      	mov	r2, fp
 80085d2:	4663      	mov	r3, ip
 80085d4:	4658      	mov	r0, fp
 80085d6:	4661      	mov	r1, ip
 80085d8:	f7f7 fdc6 	bl	8000168 <__aeabi_dsub>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	e7aa      	b.n	8008538 <__ieee754_pow+0x100>
 80085e2:	9b00      	ldr	r3, [sp, #0]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d188      	bne.n	80084fa <__ieee754_pow+0xc2>
 80085e8:	4658      	mov	r0, fp
 80085ea:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80085ee:	4683      	mov	fp, r0
 80085f0:	469c      	mov	ip, r3
 80085f2:	e782      	b.n	80084fa <__ieee754_pow+0xc2>
 80085f4:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 80085f8:	f109 33ff 	add.w	r3, r9, #4294967295
 80085fc:	930d      	str	r3, [sp, #52]	; 0x34
 80085fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008600:	9b00      	ldr	r3, [sp, #0]
 8008602:	4313      	orrs	r3, r2
 8008604:	d104      	bne.n	8008610 <__ieee754_pow+0x1d8>
 8008606:	463a      	mov	r2, r7
 8008608:	4643      	mov	r3, r8
 800860a:	4638      	mov	r0, r7
 800860c:	4641      	mov	r1, r8
 800860e:	e7e3      	b.n	80085d8 <__ieee754_pow+0x1a0>
 8008610:	4b17      	ldr	r3, [pc, #92]	; (8008670 <__ieee754_pow+0x238>)
 8008612:	429d      	cmp	r5, r3
 8008614:	f340 80fe 	ble.w	8008814 <__ieee754_pow+0x3dc>
 8008618:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800861c:	429d      	cmp	r5, r3
 800861e:	dd0b      	ble.n	8008638 <__ieee754_pow+0x200>
 8008620:	4b10      	ldr	r3, [pc, #64]	; (8008664 <__ieee754_pow+0x22c>)
 8008622:	429c      	cmp	r4, r3
 8008624:	dc0e      	bgt.n	8008644 <__ieee754_pow+0x20c>
 8008626:	2e00      	cmp	r6, #0
 8008628:	f6bf af63 	bge.w	80084f2 <__ieee754_pow+0xba>
 800862c:	a308      	add	r3, pc, #32	; (adr r3, 8008650 <__ieee754_pow+0x218>)
 800862e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008632:	4610      	mov	r0, r2
 8008634:	4619      	mov	r1, r3
 8008636:	e794      	b.n	8008562 <__ieee754_pow+0x12a>
 8008638:	4b0e      	ldr	r3, [pc, #56]	; (8008674 <__ieee754_pow+0x23c>)
 800863a:	429c      	cmp	r4, r3
 800863c:	ddf3      	ble.n	8008626 <__ieee754_pow+0x1ee>
 800863e:	4b0a      	ldr	r3, [pc, #40]	; (8008668 <__ieee754_pow+0x230>)
 8008640:	429c      	cmp	r4, r3
 8008642:	dd19      	ble.n	8008678 <__ieee754_pow+0x240>
 8008644:	2e00      	cmp	r6, #0
 8008646:	dcf1      	bgt.n	800862c <__ieee754_pow+0x1f4>
 8008648:	e753      	b.n	80084f2 <__ieee754_pow+0xba>
 800864a:	bf00      	nop
 800864c:	f3af 8000 	nop.w
 8008650:	8800759c 	.word	0x8800759c
 8008654:	7e37e43c 	.word	0x7e37e43c
 8008658:	7ff00000 	.word	0x7ff00000
 800865c:	08009335 	.word	0x08009335
 8008660:	433fffff 	.word	0x433fffff
 8008664:	3fefffff 	.word	0x3fefffff
 8008668:	3ff00000 	.word	0x3ff00000
 800866c:	3fe00000 	.word	0x3fe00000
 8008670:	41e00000 	.word	0x41e00000
 8008674:	3feffffe 	.word	0x3feffffe
 8008678:	4661      	mov	r1, ip
 800867a:	2200      	movs	r2, #0
 800867c:	4b60      	ldr	r3, [pc, #384]	; (8008800 <__ieee754_pow+0x3c8>)
 800867e:	4658      	mov	r0, fp
 8008680:	f7f7 fd72 	bl	8000168 <__aeabi_dsub>
 8008684:	a354      	add	r3, pc, #336	; (adr r3, 80087d8 <__ieee754_pow+0x3a0>)
 8008686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868a:	4604      	mov	r4, r0
 800868c:	460d      	mov	r5, r1
 800868e:	f7f7 ff23 	bl	80004d8 <__aeabi_dmul>
 8008692:	a353      	add	r3, pc, #332	; (adr r3, 80087e0 <__ieee754_pow+0x3a8>)
 8008694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008698:	4606      	mov	r6, r0
 800869a:	460f      	mov	r7, r1
 800869c:	4620      	mov	r0, r4
 800869e:	4629      	mov	r1, r5
 80086a0:	f7f7 ff1a 	bl	80004d8 <__aeabi_dmul>
 80086a4:	2200      	movs	r2, #0
 80086a6:	4682      	mov	sl, r0
 80086a8:	468b      	mov	fp, r1
 80086aa:	4b56      	ldr	r3, [pc, #344]	; (8008804 <__ieee754_pow+0x3cc>)
 80086ac:	4620      	mov	r0, r4
 80086ae:	4629      	mov	r1, r5
 80086b0:	f7f7 ff12 	bl	80004d8 <__aeabi_dmul>
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	a14b      	add	r1, pc, #300	; (adr r1, 80087e8 <__ieee754_pow+0x3b0>)
 80086ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086be:	f7f7 fd53 	bl	8000168 <__aeabi_dsub>
 80086c2:	4622      	mov	r2, r4
 80086c4:	462b      	mov	r3, r5
 80086c6:	f7f7 ff07 	bl	80004d8 <__aeabi_dmul>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	2000      	movs	r0, #0
 80086d0:	494d      	ldr	r1, [pc, #308]	; (8008808 <__ieee754_pow+0x3d0>)
 80086d2:	f7f7 fd49 	bl	8000168 <__aeabi_dsub>
 80086d6:	4622      	mov	r2, r4
 80086d8:	462b      	mov	r3, r5
 80086da:	4680      	mov	r8, r0
 80086dc:	4689      	mov	r9, r1
 80086de:	4620      	mov	r0, r4
 80086e0:	4629      	mov	r1, r5
 80086e2:	f7f7 fef9 	bl	80004d8 <__aeabi_dmul>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	4640      	mov	r0, r8
 80086ec:	4649      	mov	r1, r9
 80086ee:	f7f7 fef3 	bl	80004d8 <__aeabi_dmul>
 80086f2:	a33f      	add	r3, pc, #252	; (adr r3, 80087f0 <__ieee754_pow+0x3b8>)
 80086f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f8:	f7f7 feee 	bl	80004d8 <__aeabi_dmul>
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
 8008700:	4650      	mov	r0, sl
 8008702:	4659      	mov	r1, fp
 8008704:	f7f7 fd30 	bl	8000168 <__aeabi_dsub>
 8008708:	4602      	mov	r2, r0
 800870a:	460b      	mov	r3, r1
 800870c:	4604      	mov	r4, r0
 800870e:	460d      	mov	r5, r1
 8008710:	4630      	mov	r0, r6
 8008712:	4639      	mov	r1, r7
 8008714:	f7f7 fd2a 	bl	800016c <__adddf3>
 8008718:	2000      	movs	r0, #0
 800871a:	468b      	mov	fp, r1
 800871c:	4682      	mov	sl, r0
 800871e:	4632      	mov	r2, r6
 8008720:	463b      	mov	r3, r7
 8008722:	f7f7 fd21 	bl	8000168 <__aeabi_dsub>
 8008726:	4602      	mov	r2, r0
 8008728:	460b      	mov	r3, r1
 800872a:	4620      	mov	r0, r4
 800872c:	4629      	mov	r1, r5
 800872e:	f7f7 fd1b 	bl	8000168 <__aeabi_dsub>
 8008732:	9b00      	ldr	r3, [sp, #0]
 8008734:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008736:	3b01      	subs	r3, #1
 8008738:	4313      	orrs	r3, r2
 800873a:	f04f 0300 	mov.w	r3, #0
 800873e:	bf0c      	ite	eq
 8008740:	4c32      	ldreq	r4, [pc, #200]	; (800880c <__ieee754_pow+0x3d4>)
 8008742:	4c2f      	ldrne	r4, [pc, #188]	; (8008800 <__ieee754_pow+0x3c8>)
 8008744:	4606      	mov	r6, r0
 8008746:	e9cd 3400 	strd	r3, r4, [sp]
 800874a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800874e:	2400      	movs	r4, #0
 8008750:	460f      	mov	r7, r1
 8008752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008756:	4622      	mov	r2, r4
 8008758:	462b      	mov	r3, r5
 800875a:	f7f7 fd05 	bl	8000168 <__aeabi_dsub>
 800875e:	4652      	mov	r2, sl
 8008760:	465b      	mov	r3, fp
 8008762:	f7f7 feb9 	bl	80004d8 <__aeabi_dmul>
 8008766:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800876a:	4680      	mov	r8, r0
 800876c:	4689      	mov	r9, r1
 800876e:	4630      	mov	r0, r6
 8008770:	4639      	mov	r1, r7
 8008772:	f7f7 feb1 	bl	80004d8 <__aeabi_dmul>
 8008776:	4602      	mov	r2, r0
 8008778:	460b      	mov	r3, r1
 800877a:	4640      	mov	r0, r8
 800877c:	4649      	mov	r1, r9
 800877e:	f7f7 fcf5 	bl	800016c <__adddf3>
 8008782:	4622      	mov	r2, r4
 8008784:	462b      	mov	r3, r5
 8008786:	4680      	mov	r8, r0
 8008788:	4689      	mov	r9, r1
 800878a:	4650      	mov	r0, sl
 800878c:	4659      	mov	r1, fp
 800878e:	f7f7 fea3 	bl	80004d8 <__aeabi_dmul>
 8008792:	4604      	mov	r4, r0
 8008794:	460d      	mov	r5, r1
 8008796:	460b      	mov	r3, r1
 8008798:	4602      	mov	r2, r0
 800879a:	4649      	mov	r1, r9
 800879c:	4640      	mov	r0, r8
 800879e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80087a2:	f7f7 fce3 	bl	800016c <__adddf3>
 80087a6:	4b1a      	ldr	r3, [pc, #104]	; (8008810 <__ieee754_pow+0x3d8>)
 80087a8:	4682      	mov	sl, r0
 80087aa:	4299      	cmp	r1, r3
 80087ac:	460f      	mov	r7, r1
 80087ae:	460e      	mov	r6, r1
 80087b0:	f340 82e1 	ble.w	8008d76 <__ieee754_pow+0x93e>
 80087b4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80087b8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80087bc:	4303      	orrs	r3, r0
 80087be:	f000 81db 	beq.w	8008b78 <__ieee754_pow+0x740>
 80087c2:	a30d      	add	r3, pc, #52	; (adr r3, 80087f8 <__ieee754_pow+0x3c0>)
 80087c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087cc:	f7f7 fe84 	bl	80004d8 <__aeabi_dmul>
 80087d0:	a309      	add	r3, pc, #36	; (adr r3, 80087f8 <__ieee754_pow+0x3c0>)
 80087d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d6:	e6c4      	b.n	8008562 <__ieee754_pow+0x12a>
 80087d8:	60000000 	.word	0x60000000
 80087dc:	3ff71547 	.word	0x3ff71547
 80087e0:	f85ddf44 	.word	0xf85ddf44
 80087e4:	3e54ae0b 	.word	0x3e54ae0b
 80087e8:	55555555 	.word	0x55555555
 80087ec:	3fd55555 	.word	0x3fd55555
 80087f0:	652b82fe 	.word	0x652b82fe
 80087f4:	3ff71547 	.word	0x3ff71547
 80087f8:	8800759c 	.word	0x8800759c
 80087fc:	7e37e43c 	.word	0x7e37e43c
 8008800:	3ff00000 	.word	0x3ff00000
 8008804:	3fd00000 	.word	0x3fd00000
 8008808:	3fe00000 	.word	0x3fe00000
 800880c:	bff00000 	.word	0xbff00000
 8008810:	408fffff 	.word	0x408fffff
 8008814:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008818:	f04f 0200 	mov.w	r2, #0
 800881c:	da08      	bge.n	8008830 <__ieee754_pow+0x3f8>
 800881e:	4658      	mov	r0, fp
 8008820:	4bcd      	ldr	r3, [pc, #820]	; (8008b58 <__ieee754_pow+0x720>)
 8008822:	4661      	mov	r1, ip
 8008824:	f7f7 fe58 	bl	80004d8 <__aeabi_dmul>
 8008828:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800882c:	4683      	mov	fp, r0
 800882e:	460c      	mov	r4, r1
 8008830:	1523      	asrs	r3, r4, #20
 8008832:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008836:	4413      	add	r3, r2
 8008838:	930c      	str	r3, [sp, #48]	; 0x30
 800883a:	4bc8      	ldr	r3, [pc, #800]	; (8008b5c <__ieee754_pow+0x724>)
 800883c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008840:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008844:	429c      	cmp	r4, r3
 8008846:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800884a:	dd08      	ble.n	800885e <__ieee754_pow+0x426>
 800884c:	4bc4      	ldr	r3, [pc, #784]	; (8008b60 <__ieee754_pow+0x728>)
 800884e:	429c      	cmp	r4, r3
 8008850:	f340 815b 	ble.w	8008b0a <__ieee754_pow+0x6d2>
 8008854:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008856:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800885a:	3301      	adds	r3, #1
 800885c:	930c      	str	r3, [sp, #48]	; 0x30
 800885e:	f04f 0800 	mov.w	r8, #0
 8008862:	4658      	mov	r0, fp
 8008864:	4629      	mov	r1, r5
 8008866:	4bbf      	ldr	r3, [pc, #764]	; (8008b64 <__ieee754_pow+0x72c>)
 8008868:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800886c:	444b      	add	r3, r9
 800886e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008872:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008876:	461a      	mov	r2, r3
 8008878:	4623      	mov	r3, r4
 800887a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800887e:	f7f7 fc73 	bl	8000168 <__aeabi_dsub>
 8008882:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008886:	4606      	mov	r6, r0
 8008888:	460f      	mov	r7, r1
 800888a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800888e:	f7f7 fc6d 	bl	800016c <__adddf3>
 8008892:	4602      	mov	r2, r0
 8008894:	460b      	mov	r3, r1
 8008896:	2000      	movs	r0, #0
 8008898:	49b3      	ldr	r1, [pc, #716]	; (8008b68 <__ieee754_pow+0x730>)
 800889a:	f7f7 ff47 	bl	800072c <__aeabi_ddiv>
 800889e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80088a2:	4602      	mov	r2, r0
 80088a4:	460b      	mov	r3, r1
 80088a6:	4630      	mov	r0, r6
 80088a8:	4639      	mov	r1, r7
 80088aa:	f7f7 fe15 	bl	80004d8 <__aeabi_dmul>
 80088ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80088b2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80088b6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80088ba:	2300      	movs	r3, #0
 80088bc:	2200      	movs	r2, #0
 80088be:	106d      	asrs	r5, r5, #1
 80088c0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80088c4:	9304      	str	r3, [sp, #16]
 80088c6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80088ca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80088ce:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 80088d2:	4650      	mov	r0, sl
 80088d4:	4659      	mov	r1, fp
 80088d6:	4614      	mov	r4, r2
 80088d8:	461d      	mov	r5, r3
 80088da:	f7f7 fdfd 	bl	80004d8 <__aeabi_dmul>
 80088de:	4602      	mov	r2, r0
 80088e0:	460b      	mov	r3, r1
 80088e2:	4630      	mov	r0, r6
 80088e4:	4639      	mov	r1, r7
 80088e6:	f7f7 fc3f 	bl	8000168 <__aeabi_dsub>
 80088ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80088ee:	4606      	mov	r6, r0
 80088f0:	460f      	mov	r7, r1
 80088f2:	4620      	mov	r0, r4
 80088f4:	4629      	mov	r1, r5
 80088f6:	f7f7 fc37 	bl	8000168 <__aeabi_dsub>
 80088fa:	4602      	mov	r2, r0
 80088fc:	460b      	mov	r3, r1
 80088fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008902:	f7f7 fc31 	bl	8000168 <__aeabi_dsub>
 8008906:	4652      	mov	r2, sl
 8008908:	465b      	mov	r3, fp
 800890a:	f7f7 fde5 	bl	80004d8 <__aeabi_dmul>
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	4630      	mov	r0, r6
 8008914:	4639      	mov	r1, r7
 8008916:	f7f7 fc27 	bl	8000168 <__aeabi_dsub>
 800891a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800891e:	f7f7 fddb 	bl	80004d8 <__aeabi_dmul>
 8008922:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008926:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800892a:	4610      	mov	r0, r2
 800892c:	4619      	mov	r1, r3
 800892e:	f7f7 fdd3 	bl	80004d8 <__aeabi_dmul>
 8008932:	a377      	add	r3, pc, #476	; (adr r3, 8008b10 <__ieee754_pow+0x6d8>)
 8008934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008938:	4604      	mov	r4, r0
 800893a:	460d      	mov	r5, r1
 800893c:	f7f7 fdcc 	bl	80004d8 <__aeabi_dmul>
 8008940:	a375      	add	r3, pc, #468	; (adr r3, 8008b18 <__ieee754_pow+0x6e0>)
 8008942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008946:	f7f7 fc11 	bl	800016c <__adddf3>
 800894a:	4622      	mov	r2, r4
 800894c:	462b      	mov	r3, r5
 800894e:	f7f7 fdc3 	bl	80004d8 <__aeabi_dmul>
 8008952:	a373      	add	r3, pc, #460	; (adr r3, 8008b20 <__ieee754_pow+0x6e8>)
 8008954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008958:	f7f7 fc08 	bl	800016c <__adddf3>
 800895c:	4622      	mov	r2, r4
 800895e:	462b      	mov	r3, r5
 8008960:	f7f7 fdba 	bl	80004d8 <__aeabi_dmul>
 8008964:	a370      	add	r3, pc, #448	; (adr r3, 8008b28 <__ieee754_pow+0x6f0>)
 8008966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896a:	f7f7 fbff 	bl	800016c <__adddf3>
 800896e:	4622      	mov	r2, r4
 8008970:	462b      	mov	r3, r5
 8008972:	f7f7 fdb1 	bl	80004d8 <__aeabi_dmul>
 8008976:	a36e      	add	r3, pc, #440	; (adr r3, 8008b30 <__ieee754_pow+0x6f8>)
 8008978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897c:	f7f7 fbf6 	bl	800016c <__adddf3>
 8008980:	4622      	mov	r2, r4
 8008982:	462b      	mov	r3, r5
 8008984:	f7f7 fda8 	bl	80004d8 <__aeabi_dmul>
 8008988:	a36b      	add	r3, pc, #428	; (adr r3, 8008b38 <__ieee754_pow+0x700>)
 800898a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898e:	f7f7 fbed 	bl	800016c <__adddf3>
 8008992:	4622      	mov	r2, r4
 8008994:	4606      	mov	r6, r0
 8008996:	460f      	mov	r7, r1
 8008998:	462b      	mov	r3, r5
 800899a:	4620      	mov	r0, r4
 800899c:	4629      	mov	r1, r5
 800899e:	f7f7 fd9b 	bl	80004d8 <__aeabi_dmul>
 80089a2:	4602      	mov	r2, r0
 80089a4:	460b      	mov	r3, r1
 80089a6:	4630      	mov	r0, r6
 80089a8:	4639      	mov	r1, r7
 80089aa:	f7f7 fd95 	bl	80004d8 <__aeabi_dmul>
 80089ae:	4604      	mov	r4, r0
 80089b0:	460d      	mov	r5, r1
 80089b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089b6:	4652      	mov	r2, sl
 80089b8:	465b      	mov	r3, fp
 80089ba:	f7f7 fbd7 	bl	800016c <__adddf3>
 80089be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80089c2:	f7f7 fd89 	bl	80004d8 <__aeabi_dmul>
 80089c6:	4622      	mov	r2, r4
 80089c8:	462b      	mov	r3, r5
 80089ca:	f7f7 fbcf 	bl	800016c <__adddf3>
 80089ce:	4652      	mov	r2, sl
 80089d0:	4606      	mov	r6, r0
 80089d2:	460f      	mov	r7, r1
 80089d4:	465b      	mov	r3, fp
 80089d6:	4650      	mov	r0, sl
 80089d8:	4659      	mov	r1, fp
 80089da:	f7f7 fd7d 	bl	80004d8 <__aeabi_dmul>
 80089de:	2200      	movs	r2, #0
 80089e0:	4b62      	ldr	r3, [pc, #392]	; (8008b6c <__ieee754_pow+0x734>)
 80089e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80089e6:	f7f7 fbc1 	bl	800016c <__adddf3>
 80089ea:	4632      	mov	r2, r6
 80089ec:	463b      	mov	r3, r7
 80089ee:	f7f7 fbbd 	bl	800016c <__adddf3>
 80089f2:	9804      	ldr	r0, [sp, #16]
 80089f4:	460d      	mov	r5, r1
 80089f6:	4604      	mov	r4, r0
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	4650      	mov	r0, sl
 80089fe:	4659      	mov	r1, fp
 8008a00:	f7f7 fd6a 	bl	80004d8 <__aeabi_dmul>
 8008a04:	2200      	movs	r2, #0
 8008a06:	4682      	mov	sl, r0
 8008a08:	468b      	mov	fp, r1
 8008a0a:	4b58      	ldr	r3, [pc, #352]	; (8008b6c <__ieee754_pow+0x734>)
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	4629      	mov	r1, r5
 8008a10:	f7f7 fbaa 	bl	8000168 <__aeabi_dsub>
 8008a14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008a18:	f7f7 fba6 	bl	8000168 <__aeabi_dsub>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	4630      	mov	r0, r6
 8008a22:	4639      	mov	r1, r7
 8008a24:	f7f7 fba0 	bl	8000168 <__aeabi_dsub>
 8008a28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a2c:	f7f7 fd54 	bl	80004d8 <__aeabi_dmul>
 8008a30:	4622      	mov	r2, r4
 8008a32:	4606      	mov	r6, r0
 8008a34:	460f      	mov	r7, r1
 8008a36:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a3a:	462b      	mov	r3, r5
 8008a3c:	f7f7 fd4c 	bl	80004d8 <__aeabi_dmul>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	4630      	mov	r0, r6
 8008a46:	4639      	mov	r1, r7
 8008a48:	f7f7 fb90 	bl	800016c <__adddf3>
 8008a4c:	4606      	mov	r6, r0
 8008a4e:	460f      	mov	r7, r1
 8008a50:	4602      	mov	r2, r0
 8008a52:	460b      	mov	r3, r1
 8008a54:	4650      	mov	r0, sl
 8008a56:	4659      	mov	r1, fp
 8008a58:	f7f7 fb88 	bl	800016c <__adddf3>
 8008a5c:	a338      	add	r3, pc, #224	; (adr r3, 8008b40 <__ieee754_pow+0x708>)
 8008a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a62:	9804      	ldr	r0, [sp, #16]
 8008a64:	460d      	mov	r5, r1
 8008a66:	4604      	mov	r4, r0
 8008a68:	f7f7 fd36 	bl	80004d8 <__aeabi_dmul>
 8008a6c:	4652      	mov	r2, sl
 8008a6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008a72:	465b      	mov	r3, fp
 8008a74:	4620      	mov	r0, r4
 8008a76:	4629      	mov	r1, r5
 8008a78:	f7f7 fb76 	bl	8000168 <__aeabi_dsub>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	4630      	mov	r0, r6
 8008a82:	4639      	mov	r1, r7
 8008a84:	f7f7 fb70 	bl	8000168 <__aeabi_dsub>
 8008a88:	a32f      	add	r3, pc, #188	; (adr r3, 8008b48 <__ieee754_pow+0x710>)
 8008a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8e:	f7f7 fd23 	bl	80004d8 <__aeabi_dmul>
 8008a92:	a32f      	add	r3, pc, #188	; (adr r3, 8008b50 <__ieee754_pow+0x718>)
 8008a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a98:	4606      	mov	r6, r0
 8008a9a:	460f      	mov	r7, r1
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	4629      	mov	r1, r5
 8008aa0:	f7f7 fd1a 	bl	80004d8 <__aeabi_dmul>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	4639      	mov	r1, r7
 8008aac:	f7f7 fb5e 	bl	800016c <__adddf3>
 8008ab0:	4b2f      	ldr	r3, [pc, #188]	; (8008b70 <__ieee754_pow+0x738>)
 8008ab2:	444b      	add	r3, r9
 8008ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab8:	f7f7 fb58 	bl	800016c <__adddf3>
 8008abc:	4604      	mov	r4, r0
 8008abe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008ac0:	460d      	mov	r5, r1
 8008ac2:	f7f7 fc9f 	bl	8000404 <__aeabi_i2d>
 8008ac6:	4606      	mov	r6, r0
 8008ac8:	460f      	mov	r7, r1
 8008aca:	4b2a      	ldr	r3, [pc, #168]	; (8008b74 <__ieee754_pow+0x73c>)
 8008acc:	4622      	mov	r2, r4
 8008ace:	444b      	add	r3, r9
 8008ad0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ad4:	462b      	mov	r3, r5
 8008ad6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ada:	f7f7 fb47 	bl	800016c <__adddf3>
 8008ade:	4642      	mov	r2, r8
 8008ae0:	464b      	mov	r3, r9
 8008ae2:	f7f7 fb43 	bl	800016c <__adddf3>
 8008ae6:	4632      	mov	r2, r6
 8008ae8:	463b      	mov	r3, r7
 8008aea:	f7f7 fb3f 	bl	800016c <__adddf3>
 8008aee:	9804      	ldr	r0, [sp, #16]
 8008af0:	4632      	mov	r2, r6
 8008af2:	463b      	mov	r3, r7
 8008af4:	4682      	mov	sl, r0
 8008af6:	468b      	mov	fp, r1
 8008af8:	f7f7 fb36 	bl	8000168 <__aeabi_dsub>
 8008afc:	4642      	mov	r2, r8
 8008afe:	464b      	mov	r3, r9
 8008b00:	f7f7 fb32 	bl	8000168 <__aeabi_dsub>
 8008b04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b08:	e60b      	b.n	8008722 <__ieee754_pow+0x2ea>
 8008b0a:	f04f 0801 	mov.w	r8, #1
 8008b0e:	e6a8      	b.n	8008862 <__ieee754_pow+0x42a>
 8008b10:	4a454eef 	.word	0x4a454eef
 8008b14:	3fca7e28 	.word	0x3fca7e28
 8008b18:	93c9db65 	.word	0x93c9db65
 8008b1c:	3fcd864a 	.word	0x3fcd864a
 8008b20:	a91d4101 	.word	0xa91d4101
 8008b24:	3fd17460 	.word	0x3fd17460
 8008b28:	518f264d 	.word	0x518f264d
 8008b2c:	3fd55555 	.word	0x3fd55555
 8008b30:	db6fabff 	.word	0xdb6fabff
 8008b34:	3fdb6db6 	.word	0x3fdb6db6
 8008b38:	33333303 	.word	0x33333303
 8008b3c:	3fe33333 	.word	0x3fe33333
 8008b40:	e0000000 	.word	0xe0000000
 8008b44:	3feec709 	.word	0x3feec709
 8008b48:	dc3a03fd 	.word	0xdc3a03fd
 8008b4c:	3feec709 	.word	0x3feec709
 8008b50:	145b01f5 	.word	0x145b01f5
 8008b54:	be3e2fe0 	.word	0xbe3e2fe0
 8008b58:	43400000 	.word	0x43400000
 8008b5c:	0003988e 	.word	0x0003988e
 8008b60:	000bb679 	.word	0x000bb679
 8008b64:	08009488 	.word	0x08009488
 8008b68:	3ff00000 	.word	0x3ff00000
 8008b6c:	40080000 	.word	0x40080000
 8008b70:	080094a8 	.word	0x080094a8
 8008b74:	08009498 	.word	0x08009498
 8008b78:	a39b      	add	r3, pc, #620	; (adr r3, 8008de8 <__ieee754_pow+0x9b0>)
 8008b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7e:	4640      	mov	r0, r8
 8008b80:	4649      	mov	r1, r9
 8008b82:	f7f7 faf3 	bl	800016c <__adddf3>
 8008b86:	4622      	mov	r2, r4
 8008b88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b8c:	462b      	mov	r3, r5
 8008b8e:	4650      	mov	r0, sl
 8008b90:	4639      	mov	r1, r7
 8008b92:	f7f7 fae9 	bl	8000168 <__aeabi_dsub>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b9e:	f7f7 ff2b 	bl	80009f8 <__aeabi_dcmpgt>
 8008ba2:	2800      	cmp	r0, #0
 8008ba4:	f47f ae0d 	bne.w	80087c2 <__ieee754_pow+0x38a>
 8008ba8:	4aa3      	ldr	r2, [pc, #652]	; (8008e38 <__ieee754_pow+0xa00>)
 8008baa:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	f340 8103 	ble.w	8008dba <__ieee754_pow+0x982>
 8008bb4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008bb8:	2000      	movs	r0, #0
 8008bba:	151b      	asrs	r3, r3, #20
 8008bbc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008bc0:	fa4a f303 	asr.w	r3, sl, r3
 8008bc4:	4433      	add	r3, r6
 8008bc6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008bca:	4f9c      	ldr	r7, [pc, #624]	; (8008e3c <__ieee754_pow+0xa04>)
 8008bcc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008bd0:	4117      	asrs	r7, r2
 8008bd2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008bd6:	ea23 0107 	bic.w	r1, r3, r7
 8008bda:	f1c2 0214 	rsb	r2, r2, #20
 8008bde:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008be2:	fa4a fa02 	asr.w	sl, sl, r2
 8008be6:	2e00      	cmp	r6, #0
 8008be8:	4602      	mov	r2, r0
 8008bea:	460b      	mov	r3, r1
 8008bec:	4620      	mov	r0, r4
 8008bee:	4629      	mov	r1, r5
 8008bf0:	bfb8      	it	lt
 8008bf2:	f1ca 0a00 	rsblt	sl, sl, #0
 8008bf6:	f7f7 fab7 	bl	8000168 <__aeabi_dsub>
 8008bfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c02:	4642      	mov	r2, r8
 8008c04:	464b      	mov	r3, r9
 8008c06:	f7f7 fab1 	bl	800016c <__adddf3>
 8008c0a:	a379      	add	r3, pc, #484	; (adr r3, 8008df0 <__ieee754_pow+0x9b8>)
 8008c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c10:	2000      	movs	r0, #0
 8008c12:	460d      	mov	r5, r1
 8008c14:	4604      	mov	r4, r0
 8008c16:	f7f7 fc5f 	bl	80004d8 <__aeabi_dmul>
 8008c1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c1e:	4606      	mov	r6, r0
 8008c20:	460f      	mov	r7, r1
 8008c22:	4620      	mov	r0, r4
 8008c24:	4629      	mov	r1, r5
 8008c26:	f7f7 fa9f 	bl	8000168 <__aeabi_dsub>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4640      	mov	r0, r8
 8008c30:	4649      	mov	r1, r9
 8008c32:	f7f7 fa99 	bl	8000168 <__aeabi_dsub>
 8008c36:	a370      	add	r3, pc, #448	; (adr r3, 8008df8 <__ieee754_pow+0x9c0>)
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	f7f7 fc4c 	bl	80004d8 <__aeabi_dmul>
 8008c40:	a36f      	add	r3, pc, #444	; (adr r3, 8008e00 <__ieee754_pow+0x9c8>)
 8008c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c46:	4680      	mov	r8, r0
 8008c48:	4689      	mov	r9, r1
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	4629      	mov	r1, r5
 8008c4e:	f7f7 fc43 	bl	80004d8 <__aeabi_dmul>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4640      	mov	r0, r8
 8008c58:	4649      	mov	r1, r9
 8008c5a:	f7f7 fa87 	bl	800016c <__adddf3>
 8008c5e:	4604      	mov	r4, r0
 8008c60:	460d      	mov	r5, r1
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	4630      	mov	r0, r6
 8008c68:	4639      	mov	r1, r7
 8008c6a:	f7f7 fa7f 	bl	800016c <__adddf3>
 8008c6e:	4632      	mov	r2, r6
 8008c70:	463b      	mov	r3, r7
 8008c72:	4680      	mov	r8, r0
 8008c74:	4689      	mov	r9, r1
 8008c76:	f7f7 fa77 	bl	8000168 <__aeabi_dsub>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	4620      	mov	r0, r4
 8008c80:	4629      	mov	r1, r5
 8008c82:	f7f7 fa71 	bl	8000168 <__aeabi_dsub>
 8008c86:	4642      	mov	r2, r8
 8008c88:	4606      	mov	r6, r0
 8008c8a:	460f      	mov	r7, r1
 8008c8c:	464b      	mov	r3, r9
 8008c8e:	4640      	mov	r0, r8
 8008c90:	4649      	mov	r1, r9
 8008c92:	f7f7 fc21 	bl	80004d8 <__aeabi_dmul>
 8008c96:	a35c      	add	r3, pc, #368	; (adr r3, 8008e08 <__ieee754_pow+0x9d0>)
 8008c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	460d      	mov	r5, r1
 8008ca0:	f7f7 fc1a 	bl	80004d8 <__aeabi_dmul>
 8008ca4:	a35a      	add	r3, pc, #360	; (adr r3, 8008e10 <__ieee754_pow+0x9d8>)
 8008ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008caa:	f7f7 fa5d 	bl	8000168 <__aeabi_dsub>
 8008cae:	4622      	mov	r2, r4
 8008cb0:	462b      	mov	r3, r5
 8008cb2:	f7f7 fc11 	bl	80004d8 <__aeabi_dmul>
 8008cb6:	a358      	add	r3, pc, #352	; (adr r3, 8008e18 <__ieee754_pow+0x9e0>)
 8008cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbc:	f7f7 fa56 	bl	800016c <__adddf3>
 8008cc0:	4622      	mov	r2, r4
 8008cc2:	462b      	mov	r3, r5
 8008cc4:	f7f7 fc08 	bl	80004d8 <__aeabi_dmul>
 8008cc8:	a355      	add	r3, pc, #340	; (adr r3, 8008e20 <__ieee754_pow+0x9e8>)
 8008cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cce:	f7f7 fa4b 	bl	8000168 <__aeabi_dsub>
 8008cd2:	4622      	mov	r2, r4
 8008cd4:	462b      	mov	r3, r5
 8008cd6:	f7f7 fbff 	bl	80004d8 <__aeabi_dmul>
 8008cda:	a353      	add	r3, pc, #332	; (adr r3, 8008e28 <__ieee754_pow+0x9f0>)
 8008cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce0:	f7f7 fa44 	bl	800016c <__adddf3>
 8008ce4:	4622      	mov	r2, r4
 8008ce6:	462b      	mov	r3, r5
 8008ce8:	f7f7 fbf6 	bl	80004d8 <__aeabi_dmul>
 8008cec:	4602      	mov	r2, r0
 8008cee:	460b      	mov	r3, r1
 8008cf0:	4640      	mov	r0, r8
 8008cf2:	4649      	mov	r1, r9
 8008cf4:	f7f7 fa38 	bl	8000168 <__aeabi_dsub>
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	460d      	mov	r5, r1
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	460b      	mov	r3, r1
 8008d00:	4640      	mov	r0, r8
 8008d02:	4649      	mov	r1, r9
 8008d04:	f7f7 fbe8 	bl	80004d8 <__aeabi_dmul>
 8008d08:	2200      	movs	r2, #0
 8008d0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d12:	4620      	mov	r0, r4
 8008d14:	4629      	mov	r1, r5
 8008d16:	f7f7 fa27 	bl	8000168 <__aeabi_dsub>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d22:	f7f7 fd03 	bl	800072c <__aeabi_ddiv>
 8008d26:	4632      	mov	r2, r6
 8008d28:	4604      	mov	r4, r0
 8008d2a:	460d      	mov	r5, r1
 8008d2c:	463b      	mov	r3, r7
 8008d2e:	4640      	mov	r0, r8
 8008d30:	4649      	mov	r1, r9
 8008d32:	f7f7 fbd1 	bl	80004d8 <__aeabi_dmul>
 8008d36:	4632      	mov	r2, r6
 8008d38:	463b      	mov	r3, r7
 8008d3a:	f7f7 fa17 	bl	800016c <__adddf3>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	460b      	mov	r3, r1
 8008d42:	4620      	mov	r0, r4
 8008d44:	4629      	mov	r1, r5
 8008d46:	f7f7 fa0f 	bl	8000168 <__aeabi_dsub>
 8008d4a:	4642      	mov	r2, r8
 8008d4c:	464b      	mov	r3, r9
 8008d4e:	f7f7 fa0b 	bl	8000168 <__aeabi_dsub>
 8008d52:	4602      	mov	r2, r0
 8008d54:	460b      	mov	r3, r1
 8008d56:	2000      	movs	r0, #0
 8008d58:	4939      	ldr	r1, [pc, #228]	; (8008e40 <__ieee754_pow+0xa08>)
 8008d5a:	f7f7 fa05 	bl	8000168 <__aeabi_dsub>
 8008d5e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008d62:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008d66:	da2b      	bge.n	8008dc0 <__ieee754_pow+0x988>
 8008d68:	4652      	mov	r2, sl
 8008d6a:	f000 f9b5 	bl	80090d8 <scalbn>
 8008d6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d72:	f7ff bbf6 	b.w	8008562 <__ieee754_pow+0x12a>
 8008d76:	4b33      	ldr	r3, [pc, #204]	; (8008e44 <__ieee754_pow+0xa0c>)
 8008d78:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8008d7c:	429f      	cmp	r7, r3
 8008d7e:	f77f af13 	ble.w	8008ba8 <__ieee754_pow+0x770>
 8008d82:	4b31      	ldr	r3, [pc, #196]	; (8008e48 <__ieee754_pow+0xa10>)
 8008d84:	440b      	add	r3, r1
 8008d86:	4303      	orrs	r3, r0
 8008d88:	d00b      	beq.n	8008da2 <__ieee754_pow+0x96a>
 8008d8a:	a329      	add	r3, pc, #164	; (adr r3, 8008e30 <__ieee754_pow+0x9f8>)
 8008d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d94:	f7f7 fba0 	bl	80004d8 <__aeabi_dmul>
 8008d98:	a325      	add	r3, pc, #148	; (adr r3, 8008e30 <__ieee754_pow+0x9f8>)
 8008d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9e:	f7ff bbe0 	b.w	8008562 <__ieee754_pow+0x12a>
 8008da2:	4622      	mov	r2, r4
 8008da4:	462b      	mov	r3, r5
 8008da6:	f7f7 f9df 	bl	8000168 <__aeabi_dsub>
 8008daa:	4642      	mov	r2, r8
 8008dac:	464b      	mov	r3, r9
 8008dae:	f7f7 fe19 	bl	80009e4 <__aeabi_dcmpge>
 8008db2:	2800      	cmp	r0, #0
 8008db4:	f43f aef8 	beq.w	8008ba8 <__ieee754_pow+0x770>
 8008db8:	e7e7      	b.n	8008d8a <__ieee754_pow+0x952>
 8008dba:	f04f 0a00 	mov.w	sl, #0
 8008dbe:	e71e      	b.n	8008bfe <__ieee754_pow+0x7c6>
 8008dc0:	4621      	mov	r1, r4
 8008dc2:	e7d4      	b.n	8008d6e <__ieee754_pow+0x936>
 8008dc4:	f04f 0b00 	mov.w	fp, #0
 8008dc8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008e40 <__ieee754_pow+0xa08>
 8008dcc:	f7ff bb95 	b.w	80084fa <__ieee754_pow+0xc2>
 8008dd0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8008dd4:	f7ff bb91 	b.w	80084fa <__ieee754_pow+0xc2>
 8008dd8:	4638      	mov	r0, r7
 8008dda:	4641      	mov	r1, r8
 8008ddc:	f7ff bbc3 	b.w	8008566 <__ieee754_pow+0x12e>
 8008de0:	9200      	str	r2, [sp, #0]
 8008de2:	f7ff bb9f 	b.w	8008524 <__ieee754_pow+0xec>
 8008de6:	bf00      	nop
 8008de8:	652b82fe 	.word	0x652b82fe
 8008dec:	3c971547 	.word	0x3c971547
 8008df0:	00000000 	.word	0x00000000
 8008df4:	3fe62e43 	.word	0x3fe62e43
 8008df8:	fefa39ef 	.word	0xfefa39ef
 8008dfc:	3fe62e42 	.word	0x3fe62e42
 8008e00:	0ca86c39 	.word	0x0ca86c39
 8008e04:	be205c61 	.word	0xbe205c61
 8008e08:	72bea4d0 	.word	0x72bea4d0
 8008e0c:	3e663769 	.word	0x3e663769
 8008e10:	c5d26bf1 	.word	0xc5d26bf1
 8008e14:	3ebbbd41 	.word	0x3ebbbd41
 8008e18:	af25de2c 	.word	0xaf25de2c
 8008e1c:	3f11566a 	.word	0x3f11566a
 8008e20:	16bebd93 	.word	0x16bebd93
 8008e24:	3f66c16c 	.word	0x3f66c16c
 8008e28:	5555553e 	.word	0x5555553e
 8008e2c:	3fc55555 	.word	0x3fc55555
 8008e30:	c2f8f359 	.word	0xc2f8f359
 8008e34:	01a56e1f 	.word	0x01a56e1f
 8008e38:	3fe00000 	.word	0x3fe00000
 8008e3c:	000fffff 	.word	0x000fffff
 8008e40:	3ff00000 	.word	0x3ff00000
 8008e44:	4090cbff 	.word	0x4090cbff
 8008e48:	3f6f3400 	.word	0x3f6f3400

08008e4c <__ieee754_sqrt>:
 8008e4c:	4b54      	ldr	r3, [pc, #336]	; (8008fa0 <__ieee754_sqrt+0x154>)
 8008e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e52:	438b      	bics	r3, r1
 8008e54:	4606      	mov	r6, r0
 8008e56:	460d      	mov	r5, r1
 8008e58:	460a      	mov	r2, r1
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	d10f      	bne.n	8008e7e <__ieee754_sqrt+0x32>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	460b      	mov	r3, r1
 8008e62:	f7f7 fb39 	bl	80004d8 <__aeabi_dmul>
 8008e66:	4602      	mov	r2, r0
 8008e68:	460b      	mov	r3, r1
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	f7f7 f97d 	bl	800016c <__adddf3>
 8008e72:	4606      	mov	r6, r0
 8008e74:	460d      	mov	r5, r1
 8008e76:	4630      	mov	r0, r6
 8008e78:	4629      	mov	r1, r5
 8008e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e7e:	2900      	cmp	r1, #0
 8008e80:	4607      	mov	r7, r0
 8008e82:	4603      	mov	r3, r0
 8008e84:	dc0e      	bgt.n	8008ea4 <__ieee754_sqrt+0x58>
 8008e86:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008e8a:	ea5c 0707 	orrs.w	r7, ip, r7
 8008e8e:	d0f2      	beq.n	8008e76 <__ieee754_sqrt+0x2a>
 8008e90:	b141      	cbz	r1, 8008ea4 <__ieee754_sqrt+0x58>
 8008e92:	4602      	mov	r2, r0
 8008e94:	460b      	mov	r3, r1
 8008e96:	f7f7 f967 	bl	8000168 <__aeabi_dsub>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	f7f7 fc45 	bl	800072c <__aeabi_ddiv>
 8008ea2:	e7e6      	b.n	8008e72 <__ieee754_sqrt+0x26>
 8008ea4:	1512      	asrs	r2, r2, #20
 8008ea6:	d074      	beq.n	8008f92 <__ieee754_sqrt+0x146>
 8008ea8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008eac:	07d5      	lsls	r5, r2, #31
 8008eae:	f04f 0500 	mov.w	r5, #0
 8008eb2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008eb6:	bf48      	it	mi
 8008eb8:	0fd9      	lsrmi	r1, r3, #31
 8008eba:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8008ebe:	bf44      	itt	mi
 8008ec0:	005b      	lslmi	r3, r3, #1
 8008ec2:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8008ec6:	1051      	asrs	r1, r2, #1
 8008ec8:	0fda      	lsrs	r2, r3, #31
 8008eca:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8008ece:	4628      	mov	r0, r5
 8008ed0:	2216      	movs	r2, #22
 8008ed2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008ed6:	005b      	lsls	r3, r3, #1
 8008ed8:	1987      	adds	r7, r0, r6
 8008eda:	42a7      	cmp	r7, r4
 8008edc:	bfde      	ittt	le
 8008ede:	19b8      	addle	r0, r7, r6
 8008ee0:	1be4      	suble	r4, r4, r7
 8008ee2:	19ad      	addle	r5, r5, r6
 8008ee4:	0fdf      	lsrs	r7, r3, #31
 8008ee6:	3a01      	subs	r2, #1
 8008ee8:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8008eec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ef0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008ef4:	d1f0      	bne.n	8008ed8 <__ieee754_sqrt+0x8c>
 8008ef6:	f04f 0c20 	mov.w	ip, #32
 8008efa:	4696      	mov	lr, r2
 8008efc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008f00:	4284      	cmp	r4, r0
 8008f02:	eb06 070e 	add.w	r7, r6, lr
 8008f06:	dc02      	bgt.n	8008f0e <__ieee754_sqrt+0xc2>
 8008f08:	d112      	bne.n	8008f30 <__ieee754_sqrt+0xe4>
 8008f0a:	429f      	cmp	r7, r3
 8008f0c:	d810      	bhi.n	8008f30 <__ieee754_sqrt+0xe4>
 8008f0e:	2f00      	cmp	r7, #0
 8008f10:	eb07 0e06 	add.w	lr, r7, r6
 8008f14:	da42      	bge.n	8008f9c <__ieee754_sqrt+0x150>
 8008f16:	f1be 0f00 	cmp.w	lr, #0
 8008f1a:	db3f      	blt.n	8008f9c <__ieee754_sqrt+0x150>
 8008f1c:	f100 0801 	add.w	r8, r0, #1
 8008f20:	1a24      	subs	r4, r4, r0
 8008f22:	4640      	mov	r0, r8
 8008f24:	429f      	cmp	r7, r3
 8008f26:	bf88      	it	hi
 8008f28:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8008f2c:	1bdb      	subs	r3, r3, r7
 8008f2e:	4432      	add	r2, r6
 8008f30:	0064      	lsls	r4, r4, #1
 8008f32:	f1bc 0c01 	subs.w	ip, ip, #1
 8008f36:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8008f3a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008f3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008f42:	d1dd      	bne.n	8008f00 <__ieee754_sqrt+0xb4>
 8008f44:	4323      	orrs	r3, r4
 8008f46:	d006      	beq.n	8008f56 <__ieee754_sqrt+0x10a>
 8008f48:	1c54      	adds	r4, r2, #1
 8008f4a:	bf0b      	itete	eq
 8008f4c:	4662      	moveq	r2, ip
 8008f4e:	3201      	addne	r2, #1
 8008f50:	3501      	addeq	r5, #1
 8008f52:	f022 0201 	bicne.w	r2, r2, #1
 8008f56:	106b      	asrs	r3, r5, #1
 8008f58:	0852      	lsrs	r2, r2, #1
 8008f5a:	07e8      	lsls	r0, r5, #31
 8008f5c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008f60:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008f64:	bf48      	it	mi
 8008f66:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008f6a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8008f6e:	4616      	mov	r6, r2
 8008f70:	e781      	b.n	8008e76 <__ieee754_sqrt+0x2a>
 8008f72:	0adc      	lsrs	r4, r3, #11
 8008f74:	3915      	subs	r1, #21
 8008f76:	055b      	lsls	r3, r3, #21
 8008f78:	2c00      	cmp	r4, #0
 8008f7a:	d0fa      	beq.n	8008f72 <__ieee754_sqrt+0x126>
 8008f7c:	02e6      	lsls	r6, r4, #11
 8008f7e:	d50a      	bpl.n	8008f96 <__ieee754_sqrt+0x14a>
 8008f80:	f1c2 0020 	rsb	r0, r2, #32
 8008f84:	fa23 f000 	lsr.w	r0, r3, r0
 8008f88:	1e55      	subs	r5, r2, #1
 8008f8a:	4093      	lsls	r3, r2
 8008f8c:	4304      	orrs	r4, r0
 8008f8e:	1b4a      	subs	r2, r1, r5
 8008f90:	e78a      	b.n	8008ea8 <__ieee754_sqrt+0x5c>
 8008f92:	4611      	mov	r1, r2
 8008f94:	e7f0      	b.n	8008f78 <__ieee754_sqrt+0x12c>
 8008f96:	0064      	lsls	r4, r4, #1
 8008f98:	3201      	adds	r2, #1
 8008f9a:	e7ef      	b.n	8008f7c <__ieee754_sqrt+0x130>
 8008f9c:	4680      	mov	r8, r0
 8008f9e:	e7bf      	b.n	8008f20 <__ieee754_sqrt+0xd4>
 8008fa0:	7ff00000 	.word	0x7ff00000

08008fa4 <finite>:
 8008fa4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8008fa8:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8008fac:	0fc0      	lsrs	r0, r0, #31
 8008fae:	4770      	bx	lr

08008fb0 <matherr>:
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	4770      	bx	lr

08008fb4 <nan>:
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	4901      	ldr	r1, [pc, #4]	; (8008fbc <nan+0x8>)
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	7ff80000 	.word	0x7ff80000

08008fc0 <rint>:
 8008fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fc2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008fc6:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8008fca:	f1bc 0f13 	cmp.w	ip, #19
 8008fce:	4604      	mov	r4, r0
 8008fd0:	460d      	mov	r5, r1
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	4606      	mov	r6, r0
 8008fd6:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8008fda:	dc5a      	bgt.n	8009092 <rint+0xd2>
 8008fdc:	f1bc 0f00 	cmp.w	ip, #0
 8008fe0:	da2b      	bge.n	800903a <rint+0x7a>
 8008fe2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008fe6:	4302      	orrs	r2, r0
 8008fe8:	d023      	beq.n	8009032 <rint+0x72>
 8008fea:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008fee:	4302      	orrs	r2, r0
 8008ff0:	4256      	negs	r6, r2
 8008ff2:	4316      	orrs	r6, r2
 8008ff4:	0c4b      	lsrs	r3, r1, #17
 8008ff6:	0b36      	lsrs	r6, r6, #12
 8008ff8:	4934      	ldr	r1, [pc, #208]	; (80090cc <rint+0x10c>)
 8008ffa:	045b      	lsls	r3, r3, #17
 8008ffc:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8009000:	ea46 0503 	orr.w	r5, r6, r3
 8009004:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8009008:	4602      	mov	r2, r0
 800900a:	462b      	mov	r3, r5
 800900c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8009010:	4620      	mov	r0, r4
 8009012:	4629      	mov	r1, r5
 8009014:	f7f7 f8aa 	bl	800016c <__adddf3>
 8009018:	e9cd 0100 	strd	r0, r1, [sp]
 800901c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009020:	462b      	mov	r3, r5
 8009022:	4622      	mov	r2, r4
 8009024:	f7f7 f8a0 	bl	8000168 <__aeabi_dsub>
 8009028:	4604      	mov	r4, r0
 800902a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800902e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8009032:	4620      	mov	r0, r4
 8009034:	4629      	mov	r1, r5
 8009036:	b003      	add	sp, #12
 8009038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800903a:	4a25      	ldr	r2, [pc, #148]	; (80090d0 <rint+0x110>)
 800903c:	fa42 f20c 	asr.w	r2, r2, ip
 8009040:	4011      	ands	r1, r2
 8009042:	4301      	orrs	r1, r0
 8009044:	d0f5      	beq.n	8009032 <rint+0x72>
 8009046:	0852      	lsrs	r2, r2, #1
 8009048:	ea05 0102 	and.w	r1, r5, r2
 800904c:	ea50 0601 	orrs.w	r6, r0, r1
 8009050:	d00c      	beq.n	800906c <rint+0xac>
 8009052:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009056:	f1bc 0f13 	cmp.w	ip, #19
 800905a:	bf0c      	ite	eq
 800905c:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8009060:	2600      	movne	r6, #0
 8009062:	ea25 0202 	bic.w	r2, r5, r2
 8009066:	fa43 f30c 	asr.w	r3, r3, ip
 800906a:	4313      	orrs	r3, r2
 800906c:	4917      	ldr	r1, [pc, #92]	; (80090cc <rint+0x10c>)
 800906e:	4632      	mov	r2, r6
 8009070:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8009074:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009078:	4620      	mov	r0, r4
 800907a:	4629      	mov	r1, r5
 800907c:	f7f7 f876 	bl	800016c <__adddf3>
 8009080:	e9cd 0100 	strd	r0, r1, [sp]
 8009084:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009088:	4622      	mov	r2, r4
 800908a:	462b      	mov	r3, r5
 800908c:	f7f7 f86c 	bl	8000168 <__aeabi_dsub>
 8009090:	e008      	b.n	80090a4 <rint+0xe4>
 8009092:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8009096:	dd08      	ble.n	80090aa <rint+0xea>
 8009098:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800909c:	d1c9      	bne.n	8009032 <rint+0x72>
 800909e:	4602      	mov	r2, r0
 80090a0:	f7f7 f864 	bl	800016c <__adddf3>
 80090a4:	4604      	mov	r4, r0
 80090a6:	460d      	mov	r5, r1
 80090a8:	e7c3      	b.n	8009032 <rint+0x72>
 80090aa:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 80090ae:	f04f 32ff 	mov.w	r2, #4294967295
 80090b2:	40ca      	lsrs	r2, r1
 80090b4:	4210      	tst	r0, r2
 80090b6:	d0bc      	beq.n	8009032 <rint+0x72>
 80090b8:	0852      	lsrs	r2, r2, #1
 80090ba:	4210      	tst	r0, r2
 80090bc:	bf1f      	itttt	ne
 80090be:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 80090c2:	ea20 0202 	bicne.w	r2, r0, r2
 80090c6:	410e      	asrne	r6, r1
 80090c8:	4316      	orrne	r6, r2
 80090ca:	e7cf      	b.n	800906c <rint+0xac>
 80090cc:	080094b8 	.word	0x080094b8
 80090d0:	000fffff 	.word	0x000fffff
 80090d4:	00000000 	.word	0x00000000

080090d8 <scalbn>:
 80090d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090da:	4616      	mov	r6, r2
 80090dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80090e0:	4604      	mov	r4, r0
 80090e2:	460d      	mov	r5, r1
 80090e4:	460b      	mov	r3, r1
 80090e6:	b982      	cbnz	r2, 800910a <scalbn+0x32>
 80090e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80090ec:	4303      	orrs	r3, r0
 80090ee:	d034      	beq.n	800915a <scalbn+0x82>
 80090f0:	4b2d      	ldr	r3, [pc, #180]	; (80091a8 <scalbn+0xd0>)
 80090f2:	2200      	movs	r2, #0
 80090f4:	f7f7 f9f0 	bl	80004d8 <__aeabi_dmul>
 80090f8:	4b2c      	ldr	r3, [pc, #176]	; (80091ac <scalbn+0xd4>)
 80090fa:	4604      	mov	r4, r0
 80090fc:	429e      	cmp	r6, r3
 80090fe:	460d      	mov	r5, r1
 8009100:	da0d      	bge.n	800911e <scalbn+0x46>
 8009102:	a325      	add	r3, pc, #148	; (adr r3, 8009198 <scalbn+0xc0>)
 8009104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009108:	e01c      	b.n	8009144 <scalbn+0x6c>
 800910a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800910e:	42ba      	cmp	r2, r7
 8009110:	d109      	bne.n	8009126 <scalbn+0x4e>
 8009112:	4602      	mov	r2, r0
 8009114:	f7f7 f82a 	bl	800016c <__adddf3>
 8009118:	4604      	mov	r4, r0
 800911a:	460d      	mov	r5, r1
 800911c:	e01d      	b.n	800915a <scalbn+0x82>
 800911e:	460b      	mov	r3, r1
 8009120:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009124:	3a36      	subs	r2, #54	; 0x36
 8009126:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800912a:	4432      	add	r2, r6
 800912c:	428a      	cmp	r2, r1
 800912e:	dd0c      	ble.n	800914a <scalbn+0x72>
 8009130:	4622      	mov	r2, r4
 8009132:	462b      	mov	r3, r5
 8009134:	a11a      	add	r1, pc, #104	; (adr r1, 80091a0 <scalbn+0xc8>)
 8009136:	e9d1 0100 	ldrd	r0, r1, [r1]
 800913a:	f000 f83b 	bl	80091b4 <copysign>
 800913e:	a318      	add	r3, pc, #96	; (adr r3, 80091a0 <scalbn+0xc8>)
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	f7f7 f9c8 	bl	80004d8 <__aeabi_dmul>
 8009148:	e7e6      	b.n	8009118 <scalbn+0x40>
 800914a:	2a00      	cmp	r2, #0
 800914c:	dd08      	ble.n	8009160 <scalbn+0x88>
 800914e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009152:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009156:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800915a:	4620      	mov	r0, r4
 800915c:	4629      	mov	r1, r5
 800915e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009160:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009164:	da0b      	bge.n	800917e <scalbn+0xa6>
 8009166:	f24c 3350 	movw	r3, #50000	; 0xc350
 800916a:	429e      	cmp	r6, r3
 800916c:	4622      	mov	r2, r4
 800916e:	462b      	mov	r3, r5
 8009170:	dce0      	bgt.n	8009134 <scalbn+0x5c>
 8009172:	a109      	add	r1, pc, #36	; (adr r1, 8009198 <scalbn+0xc0>)
 8009174:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009178:	f000 f81c 	bl	80091b4 <copysign>
 800917c:	e7c1      	b.n	8009102 <scalbn+0x2a>
 800917e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009182:	3236      	adds	r2, #54	; 0x36
 8009184:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009188:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800918c:	4620      	mov	r0, r4
 800918e:	4629      	mov	r1, r5
 8009190:	2200      	movs	r2, #0
 8009192:	4b07      	ldr	r3, [pc, #28]	; (80091b0 <scalbn+0xd8>)
 8009194:	e7d6      	b.n	8009144 <scalbn+0x6c>
 8009196:	bf00      	nop
 8009198:	c2f8f359 	.word	0xc2f8f359
 800919c:	01a56e1f 	.word	0x01a56e1f
 80091a0:	8800759c 	.word	0x8800759c
 80091a4:	7e37e43c 	.word	0x7e37e43c
 80091a8:	43500000 	.word	0x43500000
 80091ac:	ffff3cb0 	.word	0xffff3cb0
 80091b0:	3c900000 	.word	0x3c900000

080091b4 <copysign>:
 80091b4:	b530      	push	{r4, r5, lr}
 80091b6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80091ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091be:	ea42 0503 	orr.w	r5, r2, r3
 80091c2:	4629      	mov	r1, r5
 80091c4:	bd30      	pop	{r4, r5, pc}
	...

080091c8 <_init>:
 80091c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ca:	bf00      	nop
 80091cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ce:	bc08      	pop	{r3}
 80091d0:	469e      	mov	lr, r3
 80091d2:	4770      	bx	lr

080091d4 <_fini>:
 80091d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d6:	bf00      	nop
 80091d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091da:	bc08      	pop	{r3}
 80091dc:	469e      	mov	lr, r3
 80091de:	4770      	bx	lr
